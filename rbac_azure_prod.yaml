{
    "openapi": "3.0.2",
    "x-stoplight": {
      "id": "qpv8ao7rjj2ii"
    },
    "info": {
      "title": "The VUE Platform Core API",
      "description": "The VUE Platform Core API",
      "version": "2.0.0"
    },
    "paths": {
      "/api/v2/admin/accounts": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Accounts",
          "description": "Get a list of all accounts.\n\nkeyword arguments:\nskip -- skip the first n accounts (default 0, int)\nlimit -- limit the number of accounts returned (default 100, int)\ndetails -- return account details (default False, bool)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nAccountResponse -- AccountResponse object\n                    message -- message (str)\n                    data -- Account object or list of Account objects",
          "operationId": "list_accounts_api_v2_admin_accounts_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 150
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "q4dsrtf6w6zpn"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create Account",
          "description": "Creates a new account and creates the admin user for this account with admin role.\n\nkeyword arguments:\nrequest -- request object (Request)\ndetails -- AccountCreate object\n            name -- account name (str)\n            email -- admin email (str)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nAccountResponse -- AccountResponse object\n                    message -- message (str)\n                    data -- AccountCreateResponse object\n                                account -- Account object\n                                users -- list of User objects\n                                api_keys -- list of api keys",
          "operationId": "create_account_api_v2_admin_accounts_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Emailenabled",
                "type": "boolean",
                "default": true
              },
              "name": "emailenabled",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "8zchh65yni92g"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Account",
          "description": "Get a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nAccountResponse -- AccountResponse object\n                    message -- message (str)\n                    data -- Account object",
          "operationId": "get_account_api_v2_admin_accounts__account_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "eg3y7cndybats"
          }
        },
        "put": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update Account",
          "description": "Update a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\naccount_update -- AccountUpdate object\n                    name -- account name (str)\n                    license -- account license (str)\n                    active -- account active (bool)\n                    add_users -- list of users to add to this account (list)\n                    remove_users -- list of users to remove from this account (list)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nAccountResponse -- AccountResponse object\n                    message -- message (str)\n                    data -- Account object",
          "operationId": "update_account_api_v2_admin_accounts__account_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Emailenabled",
                "type": "boolean",
                "default": true
              },
              "name": "emailenabled",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "uzh4ofczz85ov"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete Account",
          "description": "Delete a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nAccountResponse -- AccountResponse object\n                    message -- message (str)\n                    data -- Account object",
          "operationId": "delete_account_api_v2_admin_accounts__account_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "hkcsw19wuravf"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/users": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Users",
          "description": "Get a list of all users for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\ndetails -- return user details (default True, bool)\nemail -- user email (default None, str)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- list of User objects or list of user ids",
          "operationId": "list_users_api_v2_admin_accounts__account_id__users_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Email",
                "type": "string"
              },
              "name": "email",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "sgu8ic2ikz1ry"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create User",
          "description": "Create a new user for a specific account.\n\nkeyword arguments:\ndetails -- UserCreate object\n            name -- user name (str)\n            email -- user email (str)\n            roles -- list of role ids(list)\n            permissions -- list of permission ids(list)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- UserCreateResponse object",
          "operationId": "create_user_api_v2_admin_accounts__account_id__users_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Emailenabled",
                "type": "boolean",
                "default": true
              },
              "name": "emailenabled",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "76jmvl3rmmgcc"
          }
        }
      },
      "/api/v2/admin/users": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Users",
          "description": "Get a list of all users for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\ndetails -- return user details (default True, bool)\nemail -- user email (default None, str)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- list of User objects or list of user ids",
          "operationId": "list_users_api_v2_admin_users_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Email",
                "type": "string"
              },
              "name": "email",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "70oayoprc9sid"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create User",
          "description": "Create a new user for a specific account.\n\nkeyword arguments:\ndetails -- UserCreate object\n            name -- user name (str)\n            email -- user email (str)\n            roles -- list of role ids(list)\n            permissions -- list of permission ids(list)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- UserCreateResponse object",
          "operationId": "create_user_api_v2_admin_users_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Emailenabled",
                "type": "boolean",
                "default": true
              },
              "name": "emailenabled",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7otolq2uz4rpf"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/users/{user_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get User",
          "description": "Get a specific user for a specific account.\n\nkeyword arguments:\nuser_id -- user id (uuid.UUID)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- UserGetResponse object",
          "operationId": "get_user_api_v2_admin_accounts__account_id__users__user_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "y7fu9cx1sbqx3"
          }
        },
        "put": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update User",
          "description": "Update a specific user for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\nuser_id -- user id (uuid.UUID)\nuser_update -- UserUpdate object\n                name -- user name (str)\n                email -- user email (str)\n                active -- user active (bool)\n                add_roles -- list of roles to add to this user (list)\n                remove_roles -- list of roles to remove from this user (list)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- UserUpdateResponse object",
          "operationId": "update_user_api_v2_admin_accounts__account_id__users__user_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "w4rqyazj9nf5t"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete User",
          "description": "Delete a specific user for a specific account.\n\nkeyword arguments:\nuser_id -- user id (uuid.UUID)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- User object",
          "operationId": "delete_user_api_v2_admin_accounts__account_id__users__user_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "12f62gainjvhe"
          }
        }
      },
      "/api/v2/admin/users/{user_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get User",
          "description": "Get a specific user for a specific account.\n\nkeyword arguments:\nuser_id -- user id (uuid.UUID)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- UserGetResponse object",
          "operationId": "get_user_api_v2_admin_users__user_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "lfdm9amyho0xn"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete User",
          "description": "Delete a specific user for a specific account.\n\nkeyword arguments:\nuser_id -- user id (uuid.UUID)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nUserResponse -- UserResponse object\n                    message -- message (str)\n                    data -- User object",
          "operationId": "delete_user_api_v2_admin_users__user_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "kk08mmldjhg18"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/users/{user_id}/api_keys": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Api Keys",
          "description": "List all the API key ID associated with an user.\n\nkeyword arguments:\ndetails -- return roles and permission details (default False)\n\nreturns:\nList of API key IDs",
          "operationId": "list_api_keys_api_v2_admin_accounts__account_id__users__user_id__api_keys_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListApiKeyResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "wofe2vepemvw1"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create Api Key",
          "description": "Create and map it to an user under an account.\nWithin an account, an user can have atmost 10 live API keys.\nRoles assignable to an API is a subset of the roles from the user\ninvoking this API.\n\nkeyword arguments:\n\nreturns:\nApiKeyResponse -- The API key itself\nApiError -- Error message if the API key creation failed",
          "operationId": "create_api_key_api_v2_admin_accounts__account_id__users__user_id__api_keys_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateApiKeyResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "wn295hun2rsek"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/users/{user_id}/api_keys/{api_key_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Api Key Details",
          "description": "Get the attached roles & permissions, user, account of the API Key ID.\n\nkeyword arguments:\n\nreturns:",
          "operationId": "get_api_key_details_api_v2_admin_accounts__account_id__users__user_id__api_keys__api_key_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Api Key Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "api_key_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetApiKeyResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "a1zozra1unvli"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete Api Key",
          "description": "Delete the API key and unlinks from attached roles & permissions, and roles.\n\nkeyword arguments:\n\nreturns:",
          "operationId": "delete_api_key_api_v2_admin_accounts__account_id__users__user_id__api_keys__api_key_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Api Key Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "api_key_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteApiKeyResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "j4mb6q2wivtcz"
          }
        },
        "patch": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update Api Key Details",
          "description": "Add or remove roles and permissions from an API key ID.\n\nkeyword arguments:\n\nreturns:",
          "operationId": "update_api_key_details_api_v2_admin_accounts__account_id__users__user_id__api_keys__api_key_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Api Key Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "api_key_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateApiKeyResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "4o3rzhsh899s3"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/usergroups": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List User Groups",
          "description": "Get a list of all user groups for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\ndetails -- return user group details (default True, bool)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- list of user group objects or list of user group ids",
          "operationId": "list_user_groups_api_v2_admin_accounts__account_id__usergroups_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Name",
                "type": "string"
              },
              "name": "name",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Ids",
                "type": "string"
              },
              "name": "user_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Role Ids",
                "type": "string"
              },
              "name": "role_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Permission Ids",
                "type": "string"
              },
              "name": "permission_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "lnjcwt3uj9it9"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create User Group",
          "description": "Create a new user group for a specific account.\n\nkeyword arguments:\ndetails -- UserGroupCreate object\n            name -- user group name (str)\n            roles -- list of roles (list)\n            user_ids -- list of user ids (list)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- UserGroupCreateResponse object",
          "operationId": "create_user_group_api_v2_admin_accounts__account_id__usergroups_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "cuowm1mmw33qm"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/usergroups/{user_group_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get User Group",
          "description": "Get a specific user group for a specific account.\n\nkeyword arguments:\nuser_group_id -- user group id (uuid.UUID)\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- UserGroup object",
          "operationId": "get_user_group_api_v2_admin_accounts__account_id__usergroups__user_group_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Group Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_group_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ffrdsy24emnis"
          }
        },
        "put": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update User Group",
          "description": "Update a specific user group for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\nuser_group_id -- user group id (uuid.UUID)\nuser_group_update -- UserGroupUpdate object\n                        name -- user group name (str)\n                        add_roles -- list of roles to add to this user group (list)\n                        remove_roles -- list of roles to remove from this user group (list)\n                        add_users -- list of users to add to this user group (list)\n                        remove_users -- list of users to remove from this user group (list)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- UserGroup object",
          "operationId": "update_user_group_api_v2_admin_accounts__account_id__usergroups__user_group_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "User Group Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_group_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "kz1hux4d8ykax"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete User Group",
          "description": "Delete a specific user group for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\nuser_group_id -- user group id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- UserGroup object",
          "operationId": "delete_user_group_api_v2_admin_accounts__account_id__usergroups__user_group_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "User Group Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "user_group_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "buqauxmc0q7bn"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/roles": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Roles",
          "description": "Get a list of all roles for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nRoleResponse -- RoleResponse object\n                    message -- message (str)\n                    data -- list of roles",
          "operationId": "list_roles_api_v2_admin_accounts__account_id__roles_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Ids",
                "type": "string"
              },
              "name": "user_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Group Ids",
                "type": "string"
              },
              "name": "user_group_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fpqd39ckkoyx7"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create Role",
          "description": "Create a new role for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\nrole -- Role object\n        name -- role name (str)\n        permissions -- list of permissions (list)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- message -- message (str)\n        data -- Role object",
          "operationId": "create_role_api_v2_admin_accounts__account_id__roles_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleCreateModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "z9p9qpylnrqs8"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/roles/{role_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Role",
          "description": "Get a specific role for a specific account.",
          "operationId": "get_role_api_v2_admin_accounts__account_id__roles__role_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Role Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "role_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "8w9sl47pqwmce"
          }
        },
        "put": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update Role",
          "description": "Update a specific role for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\nrole_id -- role id (uuid.UUID)\nrole_update -- RoleUpdate object\n                name -- role name (str)\n                permissions -- list of permissions (list)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- Role object",
          "operationId": "update_role_api_v2_admin_accounts__account_id__roles__role_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Role Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "role_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleUpdateModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "5lu49zkom03zw"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete Role",
          "description": "Delete a specific role for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\nrole_id -- role id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- Role object",
          "operationId": "delete_role_api_v2_admin_accounts__account_id__roles__role_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Role Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "role_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "pxyzsdq48fie8"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/permissions": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Permissions",
          "description": "Get a list of all permissions for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\nPermissionResponse -- PermissionResponse object\n                    message -- message (str)\n                    data -- list of permissions",
          "operationId": "list_permissions_api_v2_admin_accounts__account_id__permissions_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Name",
                "type": "string"
              },
              "name": "name",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Role Ids",
                "type": "string"
              },
              "name": "role_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Ids",
                "type": "string"
              },
              "name": "user_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Group Ids",
                "type": "string"
              },
              "name": "user_group_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Group",
                "type": "string"
              },
              "name": "group",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Entity",
                "type": "string"
              },
              "name": "entity",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "lamyuu2zosnqj"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create Permission",
          "description": "Create a new permission for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\npermission -- Permission object\n                route -- route (str)\n                name -- permission name (str)\n                methods -- list of methods (list)\n                group -- group (str)\n                entity -- entity (str)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- message -- message (str)\n    data -- Permission object",
          "operationId": "create_permission_api_v2_admin_accounts__account_id__permissions_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "nwrq0ix2rdiug"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/permissions/{permission_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Permission",
          "description": "Get a specific permission for a specific account.",
          "operationId": "get_permission_api_v2_admin_accounts__account_id__permissions__permission_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Permission Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "permission_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "rvxxq767wb4ka"
          }
        },
        "put": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update Permission",
          "description": "Update a specific permission for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\npermission_id -- permission id (uuid.UUID)\npermission_update -- PermissionUpdate object\n                name -- permission name (str)\n                permissions -- list of permissions (list)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- Permission object",
          "operationId": "update_permission_api_v2_admin_accounts__account_id__permissions__permission_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Permission Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "permission_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "wr7cmde7jvs8r"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete Permission",
          "description": "Delete a specific permission for a specific account.\n\nkeyword arguments:\naccount_id -- account id (uuid.UUID)\npermission_id -- permission id (uuid.UUID)\ndb -- database session (default Depends(get_db), Session)\naccess_token -- access token (default None, str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturns:\ndict -- dict with message and data keys\n        message -- message (str)\n        data -- Permission object",
          "operationId": "delete_permission_api_v2_admin_accounts__account_id__permissions__permission_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Permission Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "permission_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "vghljzeah3grj"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/resource_allocation": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Resource Allocations",
          "description": "List all resource allocations\n\nkeyword arguments:\nskip -- skip the first n resource_allocations (default 0, int)\nlimit -- limit the number of resource_allocations returned (default 100, int)\ndetails -- include resource_allocation details (default False, bool)\ndb -- database connection (Session)\naccess_token -- access token (str)\nx_api_key -- api-key (str)\naccounts_id -- accounts-id (str)\ndataset_id -- dataset-id (str)\nname -- name of resource_allocation (str)\nuser_ids -- user-ids (str)\nuser_group_ids -- user-group-ids (str)\n\nreturns:\nresponse -- response (dict)\n    message -- message (dict)\n    data -- resource_allocations (dict)",
          "operationId": "list_resource_allocations_api_v2_admin_accounts__account_id__resource_allocation_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Details",
                "type": "boolean",
                "default": false
              },
              "name": "details",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Name",
                "type": "string"
              },
              "name": "name",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Dataset Id",
                "type": "string"
              },
              "name": "dataset_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Ids",
                "type": "string"
              },
              "name": "user_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Group Ids",
                "type": "string"
              },
              "name": "user_group_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Role Ids",
                "type": "string"
              },
              "name": "role_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9l0bdg1izhs3v"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create Resource Allocation",
          "description": "Create resource_allocation\n\nkeyword arguments:\nresource_allocation -- resource_allocation object\ndb -- database connection (Session)\naccess_token -- access token (str)\nx_api_key -- api-key (str)\naccounts_id -- accounts-id (str)\n\nreturns:\nresponse -- response (dict)\n    message -- message (dict)\n    data -- resource_allocation (dict)",
          "operationId": "create_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAllocationCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2m12qyvdq2nlz"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/resource_allocation/{resource_allocation_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Resource Allocation",
          "description": "Get resource_allocation\n\nkeyword arguments:\nresource_allocation_id -- resource_allocation-id (uuid)\ndb -- database connection (Session)\naccess_token -- access token (str)\nx_api_key -- api-key (str)\naccounts_id -- accounts-id (str)\n\nreturns:\nresponse -- response (dict)\n    message -- message (dict)\n    data -- resource_allocation (dict)",
          "operationId": "get_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Resource Allocation Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "resource_allocation_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "cmv4kkqn2rpfu"
          }
        },
        "put": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update Resource Allocation Overwrite",
          "description": "Update resource_allocation\n\nkeyword arguments:\nresource_allocation_id -- resource_allocation-id (uuid)\nresource_allocation -- resource_allocation object\ndb -- database connection (Session)\naccess_token -- access token (str)\nx_api_key -- api-key (str)\naccounts_id -- accounts-id (str)\n\nreturns:\nresponse -- response (dict)\n    message -- message (dict)\n    data -- resource_allocation (dict)",
          "operationId": "update_resource_allocation_overwrite_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Resource Allocation Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "resource_allocation_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAllocationUpdateOverwrite"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fpbmau315zdan"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete Resource Allocation",
          "description": "Delete resource_allocation\n\nkeyword arguments:\nresource_allocation_id -- resource_allocation-id (uuid)\ndb -- database connection (Session)\naccess_token -- access token (str)\nx_api_key -- api-key (str)\naccounts_id -- accounts-id (str)\n\nreturns:\nresponse -- response (dict)\n    message -- message (dict)",
          "operationId": "delete_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Resource Allocation Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "resource_allocation_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fj55apixxr3l3"
          }
        },
        "patch": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update Resource Allocation",
          "description": "Update resource_allocation\n\nkeyword arguments:\nresource_allocation_id -- resource_allocation-id (uuid)\nresource_allocation -- resource_allocation object\ndb -- database connection (Session)\naccess_token -- access token (str)\nx_api_key -- api-key (str)\naccounts_id -- accounts-id (str)\n\nreturns:\nresponse -- response (dict)\n    message -- message (dict)\n    data -- resource_allocation (dict)",
          "operationId": "update_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Resource Allocation Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "resource_allocation_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAllocationUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "df86lb29hrhac"
          }
        }
      },
      "/api/v2/admin/trino_rbac_rules": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Rules",
          "operationId": "get_rules_api_v2_admin_trino_rbac_rules_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "x-stoplight": {
            "id": "h4n5d4kqjj3rl"
          }
        }
      },
      "/api/v2/admin/rbac_status": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Rbac Status",
          "operationId": "get_rbac_status_api_v2_admin_rbac_status_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Skip",
                "type": "integer",
                "default": 0
              },
              "name": "skip",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 100
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "mmtqftg1togkw"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create Rbac Status",
          "operationId": "create_rbac_status_api_v2_admin_rbac_status_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RbacStatusCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "t2zvtdd95vuhi"
          }
        }
      },
      "/api/v2/admin/rbac_status/{rbac_status_id}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Rbac Status By Id",
          "operationId": "get_rbac_status_by_id_api_v2_admin_rbac_status__rbac_status_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Rbac Status Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "rbac_status_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "efkmer5dwxmtj"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete Rbac Status",
          "operationId": "delete_rbac_status_api_v2_admin_rbac_status__rbac_status_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Rbac Status Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "rbac_status_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yp6srngsrsztu"
          }
        },
        "patch": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Modify Rbac Status",
          "operationId": "modify_rbac_status_api_v2_admin_rbac_status__rbac_status_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Rbac Status Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "rbac_status_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RbacStatusUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "34mm0dfty7nj2"
          }
        }
      },
      "/api/v2/authentication/list_identity_providers": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "List Idp",
          "description": "Get a list of all suppported identity providers.\n\nkeyworkd arguments:\nrequest -- request object (Request)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturn:\ndict -- dict with message and data keys\n        message -- list of identity providers (str)\n        data -- idp_login_urls",
          "operationId": "list_idp_api_v2_authentication_list_identity_providers_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Is Custom",
                "type": "boolean",
                "default": false
              },
              "name": "is_custom",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Name",
                "type": "string"
              },
              "name": "name",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "pqv108ni8em5m"
          }
        }
      },
      "/api/v2/authentication/sign_up_token_callback/{idp}/organization/{organization}": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Sign Up Token Callback",
          "operationId": "sign_up_token_callback_api_v2_authentication_sign_up_token_callback__idp__organization__organization__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Idp",
                "type": "string"
              },
              "name": "idp",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Organization",
                "type": "string"
              },
              "name": "organization",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Code"
              },
              "name": "code",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3xp4wjyya61sb"
          }
        }
      },
      "/api/v2/authentication/sign_in_token_callback/{idp}/organization/{organization}": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Sign In Token Callback",
          "description": "Gets authorization code from keycloak and exchanges it for access token.\nFetch the list of accounts to which the user is linked to\n\nkeyword arguments:\ncode -- authorization code\nidp -- identity provider (str)\nrequest -- request object (Request)\ndb -- database session (default Depends(get_db), Session)\n\nreturn:\nredirect -- redirect to redirect page",
          "operationId": "sign_in_token_callback_api_v2_authentication_sign_in_token_callback__idp__organization__organization__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Idp",
                "type": "string"
              },
              "name": "idp",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Organization",
                "type": "string"
              },
              "name": "organization",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Code"
              },
              "name": "code",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "xx6xbik8kkfyw"
          }
        }
      },
      "/api/v2/authentication/signup/custom-token-callback/{idp}/organization/{organization}": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Custom Token Signup Callback",
          "operationId": "custom_token_signup_callback_api_v2_authentication_signup_custom_token_callback__idp__organization__organization__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Idp",
                "type": "string"
              },
              "name": "idp",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Organization",
                "type": "string"
              },
              "name": "organization",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Code"
              },
              "name": "code",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "oywe7ct5ty46a"
          }
        }
      },
      "/api/v2/authentication/signin/custom-token-callback/{idp}/organization/{organization}": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Custom Token Signin Callback",
          "operationId": "custom_token_signin_callback_api_v2_authentication_signin_custom_token_callback__idp__organization__organization__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Idp",
                "type": "string"
              },
              "name": "idp",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Organization",
                "type": "string"
              },
              "name": "organization",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Code"
              },
              "name": "code",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "sad2qdwb820y9"
          }
        }
      },
      "/api/v2/authentication/signin/callback/saml/idp/{idp}/organization/{organization}": {
        "post": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Saml Callback",
          "operationId": "saml_callback_api_v2_authentication_signin_callback_saml_idp__idp__organization__organization__post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Idp",
                "type": "string"
              },
              "name": "idp",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Organization",
                "type": "string"
              },
              "name": "organization",
              "in": "path"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "g4mzrmvhutiey"
          }
        }
      },
      "/api/v2/authentication/signup/password": {
        "post": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Sign Up Via Password",
          "operationId": "sign_up_via_password_api_v2_authentication_signup_password_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreds"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2mly4asikstgg"
          }
        }
      },
      "/api/v2/authentication/sign_in_via_password": {
        "post": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Sign In Via Password",
          "operationId": "sign_in_via_password_api_v2_authentication_sign_in_via_password_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreds"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "qov6a4nky873i"
          }
        }
      },
      "/api/v2/authentication/signin/password": {
        "post": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Sign In Via Password",
          "operationId": "sign_in_via_password_api_v2_authentication_signin_password_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreds"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "nylqwbdej120g"
          }
        }
      },
      "/api/v2/authentication/signout": {
        "post": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Sign Out",
          "operationId": "sign_out_api_v2_authentication_signout_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutCreds"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "0g0yqtv2crvqk"
          }
        }
      },
      "/api/v2/authentication/identity-provider": {
        "post": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Add Identity Provider",
          "description": "Add a new identity provider\n1.Get the keycloak admin token\n2.Create the identity provider\n3.Create the browser authentication flow\n4.Create the clients for singup and signin\n5.Update the clients with the browser authentication flow (this is to surpass the keycloak login page)\nhttps://stackoverflow.com/questions/46390571/how-to-bypass-keycloak-login-form-and-jump-directly-to-the-idp-login\n6.Update config in stephanie with the created idp info\n7.return the redirect url that needs to be used in the identity provider\n\nkeyword arguments:\nrequest -- request object (Request)\nidp_name -- identity provider name (str)\nidp_client_id -- identity provider client id (str)\nidp_client_secret -- identity provider client secret (str)\ndiscovery_endpoint -- discovery endpoint (str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturn:\ndict -- dict with message and data keys\n            message -- success or failure (str)\n            data -- url to to be used in the identity provider (str)",
          "operationId": "add_identity_provider_api_v2_authentication_identity_provider_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIdentityProvider"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "y09lo7lcn01uy"
          }
        },
        "delete": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Remove Identity Provider",
          "description": "Remove an identity provider\n1.Get the keycloak admin token\n2.Delete the clients for singup and signin\n3.Delete the browser authentication flow\n4.Delete the identity provider\n5.Delete config in stephanie with the created idp info\n\nkeyword arguments:\nrequest -- request object (Request)\nidp_name -- identity provider name (str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturn:\ndict -- dict with message and data keys\n            message -- success or failure (str)\n            data -- url to to be used in the identity provider (str)",
          "operationId": "remove_identity_provider_api_v2_authentication_identity_provider_delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Idp Name",
                "type": "string"
              },
              "name": "idp_name",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "53a0gce6g7s7j"
          }
        }
      },
      "/api/v2/authentication/token/decode/{token}": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Decode Token",
          "operationId": "decode_token_api_v2_authentication_token_decode__token__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Token",
                "type": "string"
              },
              "name": "token",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "wfd9bnar4t2gi"
          }
        }
      },
      "/api/v2/authentication/refresh_tokens": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Refresh Tokens",
          "description": "Takes refresh token as an input and returns new access token and refresh token\n\nkeyword arguments:\nrefresh_token -- refresh token (str)\nidp -- identity provider (str)\nrequest -- request object (Request)\nflow -- flow (str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturn:\ndict -- dict with message and data keys\n        message -- success or failure (str)\n        token -- new tokens (dict)\n        flow -- signup/signin flow/password_signin (str)",
          "operationId": "refresh_tokens_api_v2_authentication_refresh_tokens_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Refresh Token",
                "type": "string"
              },
              "name": "refresh_token",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Idp",
                "type": "string"
              },
              "name": "idp",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Flow",
                "type": "string",
                "default": "signin"
              },
              "name": "flow",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "dksy38h0mpn7x"
          }
        }
      },
      "/api/v2/authentication/refresh-tokens": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Refresh Tokens",
          "description": "Takes refresh token as an input and returns new access token and refresh token\n\nkeyword arguments:\nrefresh_token -- refresh token (str)\nidp -- identity provider (str)\nrequest -- request object (Request)\nflow -- flow (str)\nx_api_key -- api key (default None, str)\naccounts_id -- account id (default None, str)\n\nreturn:\ndict -- dict with message and data keys\n        message -- success or failure (str)\n        token -- new tokens (dict)\n        flow -- signup/signin flow/password_signin (str)",
          "operationId": "refresh_tokens_api_v2_authentication_refresh_tokens_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Refresh Token",
                "type": "string"
              },
              "name": "refresh_token",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Idp",
                "type": "string"
              },
              "name": "idp",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Flow",
                "type": "string",
                "default": "signin"
              },
              "name": "flow",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "xjdzl09lqbw11"
          }
        }
      },
      "/api/v2/authentication/email-verification": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Email Verification",
          "description": "Verify the email of the user\n\nkeyword arguments:\naccount_id -- account id (str)\nuser_id -- user id (str)\nrequest -- request object (Request)\ndb -- database session (default Depends(get_db), Session)\n\nreturn:\nredirect -- redirect to redirect page",
          "operationId": "email_verification_api_v2_authentication_email_verification_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Code"
              },
              "name": "code",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Admin",
                "default": false
              },
              "name": "admin",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Organization",
                "type": "string"
              },
              "name": "organization",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "User Id",
                "type": "string"
              },
              "name": "user_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Account Id",
                "type": "string"
              },
              "name": "account_id",
              "in": "query"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "lkzhmssuneuzk"
          }
        }
      },
      "/api/v2/authentication/forgot-password": {
        "put": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Forgot Password",
          "operationId": "forgot_password_api_v2_authentication_forgot_password_put",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForgotPassword"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Forgot Password Api V2 Authentication Forgot Password Put",
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SuccessResponseStructure"
                      },
                      {
                        "$ref": "#/components/schemas/FailureResponseStructure"
                      }
                    ]
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9a0gvuyt9d2wj"
          }
        }
      },
      "/api/v2/authentication/reset-password": {
        "post": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Reset Password",
          "operationId": "reset_password_api_v2_authentication_reset_password_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResetPassword"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Reset Password Api V2 Authentication Reset Password Post",
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/SuccessResponseStructure"
                      },
                      {
                        "$ref": "#/components/schemas/FailureResponseStructure"
                      }
                    ]
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "cee8wohsqkwri"
          }
        }
      },
      "/api/v2/authentication/code-server/{identity_provider}": {
        "get": {
          "tags": [
            "Authentication",
            "v2"
          ],
          "summary": "Code Server Url Map",
          "operationId": "code_server_url_map_api_v2_authentication_code_server__identity_provider__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Identity Provider",
                "type": "string"
              },
              "name": "identity_provider",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "glzeja439wuby"
          }
        }
      },
      "/api/v2/api-sets": {
        "get": {
          "tags": [
            "ApiSet",
            "v2"
          ],
          "summary": "List Api Sets",
          "description": "List all api-sets\n\nkeyword arguments:\nrequest -- request object\naccess_token -- access token(str)\nx_api_key -- x-api-key(str)\naccounts_id -- accounts-id(str)\n\nreturns:\napi-sets -- response(dict)\n    message -- message(dict)    \n    data -- api-sets(dict)",
          "operationId": "list_api_sets_api_v2_api_sets_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ld181qsk0lb69"
          }
        },
        "post": {
          "tags": [
            "ApiSet",
            "v2"
          ],
          "summary": "Create Api Set",
          "description": "Create api-set\n1.\n\nkeyword arguments:\nrequest -- request object\napi_set -- api-set object\naccess_token -- access token(str)\nx_api_key -- x-api-key(str)\naccounts_id -- accounts-id(str)\n\nreturns:\napi-set -- response(dict)\n    message -- message(dict)\n    data -- api-set(dict)",
          "operationId": "create_api_set_api_v2_api_sets_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiSet"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "573rj1vuvjtsm"
          }
        }
      },
      "/api/v2/api-sets/{api_set_name}": {
        "get": {
          "tags": [
            "ApiSet",
            "v2"
          ],
          "summary": "Get Api Set",
          "description": "Get api-set by name\n\nkeyword arguments:\nrequest -- request object\napi_set_name -- name of api-set(str)\naccess_token -- access token(str)\nx_api_key -- x-api-key(str)\naccounts_id -- accounts-id(str)\n\nreturns:\napi-set -- response(dict)\n    message -- message(dict)\n    data -- api-set(dict)",
          "operationId": "get_api_set_api_v2_api_sets__api_set_name__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Api Set Name",
                "type": "string"
              },
              "name": "api_set_name",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ba9bh5sys633c"
          }
        },
        "put": {
          "tags": [
            "ApiSet",
            "v2"
          ],
          "summary": "Update Api Set",
          "description": "Update api-set \n\nkeyword arguments:\nrequest -- request object\napi_set_name -- name of api-set(str)\nupdated_api_set -- updated api-set object\naccess_token -- access token(str)\nx_api_key -- x-api-key(str)\naccounts_id -- accounts-id(str)\n\nreturns:\napi-set -- response(dict)\n    message -- message(dict)\n    data -- api-set(dict)",
          "operationId": "update_api_set_api_v2_api_sets__api_set_name__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Api Set Name",
                "type": "string"
              },
              "name": "api_set_name",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateApiSet"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "0acm6yti1y2qp"
          }
        },
        "delete": {
          "tags": [
            "ApiSet",
            "v2"
          ],
          "summary": "Delete Api Set",
          "description": "Delete api-set by name\n\nkeyword arguments:\nrequest -- request object\napi_set_name -- name of api-set(str)\naccess_token -- access token(str)\nx_api_key -- x-api-key(str)\naccounts_id -- accounts-id(str)\n\nreturns:\napi-set -- response(dict)\n    message -- message(dict)\n    data -- api-set(dict)",
          "operationId": "delete_api_set_api_v2_api_sets__api_set_name__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Api Set Name",
                "type": "string"
              },
              "name": "api_set_name",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ita29kovizdj0"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/secrets": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "List Account Secrets",
          "description": "Create a secret with the provided secret values\n\nkeyword arguments:\n\nreturns:\nSecretResponse -- The Secret itself\nApiError -- Error message if the Secret creation failed",
          "operationId": "list_account_secrets_api_v2_admin_accounts__account_id__secrets_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Offset",
                "type": "integer",
                "default": 0
              },
              "name": "offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "default": 150
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string"
              },
              "name": "search",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListSecretResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "m9z6sjr48qahn"
          }
        },
        "post": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Create Secret",
          "description": "Create a secret with the provided secret values\n\nkeyword arguments:\n\nreturns:\nSecretResponse -- The Secret itself\nApiError -- Error message if the Secret creation failed",
          "operationId": "create_secret_api_v2_admin_accounts__account_id__secrets_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSecretRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateSecretResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "rsqf6oz6dbj57"
          }
        }
      },
      "/api/v2/admin/accounts/{account_id}/secrets/{secret_name}": {
        "get": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Get Secret Details",
          "description": "Get the secret details of the Secret Name.\n\nkeyword arguments:\n\nreturns:",
          "operationId": "get_secret_details_api_v2_admin_accounts__account_id__secrets__secret_name__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Secret Name",
                "type": "string"
              },
              "name": "secret_name",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetSecretResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "rdc6ee5arqsrq"
          }
        },
        "put": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Update Secret Details",
          "description": "Update the secret values of a secret name.\n\nkeyword arguments:\n\nreturns:",
          "operationId": "update_secret_details_api_v2_admin_accounts__account_id__secrets__secret_name__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Secret Name",
                "type": "string"
              },
              "name": "secret_name",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSecretRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateSecretResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3go2fipidn9aa"
          }
        },
        "delete": {
          "tags": [
            "Admin",
            "v2"
          ],
          "summary": "Delete Secret Details",
          "description": "Delete the secret values of a secret name.\n\nkeyword arguments:\n\nreturns:",
          "operationId": "delete_secret_details_api_v2_admin_accounts__account_id__secrets__secret_name__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "format": "uuid"
              },
              "name": "account_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Secret Name",
                "type": "string"
              },
              "name": "secret_name",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteSecretResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Internal Server Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "jvjm6cgz76wnv"
          }
        }
      },
      "/api/v2/logging/event_logs": {
        "get": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "Get Logs",
          "operationId": "get_logs_api_v2_logging_event_logs_get",
          "parameters": [
            {
              "description": "Account ID filter",
              "required": true,
              "schema": {
                "title": "Account Id",
                "type": "string",
                "description": "Account ID filter"
              },
              "name": "account_id",
              "in": "query"
            },
            {
              "description": "User ID filter",
              "required": false,
              "schema": {
                "title": "User Id",
                "type": "string",
                "description": "User ID filter"
              },
              "name": "user_id",
              "in": "query"
            },
            {
              "description": "Number of days to filter logs",
              "required": false,
              "schema": {
                "title": "Days",
                "type": "integer",
                "description": "Number of days to filter logs"
              },
              "name": "days",
              "in": "query"
            },
            {
              "description": "Number of hours to filter logs",
              "required": false,
              "schema": {
                "title": "Hours",
                "type": "integer",
                "description": "Number of hours to filter logs"
              },
              "name": "hours",
              "in": "query"
            },
            {
              "description": "Number of log entries",
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "description": "Number of log entries",
                "default": 10
              },
              "name": "limit",
              "in": "query"
            },
            {
              "description": "Log level filter",
              "required": false,
              "schema": {
                "title": "Log Level",
                "type": "string",
                "description": "Log level filter"
              },
              "name": "log_level",
              "in": "query"
            },
            {
              "description": "Start time filter in UTC (datetime format)",
              "required": false,
              "schema": {
                "title": "Start Time",
                "type": "string",
                "description": "Start time filter in UTC (datetime format)",
                "format": "date-time"
              },
              "name": "start_time",
              "in": "query"
            },
            {
              "description": "End time filter in UTC (datetime format)",
              "required": false,
              "schema": {
                "title": "End Time",
                "type": "string",
                "description": "End time filter in UTC (datetime format)",
                "format": "date-time"
              },
              "name": "end_time",
              "in": "query"
            },
            {
              "description": "Methods filter (comma separated values)",
              "required": false,
              "schema": {
                "title": "Methods",
                "type": "string",
                "description": "Methods filter (comma separated values)"
              },
              "name": "methods",
              "in": "query"
            },
            {
              "description": "Entities filter (comma separated values)",
              "required": false,
              "schema": {
                "title": "Entities",
                "type": "string",
                "description": "Entities filter (comma separated values)"
              },
              "name": "entities",
              "in": "query"
            },
            {
              "description": "Path filter",
              "required": false,
              "schema": {
                "title": "Path",
                "type": "string",
                "description": "Path filter"
              },
              "name": "path",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "o6g934aqc4u0b"
          }
        }
      },
      "/api/v2/logging/logs": {
        "get": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "Fetch Logs",
          "description": "Fetch logs from Loki",
          "operationId": "fetch_logs_api_v2_logging_logs_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Usecase",
                "type": "string"
              },
              "name": "usecase",
              "in": "query"
            },
            {
              "description": "Number of log entries",
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "description": "Number of log entries",
                "default": 10
              },
              "name": "limit",
              "in": "query"
            },
            {
              "description": "Start time filter in UTC (datetime format)",
              "required": false,
              "schema": {
                "title": "Start Time",
                "type": "string",
                "description": "Start time filter in UTC (datetime format)",
                "format": "date-time"
              },
              "name": "start_time",
              "in": "query"
            },
            {
              "description": "End time filter in UTC (datetime format)",
              "required": false,
              "schema": {
                "title": "End Time",
                "type": "string",
                "description": "End time filter in UTC (datetime format)",
                "format": "date-time"
              },
              "name": "end_time",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "bnx4atggoiezj"
          }
        },
        "post": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "Push Logs",
          "description": "Push logs to Loki",
          "operationId": "push_logs_api_v2_logging_logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Usecase",
                "type": "string"
              },
              "name": "usecase",
              "in": "query"
            },
            {
              "description": "Timestamp in nanoseconds",
              "required": true,
              "schema": {
                "title": "Timestamp",
                "type": "string",
                "description": "Timestamp in nanoseconds"
              },
              "name": "Timestamp",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Data",
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "8ut72cblifyep"
          }
        }
      },
      "/api/v2/logging/logs_schemas": {
        "get": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "List Logs Schema",
          "operationId": "list_logs_schema_api_v2_logging_logs_schemas_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "t9xadva9oku36"
          }
        }
      },
      "/api/v2/logging/logs_schema": {
        "get": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "Fetch Logs Schema",
          "operationId": "fetch_logs_schema_api_v2_logging_logs_schema_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Usecase",
                "type": "string"
              },
              "name": "usecase",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9a3ukzslhd0zk"
          }
        },
        "put": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "Update Logs Schema",
          "operationId": "update_logs_schema_api_v2_logging_logs_schema_put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Usecase",
                "type": "string"
              },
              "name": "usecase",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLogFields"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "khs7x22eritrn"
          }
        },
        "post": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "Create Logs Schema",
          "operationId": "create_logs_schema_api_v2_logging_logs_schema_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Usecase",
                "type": "string"
              },
              "name": "usecase",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLogFields"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fqlk6l0h17xt3"
          }
        },
        "delete": {
          "tags": [
            "Observability",
            "v2",
            "Observability"
          ],
          "summary": "Delete Logs Schema",
          "operationId": "delete_logs_schema_api_v2_logging_logs_schema_delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Usecase",
                "type": "string"
              },
              "name": "usecase",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "f1j2en8qa0hcm"
          }
        }
      },
      "/ping": {
        "get": {
          "tags": [
            "Public"
          ],
          "summary": "Ping",
          "operationId": "ping_ping_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ek7nlmwb5qb40"
          }
        }
      },
      "/docs": {
        "get": {
          "summary": "Get Docs",
          "operationId": "get_docs_docs_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "security": [
            {
              "HTTPBasic": []
            }
          ],
          "x-stoplight": {
            "id": "wikvou1zgaydq"
          }
        }
      },
      "/openapi.json": {
        "get": {
          "tags": [
            "Public"
          ],
          "summary": "Get Openapi Schema",
          "operationId": "get_openapi_schema_openapi_json_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "security": [
            {
              "HTTPBasic": []
            }
          ],
          "x-stoplight": {
            "id": "qd5g2dgosyi0e"
          }
        }
      },
      "/readiness-probe": {
        "get": {
          "tags": [
            "Public"
          ],
          "summary": "Startup Check",
          "description": "This is a startup check endpoint. It can be used to check if the application is up and running.\nReturns:\n- StartupSuccessResponse: If the application is up and running\n- StartupErrorResponse: If the application is not ready to serve requests",
          "operationId": "startup_check_readiness_probe_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yyo7jfn3a99ug"
          }
        }
      },
      "/startup-check": {
        "get": {
          "tags": [
            "Public"
          ],
          "summary": "Startup Check",
          "description": "This is a startup check endpoint. It can be used to check if the application is up and running.\nReturns:\n- StartupSuccessResponse: If the application is up and running\n- StartupErrorResponse: If the application is not ready to serve requests",
          "operationId": "startup_check_startup_check_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "x-stoplight": {
            "id": "zzoxlrfd75315"
          }
        }
      },
      "/api/v1/marketplace/asset_types/": {
        "get": {
          "tags": [
            "marketplace"
          ],
          "summary": "List Asset Types",
          "description": "This API lists the total number of asset_types that have been registered in the asset_type registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered asset_types in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of asset_types in the dataset and a list of all these asset_types in the form of a dictionary - the key of the dictionary being the asset_type identifier .",
          "operationId": "list_asset_types_api_v1_marketplace_asset_types__get",
          "parameters": [
            {
              "description": "This query parameter enables the user to search for asset_types that are enabled for the marketplace.",
              "required": false,
              "schema": {
                "title": "Enabled",
                "type": "boolean",
                "description": "This query parameter enables the user to search for asset_types that are enabled for the marketplace.",
                "default": true
              },
              "name": "enabled",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for asset_types using their entity name.",
              "required": false,
              "schema": {
                "title": "Entity Name",
                "type": "string",
                "description": "This query parameter enables the user to search for asset_types using their entity name."
              },
              "name": "entity_name",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for asset_types using their display name.",
              "required": false,
              "schema": {
                "title": "Asset Type Name",
                "type": "string",
                "description": "This query parameter enables the user to search for asset_types using their display name."
              },
              "name": "asset_type_name",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for asset_type in the asset_type registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for asset_type in the asset_type registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the fields that must be returned from the listing query.",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app__schemas__asset_types__ListingFields"
                },
                "description": "This query parameter allows you to define the fields that must be returned from the listing query."
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "gs7y47ua0vjt1"
          }
        },
        "post": {
          "tags": [
            "marketplace"
          ],
          "summary": "Create Asset Type",
          "operationId": "create_asset_type_api_v1_marketplace_asset_types__post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetType"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "lwfmt3axv5ti2"
          }
        }
      },
      "/api/v1/marketplace/asset_types/{asset_type_id}": {
        "get": {
          "tags": [
            "marketplace"
          ],
          "summary": "Get Asset Type",
          "operationId": "get_asset_type_api_v1_marketplace_asset_types__asset_type_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset_type registry",
              "required": true,
              "schema": {
                "title": "Asset Type Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset_type registry"
              },
              "name": "asset_type_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "k5vz1j2r4aqy1"
          }
        },
        "delete": {
          "tags": [
            "marketplace"
          ],
          "summary": "Delete Asset Type",
          "operationId": "delete_asset_type_api_v1_marketplace_asset_types__asset_type_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset_type registry",
              "required": true,
              "schema": {
                "title": "Asset Type Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset_type registry"
              },
              "name": "asset_type_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "zknykw1mo6art"
          }
        },
        "patch": {
          "tags": [
            "marketplace"
          ],
          "summary": "Patch Asset Type",
          "operationId": "patch_asset_type_api_v1_marketplace_asset_types__asset_type_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset_type registry",
              "required": true,
              "schema": {
                "title": "Asset Type Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset_type registry"
              },
              "name": "asset_type_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAssetType"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "o3o7a53xe7c43"
          }
        }
      },
      "/api/v1/marketplace/assets/": {
        "get": {
          "tags": [
            "marketplace"
          ],
          "summary": "List Assets",
          "description": "This API lists the total number of assets that have been registered in the asset registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered assets in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of assets in the dataset and a list of all these assets in the form of a dictionary - the key of the dictionary being the asset identifier .",
          "operationId": "list_assets_api_v1_marketplace_assets__get",
          "parameters": [
            {
              "description": "This query parameter enables the user to search for assets of an asset_type in the marketplace.",
              "required": false,
              "schema": {
                "title": "Asset Type Id",
                "type": "string",
                "description": "This query parameter enables the user to search for assets of an asset_type in the marketplace."
              },
              "name": "asset_type_id",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for assets of an asset_type in the marketplace.",
              "required": false,
              "schema": {
                "title": "Asset Type Name",
                "type": "string",
                "description": "This query parameter enables the user to search for assets of an asset_type in the marketplace."
              },
              "name": "asset_type_name",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for assets based on their status in the marketplace.",
              "required": false,
              "schema": {
                "title": "Status",
                "type": "string",
                "description": "This query parameter enables the user to search for assets based on their status in the marketplace."
              },
              "name": "status",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for assets imported in an account from the marketplace.",
              "required": false,
              "schema": {
                "title": "Imported",
                "type": "boolean",
                "description": "This query parameter enables the user to search for assets imported in an account from the marketplace.",
                "default": false
              },
              "name": "imported",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for assets in the assets registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for assets in the assets registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the fields that must be returned from the listing query.",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app__schemas__assets__ListingFields"
                },
                "description": "This query parameter allows you to define the fields that must be returned from the listing query."
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "jcx4qme2x3u8p"
          }
        },
        "post": {
          "tags": [
            "marketplace"
          ],
          "summary": "Create Asset",
          "operationId": "create_asset_api_v1_marketplace_assets__post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAsset"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "lb03pp5c3o9o5"
          }
        }
      },
      "/api/v1/marketplace/assets/{asset_id}": {
        "get": {
          "tags": [
            "marketplace"
          ],
          "summary": "Get Asset",
          "operationId": "get_asset_api_v1_marketplace_assets__asset_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset registry",
              "required": true,
              "schema": {
                "title": "Asset Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset registry"
              },
              "name": "asset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "91n4sr8pow9ht"
          }
        },
        "delete": {
          "tags": [
            "marketplace"
          ],
          "summary": "Delete Asset",
          "operationId": "delete_asset_api_v1_marketplace_assets__asset_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset registry",
              "required": true,
              "schema": {
                "title": "Asset Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset registry"
              },
              "name": "asset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ebekzq6lzrz4u"
          }
        },
        "patch": {
          "tags": [
            "marketplace"
          ],
          "summary": "Patch Asset",
          "operationId": "patch_asset_api_v1_marketplace_assets__asset_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset registry",
              "required": true,
              "schema": {
                "title": "Asset Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset registry"
              },
              "name": "asset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchAsset"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "rbb4ch3k1b68h"
          }
        }
      },
      "/api/v1/marketplace/assets/{asset_id}/import": {
        "post": {
          "tags": [
            "marketplace"
          ],
          "summary": "Import Asset",
          "operationId": "import_asset_api_v1_marketplace_assets__asset_id__import_post",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset registry",
              "required": true,
              "schema": {
                "title": "Asset Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset registry"
              },
              "name": "asset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "cn9jdbpaffmnc"
          }
        }
      },
      "/api/v1/marketplace/assets/{asset_id}/library": {
        "delete": {
          "tags": [
            "marketplace"
          ],
          "summary": "Remove Asset From Library",
          "operationId": "remove_asset_from_library_api_v1_marketplace_assets__asset_id__library_delete",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the asset registry",
              "required": true,
              "schema": {
                "title": "Asset Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the asset registry"
              },
              "name": "asset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2nz2pkich50sz"
          }
        }
      },
      "/api/v1/mlops/experiments": {
        "get": {
          "tags": [
            "MLOps"
          ],
          "summary": "List Experiments",
          "description": "This API lists the total number of experiments that have been registered in the experiment registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered experiments in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of experiments registered and a list of all these experiments in the form of a dictionary.\n\nOptionally, the user can list the exeriments using the following filters:\n- tags: List of tags to filter experiments \n- search: Search string to filter experiments\n- sort_field: Field to sort the experiments\n- sort_order: Order to sort the experiments\n- page_offset: Page offset for pagination\n- page_limit: Page limit for pagination\n- fields: Fields to return in the response",
          "operationId": "list_experiments_api_v1_mlops_experiments_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app__schemas__experiments__ListingFields"
                },
                "default": [
                  "experiment_name",
                  "experiment_id"
                ]
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer"
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer"
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string"
              },
              "name": "search",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Tags",
                "type": "string"
              },
              "name": "tags",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListExperimentsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "d9ya5n7xqzo9v"
          }
        },
        "post": {
          "tags": [
            "MLOps"
          ],
          "summary": "Create Experiment",
          "description": "This API is used to register any experiment pertaining to it in the experiment registry.\n\nThe input to this API is a dictionary containing all the metadata about the experiment - name, description.\nThe output is an experiment identifier which is a unique reference to this experiment in the experiment registry and the mlflow configs which helps to locate the experiment in the mlflow server.",
          "operationId": "create_experiment_api_v1_mlops_experiments_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateExperiment"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "wes8wbh1luwvp"
          }
        }
      },
      "/api/v1/mlops/experiments/{experiment_id}": {
        "get": {
          "tags": [
            "MLOps"
          ],
          "summary": "Get Experiment",
          "description": "This API allows the user to read metadata configuration pertaining to a experiment identifier.\n\nThe input to this API is an experiment identifier, which is mandatory.\nThe output of this API is all the metadata pertaining to the corresponding experiment identifier.",
          "operationId": "get_experiment_api_v1_mlops_experiments__experiment_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Experiment Id",
                "type": "string"
              },
              "name": "experiment_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "sp0op1p0kwcw8"
          }
        },
        "delete": {
          "tags": [
            "MLOps"
          ],
          "summary": "Delete Experiment",
          "description": "This API allows the deletion of any specified experiment.\n\nThe input to the API is a experiment identifier which is a unique reference to this experiment in the experiment registry.\nThe output of this API is a success message if the deletion is successful, else an error message.",
          "operationId": "delete_experiment_api_v1_mlops_experiments__experiment_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Experiment Id",
                "type": "string"
              },
              "name": "experiment_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "aywe1jwerym0o"
          }
        },
        "patch": {
          "tags": [
            "MLOps"
          ],
          "summary": "Update Experiment",
          "description": "This API allows metadata updation for any specified experiment and re-registers the metadata in the experiment registry.\n\nThe input to this API is an experiment identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.\nThe output of this API is the updated metadata configuration for the corresponding experiment identifier.",
          "operationId": "update_experiment_api_v1_mlops_experiments__experiment_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Experiment Id",
                "type": "string"
              },
              "name": "experiment_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateExperiment"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateExperimentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "0bj2vb2hq2rsh"
          }
        }
      },
      "/api/v1/mlops/models": {
        "get": {
          "tags": [
            "MLOps"
          ],
          "summary": "List Models",
          "description": "This API lists the total number of models that have been registered in the model registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered models in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of models registered and a list of all these models in the form of a dictionary.",
          "operationId": "list_models_api_v1_mlops_models_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app__schemas__models__ListingFields"
                },
                "default": [
                  "model_name",
                  "model_id",
                  "experiment_name",
                  "task"
                ]
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer"
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer"
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string"
              },
              "name": "search",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Tags",
                "type": "string"
              },
              "name": "tags",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListModelsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "5iootj7zda6y4"
          }
        },
        "post": {
          "tags": [
            "MLOps"
          ],
          "summary": "Create Model",
          "description": "This API is used to register any models along with metadata configurations pertaining to it in the model registry.\nThe metadata for this model holds information about the model, parameters, metrics, interpretations, artifact location, and the experiment it belongs to.\n\nThe input to this API is a dictionary containing all the metadata about the model.\nThe output is an model identifier which is a unique reference to this model in the model registry, mlflow configs which helps to locate the model in the mlflow server and the meta data.",
          "operationId": "create_model_api_v1_mlops_models_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateModelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "cd28f558oopnu"
          }
        }
      },
      "/api/v1/mlops/models/{model_id}": {
        "get": {
          "tags": [
            "MLOps"
          ],
          "summary": "Get Model",
          "description": "This API allows the user to read metadata configuration pertaining to a model identifier.\n\nThe input to this API is a model identifier, which is mandatory.\nThe output of this API is all the metadata pertaining to the corresponding model identifier.",
          "operationId": "get_model_api_v1_mlops_models__model_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Model Id",
                "type": "string"
              },
              "name": "model_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetModelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "p8izyii4nirvn"
          }
        },
        "delete": {
          "tags": [
            "MLOps"
          ],
          "summary": "Delete Model",
          "description": "This API allows the deletion of any specified model.\n\nThe input to the API is a model identifier which is a unique reference to this model in the model registry.\nThe output of this API is a success message if the deletion is successful, else an error message.",
          "operationId": "delete_model_api_v1_mlops_models__model_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Model Id",
                "type": "string"
              },
              "name": "model_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DeleteModelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3dz6ba9hhd0du"
          }
        },
        "patch": {
          "tags": [
            "MLOps"
          ],
          "summary": "Update Model",
          "description": "This API allows metadata updation for any specified model and re-registers the metadata in the model registry.\n\nThe input to this API is a model identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.\nThe output of this API is the updated metadata configuration for the corresponding model identifier.",
          "operationId": "update_model_api_v1_mlops_models__model_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Model Id",
                "type": "string"
              },
              "name": "model_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateModel"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UpdateModelResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "dydy2ee05zn1u"
          }
        }
      },
      "/api/v1/doc_types/": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "List Doc Types",
          "operationId": "list_doc_types_api_v1_doc_types__get",
          "parameters": [
            {
              "description": "This query parameter enables the user to search for doc_types in the doc_types registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for doc_types in the doc_types registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter describes whether we need to list either preset doc_types, custom doc_types or all doc_types.",
              "required": false,
              "schema": {
                "title": "Preset",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either preset doc_types, custom doc_types or all doc_types."
              },
              "name": "preset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter specifies the doc type.",
              "required": false,
              "schema": {
                "title": "Doc Type",
                "type": "string",
                "description": "This query parameter specifies the doc type."
              },
              "name": "doc_type",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for doc types in the doc type registry based on status.",
              "required": false,
              "schema": {
                "title": "Status",
                "type": "string",
                "description": "This query parameter enables the user to search for doc types in the doc type registry based on status."
              },
              "name": "status",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the fields that must be returned from the listing query.",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app__schemas__doc_types__ListingFields"
                },
                "description": "This query parameter allows you to define the fields that must be returned from the listing query."
              },
              "name": "fields",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the document type ids that must be returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Document Type Ids",
                "type": "string",
                "description": "This query parameter allows you to define the document type ids that must be returned from the listing query."
              },
              "name": "document_type_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocTypeListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "uwbc8jw8krpl8"
          }
        },
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Create Doc Type",
          "operationId": "create_doc_type_api_v1_doc_types__post",
          "parameters": [
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocType"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "57vk2wdyyktbx"
          }
        }
      },
      "/api/v1/doc_types/{doctype_id}": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Get Doc Type",
          "operationId": "get_doc_type_api_v1_doc_types__doctype_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "uwz54c6o4t0om"
          }
        },
        "put": {
          "tags": [
            "documents"
          ],
          "summary": "Update Doctype",
          "description": "This API allows metadata updation for any specified doctype and re-registers the metadata in the doctype registry.\nSince data lineage is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.\nIt does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the doctype metadata.\n\nThe input to this API is a doctype identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.",
          "operationId": "update_doctype_api_v1_doc_types__doctype_id__put",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Doctype",
                  "description": "payload sent for updating doctype"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocTypeUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7t6b86pjfjcii"
          }
        },
        "delete": {
          "tags": [
            "documents"
          ],
          "summary": "Delete Doctype",
          "description": "This API allows metadata deletion for any specified doctype identifier.\nOnce invoked, this API removes this doctype entry from both the listing configuration and also deletes the corresponding metadata stored for this in the doctype registry.\nIf delete API is invoked, all versions of the metadata is deleted.\n\nThe input to this API is a doctype identifier which refers to the doctype that has to be deleted.",
          "operationId": "delete_doctype_api_v1_doc_types__doctype_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This field describes if the document type should be deleted from stephanie.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This field describes if the document type should be deleted from stephanie.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This field describes if the document type should be deleted from document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This field describes if the document type should be deleted from document type dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocTypeDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "xhoskl0lgl1lo"
          }
        },
        "patch": {
          "tags": [
            "documents"
          ],
          "summary": "Patch Doctype",
          "operationId": "patch_doctype_api_v1_doc_types__doctype_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the doctype registry",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the doctype registry"
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocTypeUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocTypeUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "c2ubbbgbh64vl"
          }
        }
      },
      "/api/v1/doc_types/{doctype_id}/export": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Download Doctype",
          "description": "This API returns the dataset csv download link for the specified doctype identifier.\nOnce invoked, this API fetches the dataset that stores the extraction data of the documents uploaded for the doc_type and returns the csv file download link for the dataset.\n\nThe input to this API is a doctype identifier which is mandatory.",
          "operationId": "download_doctype_api_v1_doc_types__doctype_id__export_get",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "4kb7mc9cn7nbu"
          }
        }
      },
      "/api/v1/doc_types/{doctype_id}/taxonomy/template": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Generate Taxonomy Template",
          "description": "This API returns a template taxonomy for the specified doctype identifier.\nOnce invoked, this API fetches the preset documents for the specified doctype and generates a taxonomy based on the extraction data of the preset documents.\n\nThe input to this API is a doctype identifier which is mandatory.",
          "operationId": "generate_taxonomy_template_api_v1_doc_types__doctype_id__taxonomy_template_get",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This field describes if the document type should be fetched from stephanie.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This field describes if the document type should be fetched from stephanie.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This field describes if the document type should be fetched from document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This field describes if the document type should be fetched from document type dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "n8x40bkb0yqlc"
          }
        }
      },
      "/api/v1/doc_types/{doctype_id}/status": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Get Doctype Status",
          "description": "This API returns the status of the specified doctype.\nThe input to this API is a doctype identifier which is mandatory.",
          "operationId": "get_doctype_status_api_v1_doc_types__doctype_id__status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This field describes if the document type should be fetched from stephanie.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This field describes if the document type should be fetched from stephanie.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This field describes if the document type should be fetched from document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This field describes if the document type should be fetched from document type dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7fs1kfgks8kcm"
          }
        }
      },
      "/api/v1/doc_types/{doctype_id}/preset-documents": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Get Preset Documents For Doctype",
          "description": "This API returns the list of preset documents for the given doctype identifier.\nThe input to this API is a doctype identifier which is mandatory.",
          "operationId": "get_preset_documents_for_doctype_api_v1_doc_types__doctype_id__preset_documents_get",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This field describes if the document type should be fetched from stephanie.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This field describes if the document type should be fetched from stephanie.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This field describes if the document type should be fetched from document type dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This field describes if the document type should be fetched from document type dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "obaygpo5ti0tq"
          }
        }
      },
      "/api/v1/doc_types/{doctype_id}/clone": {
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Clone Doc Type",
          "operationId": "clone_doc_type_api_v1_doc_types__doctype_id__clone_post",
          "parameters": [
            {
              "description": "This field describes the ID of the doctype used to query the doctype registry.",
              "required": true,
              "schema": {
                "title": "Doctype Id",
                "type": "string",
                "description": "This field describes the ID of the doctype used to query the doctype registry."
              },
              "name": "doctype_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "lg8xhp8fcbjzi"
          }
        }
      },
      "/api/v1/documents/": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "List Documents",
          "description": "This API lists the total number of documents that have been registered in the document registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered documents in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of documents in the dataset and a list of all these documents in the form of a dictionary - the key of the dictionary being the document identifier .",
          "operationId": "list_documents_api_v1_documents__get",
          "parameters": [
            {
              "description": "This query parameter enables the user to search for documents in the document registry based on status.",
              "required": false,
              "schema": {
                "title": "Hitl Status",
                "type": "string",
                "description": "This query parameter enables the user to search for documents in the document registry based on status."
              },
              "name": "HITL_status",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for documents in the document registry based on action.",
              "required": false,
              "schema": {
                "title": "Hitl Action",
                "type": "string",
                "description": "This query parameter enables the user to search for documents in the document registry based on action."
              },
              "name": "HITL_action",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for document in the document registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for document in the document registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter describes whether we need to list either preset documents, custom documents or all documents.",
              "required": false,
              "schema": {
                "title": "Preset",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either preset documents, custom documents or all documents."
              },
              "name": "preset",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for documents in the document registry based on document type id.",
              "required": false,
              "schema": {
                "title": "Doc Type Id",
                "type": "string",
                "description": "This query parameter enables the user to search for documents in the document registry based on document type id."
              },
              "name": "doc_type_id",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the fields that must be returned from the listing query.",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schemas__documents__ListingFields"
                },
                "description": "This query parameter allows you to define the fields that must be returned from the listing query."
              },
              "name": "fields",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the document ids that must be returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Document Ids",
                "type": "string",
                "description": "This query parameter allows you to define the document ids that must be returned from the listing query."
              },
              "name": "document_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocumentListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ew6kpif68glpj"
          }
        },
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Create Document",
          "operationId": "create_document_api_v1_documents__post",
          "parameters": [
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "kfolbvjf3kufe"
          }
        }
      },
      "/api/v1/documents/{document_id}": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Get Record",
          "operationId": "get_record_api_v1_documents__document_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the document registry",
              "required": true,
              "schema": {
                "title": "Document Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the document registry"
              },
              "name": "document_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "gmmqa0dhvii51"
          }
        },
        "put": {
          "tags": [
            "documents"
          ],
          "summary": "Update Record",
          "operationId": "update_record_api_v1_documents__document_id__put",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the document registry",
              "required": true,
              "schema": {
                "title": "Document Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the document registry"
              },
              "name": "document_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "description": "This query parameter when set to True, disables the s3 based cache ",
              "required": false,
              "schema": {
                "title": "Disable Cache",
                "type": "boolean",
                "description": "This query parameter when set to True, disables the s3 based cache ",
                "default": false
              },
              "name": "disable_cache",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7dobfc0aqny22"
          }
        },
        "delete": {
          "tags": [
            "documents"
          ],
          "summary": "Delete Document",
          "description": "This API allows metadata deletion for any specified document identifier.\nOnce invoked, this API removes this document entry from both the listing configuration and also deletes the corresponding metadata stored for this in the document registry.\nIf delete API is invoked, all versions of the metadata is deleted.\n\nThe input to this API is a document identifier which refers to the document that has to be deleted.",
          "operationId": "delete_document_api_v1_documents__document_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the document used to query the document registry.",
              "required": true,
              "schema": {
                "title": "Document Id",
                "type": "string",
                "description": "This field describes the ID of the document used to query the document registry."
              },
              "name": "document_id",
              "in": "path"
            },
            {
              "description": "This field describes if the document should be deleted from stephanie.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This field describes if the document should be deleted from stephanie.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This field describes if the document should be deleted from stephanie.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This field describes if the document should be deleted from stephanie.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DocumentDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3437spcvi9pvs"
          }
        },
        "patch": {
          "tags": [
            "documents"
          ],
          "summary": "Patch Document",
          "operationId": "patch_document_api_v1_documents__document_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the document registry",
              "required": true,
              "schema": {
                "title": "Document Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the document registry"
              },
              "name": "document_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentPatch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "nfqu8seqo2xa3"
          }
        }
      },
      "/api/v1/documents/live-ocr/{document_id}": {
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Live Ocr",
          "operationId": "live_ocr_api_v1_documents_live_ocr__document_id__post",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the document registry",
              "required": true,
              "schema": {
                "title": "Document Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the document registry"
              },
              "name": "document_id",
              "in": "path"
            },
            {
              "description": "This field describes whether the live ocr should use document config from stephanie",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This field describes whether the live ocr should use document config from stephanie",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This field describes whether the live ocr should use document config from stephanie",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This field describes whether the live ocr should use document config from stephanie",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Config",
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "h6os8zpvtnwqj"
          }
        }
      },
      "/api/v1/documents/query_document/{document_id}": {
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Query Document",
          "operationId": "query_document_api_v1_documents_query_document__document_id__post",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the document registry",
              "required": true,
              "schema": {
                "title": "Document Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the document registry"
              },
              "name": "document_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentQuery"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "asojoftyw7y7z"
          }
        }
      },
      "/api/v1/documents/callback": {
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Document Callback",
          "operationId": "document_callback_api_v1_documents_callback_post",
          "parameters": [
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Callback Payload",
                  "description": "Document Callback payload from nightwing",
                  "default": {}
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "i2uadhjz5v09m"
          }
        }
      },
      "/api/v1/documents/fetch_cache_details/{document_id}": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Fetch Cache Details",
          "operationId": "fetch_cache_details_api_v1_documents_fetch_cache_details__document_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the document registry",
              "required": true,
              "schema": {
                "title": "Document Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the document registry"
              },
              "name": "document_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "env7k68kfsjsz"
          }
        }
      },
      "/api/v1/documents/upload_document": {
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Upload Document",
          "operationId": "upload_document_api_v1_documents_upload_document_post",
          "parameters": [
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Documents",
                  "type": "object",
                  "description": "This defines the payload which is a list of dicts of the documents uploaded.",
                  "default": {}
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "zggv65gy3wmbp"
          }
        }
      },
      "/api/v1/matchings/": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "List Matchings",
          "description": "This API lists the total number of matchings that have been registered in the matching registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered matchings in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of matchings in the dataset and a list of all these matchings in the form of a dictionary - the key of the dictionary being the matching identifier .",
          "operationId": "list_matchings_api_v1_matchings__get",
          "parameters": [
            {
              "description": "This query parameter enables the user to search for matchings in the matching registry based on review status.",
              "required": false,
              "schema": {
                "title": "Review Status",
                "type": "string",
                "description": "This query parameter enables the user to search for matchings in the matching registry based on review status."
              },
              "name": "review_status",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for matching in the matching registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for matching in the matching registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MatchingListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fp2mdexi2vikq"
          }
        },
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Create Matching",
          "operationId": "create_matching_api_v1_matchings__post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "rfhib3dnivbxa"
          }
        }
      },
      "/api/v1/matchings/{matching_id}": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Get Matching",
          "operationId": "get_matching_api_v1_matchings__matching_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the matching registry",
              "required": true,
              "schema": {
                "title": "Matching Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the matching registry"
              },
              "name": "matching_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "s3bd1awm4ozli"
          }
        },
        "put": {
          "tags": [
            "documents"
          ],
          "summary": "Update Matching",
          "operationId": "update_matching_api_v1_matchings__matching_id__put",
          "parameters": [
            {
              "description": "This field describes the ID of the record used to query from the matching registry",
              "required": true,
              "schema": {
                "title": "Matching Id",
                "type": "string",
                "description": "This field describes the ID of the record used to query from the matching registry"
              },
              "name": "matching_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "m6mfs9ubotbog"
          }
        },
        "delete": {
          "tags": [
            "documents"
          ],
          "summary": "Delete Matching",
          "description": "This API allows metadata deletion for any specified matching identifier.\nOnce invoked, this API removes this matching entry from both the listing configuration and also deletes the corresponding metadata stored for this in the matching registry.\nIf delete API is invoked, all versions of the metadata is deleted.\n\nThe input to this API is a matching identifier which refers to the matching that has to be deleted.",
          "operationId": "delete_matching_api_v1_matchings__matching_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the matching used to query the matching registry.",
              "required": true,
              "schema": {
                "title": "Matching Id",
                "type": "string",
                "description": "This field describes the ID of the matching used to query the matching registry."
              },
              "name": "matching_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MatchingDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "8m5uimid6p5k5"
          }
        }
      },
      "/api/v1/hitlactions/": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "List Hitl Actions",
          "operationId": "list_hitl_actions_api_v1_hitlactions__get",
          "parameters": [
            {
              "description": "This query parameter enables the user to search for hitl_actions in the hitl_actions registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for hitl_actions in the hitl_actions registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "eo9cb1hrxoubw"
          }
        }
      },
      "/api/v1/metrics/": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Metrics",
          "operationId": "metrics_api_v1_metrics__get",
          "parameters": [
            {
              "description": "This query parameter describes the start of the interval for fetching the document details.",
              "required": false,
              "schema": {
                "title": "Interval Start",
                "type": "string",
                "description": "This query parameter describes the start of the interval for fetching the document details."
              },
              "name": "interval_start",
              "in": "query"
            },
            {
              "description": "This query parameter describes the end of the interval for fetching the document details.",
              "required": false,
              "schema": {
                "title": "Interval End",
                "type": "string",
                "description": "This query parameter describes the end of the interval for fetching the document details."
              },
              "name": "interval_end",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "h9qewusu5xnl0"
          }
        }
      },
      "/api/v1/datatypes": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "List Datatypes",
          "description": "Lists all the created datatypes",
          "operationId": "list_datatypes_api_v1_datatypes_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Internal",
                "type": "boolean"
              },
              "name": "internal",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "e48sag384vjcd"
          }
        },
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Create Datatype",
          "description": "creates given datatype",
          "operationId": "create_datatype_api_v1_datatypes_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatatype"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "rfxhs1jx1jyzg"
          }
        }
      },
      "/api/v1/datatypes/{datatype_id}": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Get Datatype",
          "description": "Get given datatype",
          "operationId": "get_datatype_api_v1_datatypes__datatype_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Datatype Id",
                "type": "string"
              },
              "name": "datatype_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "gaowdgn5cbloc"
          }
        },
        "delete": {
          "tags": [
            "documents"
          ],
          "summary": "Delete Datatype",
          "description": "Deletes given datatype",
          "operationId": "delete_datatype_api_v1_datatypes__datatype_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Datatype Id",
                "type": "string"
              },
              "name": "datatype_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7dhaf4ux9tv8w"
          }
        },
        "patch": {
          "tags": [
            "documents"
          ],
          "summary": "Update Datatype",
          "description": "updates given datatype",
          "operationId": "update_datatype_api_v1_datatypes__datatype_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Datatype Id",
                "type": "string"
              },
              "name": "datatype_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDatatype"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "hh1xmlrk31zvo"
          }
        }
      },
      "/api/v1/preset-doc-types": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "List Preset Doc Types",
          "description": "Lists all the created preset_doc_types",
          "operationId": "list_preset_doc_types_api_v1_preset_doc_types_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Internal",
                "type": "boolean"
              },
              "name": "internal",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "sa11f1keztv9y"
          }
        },
        "post": {
          "tags": [
            "documents"
          ],
          "summary": "Create Preset Doc Type",
          "description": "creates given preset_doc_type",
          "operationId": "create_preset_doc_type_api_v1_preset_doc_types_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePresetDocType"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "dpw1912shcloh"
          }
        }
      },
      "/api/v1/preset-doc-types/{preset_doc_type_id}": {
        "get": {
          "tags": [
            "documents"
          ],
          "summary": "Get Preset Doc Type",
          "description": "Get given preset_doc_type",
          "operationId": "get_preset_doc_type_api_v1_preset_doc_types__preset_doc_type_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Preset Doc Type Id",
                "type": "string"
              },
              "name": "preset_doc_type_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "lbmu3jita4zl1"
          }
        },
        "delete": {
          "tags": [
            "documents"
          ],
          "summary": "Delete Preset Doc Type",
          "description": "Deletes given preset_doc_type",
          "operationId": "delete_preset_doc_type_api_v1_preset_doc_types__preset_doc_type_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Preset Doc Type Id",
                "type": "string"
              },
              "name": "preset_doc_type_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "740jki94y0g8k"
          }
        },
        "patch": {
          "tags": [
            "documents"
          ],
          "summary": "Update Preset Doc Type",
          "description": "updates given preset_doc_type",
          "operationId": "update_preset_doc_type_api_v1_preset_doc_types__preset_doc_type_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Preset Doc Type Id",
                "type": "string"
              },
              "name": "preset_doc_type_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePresetDocType"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ti4epaqmg363i"
          }
        }
      },
      "/api/v2/documents/hdfc": {
        "post": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Hdfc Sync Inference",
          "operationId": "hdfc_sync_inference_api_v2_documents_hdfc_post",
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_hdfc_sync_inference_api_v2_documents_hdfc_post"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "i0nj7bp3swlsd"
          }
        }
      },
      "/api/v2/documents/async": {
        "post": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Async Document Inference",
          "operationId": "async_document_inference_api_v2_documents_async_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentInferAsyncRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "5silf3j5ct36c"
          }
        }
      },
      "/api/v2/documents/{document_id}": {
        "get": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Get Document Results",
          "operationId": "get_document_results_api_v2_documents__document_id__get",
          "parameters": [
            {
              "name": "document_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "title": "Document Id"
              }
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AsyncDocumentResultsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9rt54cpy14d1c"
          }
        }
      },
      "/api/v2/documents": {
        "post": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Sync Document Inference",
          "description": "This API endpoint allows you to perform document inference synchronously.",
          "operationId": "sync_document_inference_api_v2_documents_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncDocumentRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SyncDocumentResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "bnapgo9n0wv0b"
          }
        }
      },
      "/api/v2/batch/{batch_id}": {
        "get": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Get Batch Details",
          "operationId": "get_batch_details_api_v2_batch__batch_id__get",
          "parameters": [
            {
              "name": "batch_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "This field describes the ID of the batch used to query from the registry.",
                "title": "Batch Id"
              },
              "description": "This field describes the ID of the batch used to query from the registry."
            },
            {
              "name": "offset",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "description": "This field allows you to define the number of records that must be skipped before selection.",
                "default": 0,
                "title": "Offset"
              },
              "description": "This field allows you to define the number of records that must be skipped before selection."
            },
            {
              "name": "limit",
              "in": "query",
              "required": false,
              "schema": {
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the query.",
                "default": 50,
                "title": "Limit"
              },
              "description": "This query parameter allows you to limit the number of records returned from the query."
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "1ft36byq0dj3o"
          }
        }
      },
      "/api/v2/batch/{batch_id}/progress": {
        "get": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Get Batch Progress",
          "operationId": "get_batch_progress_api_v2_batch__batch_id__progress_get",
          "parameters": [
            {
              "name": "batch_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "This field describes the ID of the batch used to query from the registry.",
                "title": "Batch Id"
              },
              "description": "This field describes the ID of the batch used to query from the registry."
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ji33v6v1ukuew"
          }
        }
      },
      "/api/v2/batch/async/download": {
        "post": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Download Batch",
          "operationId": "download_batch_api_v2_batch_async_download_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Callback Payload",
                  "description": "Batch Callback payload from nightwing",
                  "default": {}
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "5oc826i498mjg"
          }
        }
      },
      "/api/v2/job/{job_id}": {
        "get": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Get Job",
          "operationId": "get_job_api_v2_job__job_id__get",
          "parameters": [
            {
              "name": "job_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "This field describes the ID of the job used to query the mlaas registry.",
                "title": "Job Id"
              },
              "description": "This field describes the ID of the job used to query the mlaas registry."
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "otee9zvapb1ap"
          }
        }
      },
      "/api/v2/workflow/{workflow_id}/batch_run": {
        "post": {
          "tags": [
            "idp-delivery"
          ],
          "summary": "Workflow Batch Run",
          "operationId": "workflow_batch_run_api_v2_workflow__workflow_id__batch_run_post",
          "parameters": [
            {
              "name": "workflow_id",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry.",
                "title": "Workflow Id"
              },
              "description": "This field describes the ID of the workflow used to query the workflow registry."
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "description": "Graph payload to be sent to nightwing",
                  "default": {},
                  "title": "Payload"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "y0wfumdvnj66o"
          }
        }
      },
      "/api/v1/workflow/health": {
        "get": {
          "summary": "Startup Check",
          "description": "This is a startup check endpoint. It can be used to check if the application is up and running.\n\nReturns:\n- StartupSuccessResponse: If the application is up and running\n- StartupErrorResponse: If the application is not ready to serve requests",
          "operationId": "startup_check_api_v1_workflow_health_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "tags": [
            "workflows"
          ],
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "11ue6btuv1eao"
          }
        }
      },
      "/api/v1/nodes/definitions/": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "List Node Definitions",
          "description": "List all node definitions.\n\nThis API is used to list all node definitions in the node types registry.\n\nArgs:\n    request: Request object.\n    listquery: EntityListQuery object.\n    fields: List of fields to be included in the response.\n    node_group: Filter for node definitions in the node types registry based on group_name.\n    status: Filter for node definitions in the node types registry based on status.\n    preset: Filter for node definitions in the node types registry based on preset.\n    node_definition_ids: Filter for node definitions in the node types registry based on node_definition_ids.\n\nReturns:\n    JSONResponse: JSON response containing the list of node definitions.",
          "operationId": "list_node_definitions_api_v1_nodes_definitions__get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ListingFields"
                },
                "default": [
                  "node_definition_id",
                  "node_definition_name",
                  "display_name",
                  "node_group",
                  "status",
                  "created_ts",
                  "updated_ts",
                  "preset",
                  "runtime"
                ]
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Node Group",
                "type": "string"
              },
              "name": "node_group",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Status",
                "type": "string"
              },
              "name": "status",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Preset",
                "type": "string"
              },
              "name": "preset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Node Definition Ids",
                "type": "string"
              },
              "name": "node_definition_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer"
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer"
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string"
              },
              "name": "search",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Tags",
                "type": "string"
              },
              "name": "tags",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDefinitionListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "tib3ksinedwbc"
          }
        },
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Create Node Definition",
          "description": "Create a new node definition.\nThis API is used to create a new node definition in the node definition registry.\n\nArgs:\n    request: Request object.\n    node_definition: NodeDefinition object.\n    is_clone: This query parameter describes whether we need to clone the node definition.\n    clone_node_definition_id: This query parameter is the id of node definition that needs to be cloned.",
          "operationId": "create_node_definition_api_v1_nodes_definitions__post",
          "parameters": [
            {
              "description": "This query parameter describes whether we need to clone the node definition.",
              "required": false,
              "schema": {
                "title": "Is Clone",
                "type": "boolean",
                "description": "This query parameter describes whether we need to clone the node definition."
              },
              "name": "is_clone",
              "in": "query"
            },
            {
              "description": "This query parameter is the id of node definition that needs to be cloned",
              "required": false,
              "schema": {
                "title": "Clone Node Definition Id",
                "type": "string",
                "description": "This query parameter is the id of node definition that needs to be cloned"
              },
              "name": "clone_node_definition_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNodeDefinition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDefinitionCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "wjiclidmanlli"
          }
        }
      },
      "/api/v1/nodes/definitions/{node_definition_id}": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Node Definition",
          "description": "Get a node definition.\nThis API is used to get a node definition from the node definition registry.\n\nArgs:\n    request: Request object.\n    node_definition_id: The ID of the node definition.\n\nReturns:\n    JSONResponse: JSON response containing the node definition.",
          "operationId": "get_node_definition_api_v1_nodes_definitions__node_definition_id__get",
          "parameters": [
            {
              "description": "The ID of the node definition.",
              "required": true,
              "schema": {
                "title": "Node Definition Id",
                "type": "string",
                "description": "The ID of the node definition."
              },
              "name": "node_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDefinitionReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ld6oo48ufpce1"
          }
        },
        "put": {
          "tags": [
            "workflows"
          ],
          "summary": "Update Node Definition",
          "description": "Update a node definition.\nThis API is used to update a node definition in the node definition registry.\n\nArgs:\n    request: Request object.\n    node_definition: NodeDefinition object.\n    node_definition_id: The ID of the node definition.\n\nReturns:\n    JSONResponse: JSON response containing the status of the update and the updated node definition.",
          "operationId": "update_node_definition_api_v1_nodes_definitions__node_definition_id__put",
          "parameters": [
            {
              "description": "This field describes the ID of the node definition used to query the node_definition registry.",
              "required": true,
              "schema": {
                "title": "Node Definition Id",
                "type": "string",
                "description": "This field describes the ID of the node definition used to query the node_definition registry."
              },
              "name": "node_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNodeDefinition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDefinitionUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ssj4ep9yb2zpk"
          }
        },
        "delete": {
          "tags": [
            "workflows"
          ],
          "summary": "Delete Node Definition",
          "description": "Delete a node definition.\nThis API is used to delete a node definition from the node definition registry.\n\nArgs:\n    request: Request object.\n    node_definition_id: The ID of the node definition.\n\nReturns:\n    JSONResponse: JSON response containing the status of the deletion.",
          "operationId": "delete_node_definition_api_v1_nodes_definitions__node_definition_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the node definition that needs to be deleted.",
              "required": true,
              "schema": {
                "title": "Node Definition Id",
                "type": "string",
                "description": "This field describes the ID of the node definition that needs to be deleted."
              },
              "name": "node_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDefinitionDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "khgz5yzkmccfv"
          }
        },
        "patch": {
          "tags": [
            "workflows"
          ],
          "summary": "Patch Node Definition",
          "description": "Patch a node definition.\nThis API is used to patch a node definition in the node definition registry.\n\nArgs:\n    request: Request object.\n    patch_config: PatchNodeDefinition object.\n    node_definition_id: The ID of the node definition.\n\nReturns:\n    JSONResponse: JSON response containing the status of the patch and the patched node definition.",
          "operationId": "patch_node_definition_api_v1_nodes_definitions__node_definition_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the node definition used to query the node_definition registry.",
              "required": true,
              "schema": {
                "title": "Node Definition Id",
                "type": "string",
                "description": "This field describes the ID of the node definition used to query the node_definition registry."
              },
              "name": "node_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchNodeDefinition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDefinitionUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "31zjf1hitc7nc"
          }
        }
      },
      "/api/v1/nodes/definitions/register": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Register Node Definition",
          "description": "Register a node definition.\nThis API is used to register a node definition with deployment details in the node definition registry.\n\nArgs:\n    request: Request object.\n    node_registration: NodeRegistration object.\n\nReturns:\n    JSONResponse: JSON response containing the status of the registration and the registered node definition.",
          "operationId": "register_node_definition_api_v1_nodes_definitions_register_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeRegistration"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDefinitionRegisterResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "9z6p8pa9gj5jw"
          }
        }
      },
      "/api/v1/nodes/definitions/create_preset_node_definitions": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Create Node Definition Presets",
          "description": "This API is triggered for creating Preset Node Definitions for a client/account upon creation.",
          "operationId": "create_node_definition_presets_api_v1_nodes_definitions_create_preset_node_definitions_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "5oi9mux94i7e2"
          }
        }
      },
      "/api/v1/nodes/": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "List Nodes",
          "description": "This API lists the total number of nodes that have been registered in the node registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered nodes in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of nodes registered and a list of all these nodes in the form of a dictionary - the key of the dictionary being the n identifier and the value being the name of the node.",
          "operationId": "list_nodes_api_v1_nodes__get",
          "parameters": [
            {
              "description": "This query parameter describes whether we need to list either internal nodes, external nodes or all nodes.",
              "required": false,
              "schema": {
                "title": "Internal",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either internal nodes, external nodes or all nodes."
              },
              "name": "internal",
              "in": "query"
            },
            {
              "description": "This query parameter describes whether we need to list either preset nodes, custom nodes or all nodes.",
              "required": false,
              "schema": {
                "title": "Preset",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either preset nodes, custom nodes or all nodes."
              },
              "name": "preset",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for nodes in the node registry based on tags.",
              "required": false,
              "schema": {
                "title": "Tags",
                "type": "string",
                "description": "This query parameter enables the user to search for nodes in the node registry based on tags."
              },
              "name": "tags",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to search for nodes in the node registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter allows you to search for nodes in the node registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Fields",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "This query parameter allows you to limit the number of records returned from the listing query.",
                "default": []
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "os6ead6mb05x7"
          }
        },
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Create Node",
          "description": "This API is used to register any node along with metadata configurations pertaining to it in the node registry.\nThe metadata for this node holds information about the node and its functionality in the workflow it is a part of.\nThe node registry also helps in isolating and composing nodes as entities that can be used to build and orchestrate workflows.\nWhile a node is created, the API also allows implicit referencing to the workflow of which it is a part of\n\nThe input to this API is:\n    1. a dictionary containing all the metadata about the node - name, description, and any other configurations that drives its functionality.\n    2. a dictionary containing all the metadata about the workflow that the node is a part of which is required to be updated with the new node metadata configuration.\nThe output is a node identifier which is a unique reference to this node in the node registry, and a config which is the same as the input along with the generated identifier.",
          "operationId": "create_node_api_v1_nodes__post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Body_create_node_api_v1_nodes__post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "ssie4w5rhbnm5"
          }
        }
      },
      "/api/v1/nodes/{node_id}": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Node",
          "description": "This API allows the user to read metadata configuration pertaining to a node identifier.\nBy default, the API provides the latest metadata configuration which is present in the node registry.\nThe API also helps capture the end-to-end journey of this metadata by providing versioning, and hence captures data lineage in the metadata layer.\nUsing the version parameter (which by default points to the latest version of the node), we can obtain different versions of this metadata configuration.\n\nThe input to this API is a node identifier, which is mandatory. We can pass an optional version parameter as well - if not passed, it will point to the latest version of the data.\nThe output of this API is all the metadata pertaining to the corresponding node identifier.",
          "operationId": "get_node_api_v1_nodes__node_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the node used to query the node registry.",
              "required": true,
              "schema": {
                "title": "Node Id",
                "type": "string",
                "description": "This field describes the ID of the node used to query the node registry."
              },
              "name": "node_id",
              "in": "path"
            },
            {
              "description": "This field describes the version of the node that will be parsed from the node metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the node that will be parsed from the node metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "uaqgk5unm9flv"
          }
        },
        "put": {
          "tags": [
            "workflows"
          ],
          "summary": "Update Node",
          "description": "This API allows metadata updation for any specified node and re-registers the metadata in the node registry.\nSince data lineage is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.\nIt does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the node metadata.\n\nThe input to this API is:\n    1. a dictionary containing all the metadata about the node - name, description, and any other configurations that drives its functionality.\n    2. a dictionary containing all the metadata about the workflow that the node is a part of which is required to be updated with the corresponding node metadata configuration.",
          "operationId": "update_node_api_v1_nodes__node_id__put",
          "parameters": [
            {
              "description": "This field describes the ID of the node used to query the node registry.",
              "required": true,
              "schema": {
                "title": "Node Id",
                "type": "string",
                "description": "This field describes the ID of the node used to query the node registry."
              },
              "name": "node_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Body_update_node_api_v1_nodes__node_id__put"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "gio14q8110jla"
          }
        },
        "delete": {
          "tags": [
            "workflows"
          ],
          "summary": "Delete Node",
          "description": "This API allows metadata deletion for any specified node identifier.\nOnce invoked, this API removes this node entry from both the listing configuration and also deletes the corresponding metadata stored for this in the node registry.\nIf delete API is invoked, all versions of the metadata is deleted.\n\nThe input to this API is a node identifier which refers to the node that has to be deleted.",
          "operationId": "delete_node_api_v1_nodes__node_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the node used to query the node registry.",
              "required": true,
              "schema": {
                "title": "Node Id",
                "type": "string",
                "description": "This field describes the ID of the node used to query the node registry."
              },
              "name": "node_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodeDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "tmlmtc7otb8z6"
          }
        }
      },
      "/api/v1/nodes/deployment/{deployment_id}": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Node Deployment Config",
          "operationId": "get_node_deployment_config_api_v1_nodes_deployment__deployment_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the deployment used to query the config registry.",
              "required": true,
              "schema": {
                "title": "Deployment Id",
                "type": "string",
                "description": "This field describes the ID of the deployment used to query the config registry."
              },
              "name": "deployment_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2y55f28fhdj48"
          }
        }
      },
      "/api/v1/nodes/{node_definition_id}/deployment": {
        "put": {
          "tags": [
            "workflows"
          ],
          "summary": "Update Node Deployment Config",
          "description": "Create a new deployment config.",
          "operationId": "update_node_deployment_config_api_v1_nodes__node_definition_id__deployment_put",
          "parameters": [
            {
              "description": "This field describes the ID of the node definition.",
              "required": true,
              "schema": {
                "title": "Node Definition Id",
                "type": "string",
                "description": "This field describes the ID of the node definition."
              },
              "name": "node_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentConfig"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "6f5roe8ultqt4"
          }
        }
      },
      "/api/v1/workflow/": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "List Workflows",
          "description": "This API lists the total number of workflows that have been registered in the workflow registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered workflows in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of workflows registered and a list of all these workflows in the form of a dictionary - the key of the dictionary being the workflow identifier and the value being the name of the workflow.",
          "operationId": "list_workflows_api_v1_workflow__get",
          "parameters": [
            {
              "description": "This query parameter describes whether we need to list either internal workflows, external workflows or all workflows.",
              "required": false,
              "schema": {
                "title": "Internal",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either internal workflows, external workflows or all workflows."
              },
              "name": "internal",
              "in": "query"
            },
            {
              "description": "This query parameter describes whether we need to list either preset workflows, custom workflows or all workflows.",
              "required": false,
              "schema": {
                "title": "Preset",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either preset workflows, custom workflows or all workflows."
              },
              "name": "preset",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for workflows in the workflow registry based on tags.",
              "required": false,
              "schema": {
                "title": "Tags",
                "type": "string",
                "description": "This query parameter enables the user to search for workflows in the workflow registry based on tags."
              },
              "name": "tags",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for workflows in the workflow registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for workflows in the workflow registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for workflows in the workflow registry based on status.",
              "required": false,
              "schema": {
                "title": "Status",
                "type": "string",
                "description": "This query parameter enables the user to search for workflows in the workflow registry based on status."
              },
              "name": "status",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the workflow ids that must be returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Workflow Ids",
                "type": "string",
                "description": "This query parameter allows you to define the workflow ids that must be returned from the listing query."
              },
              "name": "workflow_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "m3z32g4817sqn"
          }
        },
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Create Workflow",
          "description": "This API is used to register any workflow along with metadata configurations pertaining to it in the workflow registry.\nThe metadata for this workflow holds information about the workflow and configurations about how to orchestrate and execute the workflow.\nThe workflow registry also helps in isolating and composing workflows as entities that can be used as backbones in building features and audiences.\n\nThe input to this API is a dictionary containing all the metadata about the workflow - name, description, and any other configurations that drives its functionality.\nThe output is a workflow identifier which is a unique reference to this workflow in the workflow registry, and a config which is the same as the input along with the generated identifier.",
          "operationId": "create_workflow_api_v1_workflow__post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWorkflow"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "f1o0v3nxircwd"
          }
        }
      },
      "/api/v1/workflow/validate": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Validate Workflow",
          "description": "This API is used to validate any workflow metadata configurations which is passed as the input payload.\nThe validations are run for the configurations in which we expect metadata to be in the workflows and the nodes that belong to it.\nThe API is useful to validate the entries in the workflow (and corresponding nodes) at any stage before registering and deploying them to run.\n\nThe input to this API is a dictionary containing all the metadata about the workflow - name, description, and any other configurations that drives its functionality.\nIf validated, the output will be a success. Else, the errors or failures in the validation process will be shown.",
          "operationId": "validate_workflow_api_v1_workflow_validate_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowValidationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "qx20ofzxp4c5v"
          }
        }
      },
      "/api/v1/workflow/internal/configs": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Config Internal",
          "operationId": "get_config_internal_api_v1_workflow_internal_configs_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Client",
                "type": "string"
              },
              "name": "client",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Use Case",
                "type": "string"
              },
              "name": "use_case",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yjdp7uiscm5v0"
          }
        }
      },
      "/api/v1/workflow/enable": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Deploy Workflow",
          "description": "This API allows the deployment of any specified workflow and make it available for execution in an operational environment on asynchronous mode.\nThe  API allows reading the latest metadata configuration pertaining to the workflow and deploy it as a graph on a target system or workflow execution engine.\nThis API communicates with lantern, which in turn, communicates with raven to create a directed acyclic graph (DAG).\nThis DAG will be deployed on an execution framework (we currently use Airflow) - which, when triggered, executes the workflow in a Spark environment.\nThis API is a precursor to the /async/run API for workflows to run in async mode.\n\nThe input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.\nThe optional use_case parameter is used in creation of the DAG.\n\nThe output of this API will be a DAG identifier which is a unique reference to every DAG created in lantern.",
          "operationId": "deploy_workflow_api_v1_workflow_enable_post",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Deploy Request",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DeployParams"
                    }
                  ],
                  "description": "This field describes the params associated with deploying this workflow.",
                  "default": {}
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDeployResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2evppx1c0sqdj"
          }
        }
      },
      "/api/v1/workflow/deploy": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Deploy Workflow",
          "description": "This API allows the deployment of any specified workflow and make it available for execution in an operational environment on asynchronous mode.\nThe  API allows reading the latest metadata configuration pertaining to the workflow and deploy it as a graph on a target system or workflow execution engine.\nThis API communicates with lantern, which in turn, communicates with raven to create a directed acyclic graph (DAG).\nThis DAG will be deployed on an execution framework (we currently use Airflow) - which, when triggered, executes the workflow in a Spark environment.\nThis API is a precursor to the /async/run API for workflows to run in async mode.\n\nThe input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.\nThe optional use_case parameter is used in creation of the DAG.\n\nThe output of this API will be a DAG identifier which is a unique reference to every DAG created in lantern.",
          "operationId": "deploy_workflow_api_v1_workflow_deploy_post",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Deploy Request",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/DeployParams"
                    }
                  ],
                  "description": "This field describes the params associated with deploying this workflow.",
                  "default": {}
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDeployResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "hool27lshvyrm"
          }
        }
      },
      "/api/v1/workflow/deploy_v2": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Deploy Workflow V2",
          "operationId": "deploy_workflow_v2_api_v1_workflow_deploy_v2_post",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": false,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "description": "This field describes the engine of the workflow used to deploy the workflow.",
              "required": false,
              "schema": {
                "title": "Engine",
                "type": "string",
                "description": "This field describes the engine of the workflow used to deploy the workflow."
              },
              "name": "engine",
              "in": "query"
            },
            {
              "description": "This field describes the cron_expression of the workflow used to deploy the workflow.",
              "required": false,
              "schema": {
                "title": "Cron Expression",
                "type": "string",
                "description": "This field describes the cron_expression of the workflow used to deploy the workflow."
              },
              "name": "cron_expression",
              "in": "query"
            },
            {
              "description": "This field describes the type of deployment of the workflow",
              "required": false,
              "schema": {
                "title": "Sync",
                "type": "boolean",
                "description": "This field describes the type of deployment of the workflow"
              },
              "name": "sync",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Body_deploy_workflow_v2_api_v1_workflow_deploy_v2_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDeployResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "30yli21l9lz3l"
          }
        }
      },
      "/api/v1/workflow/enable/status": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Deploy Workflow Status",
          "operationId": "deploy_workflow_status_api_v1_workflow_enable_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDeployResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "r0qiik9355y31"
          }
        }
      },
      "/api/v1/workflow/deploy/status": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Deploy Workflow Status",
          "operationId": "deploy_workflow_status_api_v1_workflow_deploy_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDeployResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "h9z8kstuq1vmt"
          }
        }
      },
      "/api/v1/workflow/async/run": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Async Run Workflow",
          "operationId": "async_run_workflow_api_v1_workflow_async_run_post",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "description": "This query parameter when set to True, disables the s3 based cache ",
              "required": false,
              "schema": {
                "title": "Disable Cache",
                "type": "boolean",
                "description": "This query parameter when set to True, disables the s3 based cache ",
                "default": false
              },
              "name": "disable_cache",
              "in": "query"
            },
            {
              "description": "This query parameter when set to True, adds callback to the graph payload ",
              "required": false,
              "schema": {
                "title": "Add Callback",
                "type": "boolean",
                "description": "This query parameter when set to True, adds callback to the graph payload ",
                "default": false
              },
              "name": "add_callback",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Run Payload",
                  "description": "Graph payload to be sent to nightwing",
                  "default": {}
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7m2vdqvo1lplk"
          }
        }
      },
      "/api/v1/workflow/run": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Sync Run Workflow",
          "description": "This API is the trigger to execute the DAG in synchronous mode using pandas and not spark queries.\nThis API is meant to be for running lighter workloads and the execution happens on the pandasQL framework, which is hosted on nightwing.\n\nThe input to the API is a workflow which has a list of multiple nodes with their corresponding configurations.\nThe output of the API is a dictionary of every persisted output of the workflow. It can be a dataset or a model artifact.",
          "operationId": "sync_run_workflow_api_v1_workflow_run_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowSpeedrunRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowSpeedrunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "s2zumyvmv1bid"
          }
        }
      },
      "/api/v1/workflow/runv2": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Sync Run Workflow V2",
          "operationId": "sync_run_workflow_v2_api_v1_workflow_runv2_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Payload",
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "6ze1gtyj9ugp4"
          }
        }
      },
      "/api/v1/workflow/process-packet": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Process Packet Workflow",
          "description": "This API is the trigger to execute the DAG in synchronous mode for a packet(s) of different types.\nThis API is meant to be for running lighter workloads and the execution happens on the pandasQL framework, which is hosted on nightwing.\n\nThe input to the API is a workflow which has a list of multiple nodes with their corresponding configurations.\nThe output of the API is a dictionary of every persisted output of the workflow. It can be a dataset or a model artifact.",
          "operationId": "process_packet_workflow_api_v1_workflow_process_packet_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Body_process_packet_workflow_api_v1_workflow_process_packet_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "npiaxy7frh6gq"
          }
        }
      },
      "/api/v1/workflow/status": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Workflow Status",
          "description": "This API can be used to view the status of the DAG run, if triggered for async runs.\nThe input to the API is a workflow identifier which is a unique reference to the workflow in the workflow registry.\nOther optional parameters include those that are used to describe the DAG -  the workflow's corresponding DAG run identifier created and the use case of the created workflow.\n\nThe output of the API is a status of the last run of the workflow.",
          "operationId": "workflow_status_api_v1_workflow_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "kdkjt0dny1ukk"
          }
        }
      },
      "/api/v1/workflow/internal/status": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Workflow Status",
          "description": "This API can be used to view the status of the DAG run, if triggered for async runs.\nThe input to the API is a workflow identifier which is a unique reference to the workflow in the workflow registry.\nOther optional parameters include those that are used to describe the DAG -  the workflow's corresponding DAG run identifier created and the use case of the created workflow.\n\nThe output of the API is a status of the last run of the workflow.",
          "operationId": "workflow_status_api_v1_workflow_internal_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "705ro88i5rgrn"
          }
        }
      },
      "/api/v1/workflow/schema_changes/{workflow_id}": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Schema Changes",
          "description": "Updates the specified connector using the given payload",
          "operationId": "get_schema_changes_api_v1_workflow_schema_changes__workflow_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string"
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9idmmc5gm7uuw"
          }
        }
      },
      "/api/v1/workflow/disable": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Undeploy Workflow",
          "description": "This API allows the un-deployment of any specified workflow that has previously been deployed on an execution engine.\nThe  API releases any compute that was configured during deployment of the DAG.\nThis API communicates with lantern, which in turn, communicates with raven to undeploy a directed acyclic graph (DAG).\n\nThe input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.\nThe optional use_case parameter is used as a reference for the DAG.",
          "operationId": "undeploy_workflow_api_v1_workflow_disable_post",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Use Case",
                "type": "string",
                "default": "create_workflow"
              },
              "name": "use_case",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowUndeployResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "6p28e828urd0o"
          }
        }
      },
      "/api/v1/workflow/undeploy": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Undeploy Workflow",
          "description": "This API allows the un-deployment of any specified workflow that has previously been deployed on an execution engine.\nThe  API releases any compute that was configured during deployment of the DAG.\nThis API communicates with lantern, which in turn, communicates with raven to undeploy a directed acyclic graph (DAG).\n\nThe input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.\nThe optional use_case parameter is used as a reference for the DAG.",
          "operationId": "undeploy_workflow_api_v1_workflow_undeploy_post",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Use Case",
                "type": "string",
                "default": "create_workflow"
              },
              "name": "use_case",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowUndeployResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "97ocrk7iypbox"
          }
        }
      },
      "/api/v1/workflow/{workflow_id}": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Workflow",
          "description": "This API allows the user to read metadata configuration pertaining to a workflow identifier.\nBy default, the API provides the latest metadata configuration which is present in the workflow registry.\nThe API also helps capture the end-to-end journey of this metadata by providing versioning, and hence captures data lineage in the metadata layer.\nUsing the version parameter (which by default points to the latest version of the workflow), we can obtain different versions of this metadata configuration.\n\nThe input to this API is a workflow identifier, which is mandatory. We can pass an optional version parameter as well - if not passed, it will point to the latest version of the data.\nThe get_dependencies option is an additional parameter (optional) that allows the understanding of the relationship of different nodes in the workflow. It is useful to understand in execution and deletion tasks.\nThe output of this API is all the metadata pertaining to the corresponding workflow identifier.",
          "operationId": "get_workflow_api_v1_workflow__workflow_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "description": "This field is a query parameter that is used to get dependencies between all the nodes in the workflow.",
              "required": false,
              "schema": {
                "title": "Get Dependencies",
                "type": "string",
                "description": "This field is a query parameter that is used to get dependencies between all the nodes in the workflow.",
                "default": false
              },
              "name": "get_dependencies",
              "in": "query"
            },
            {
              "description": "This field describes the version of the workflow that will be parsed from the workflow metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the workflow that will be parsed from the workflow metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "34esqgibmu4df"
          }
        },
        "put": {
          "tags": [
            "workflows"
          ],
          "summary": "Update Workflow",
          "description": "This API allows metadata updation for any specified workflow and re-registers the metadata in the workflow registry.\nSince data lineage is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.\nIt does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the workflow metadata.\n\nThe input to this API is a workflow identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.",
          "operationId": "update_workflow_api_v1_workflow__workflow_id__put",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workflow"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2n85807m3e454"
          }
        },
        "delete": {
          "tags": [
            "workflows"
          ],
          "summary": "Delete Workflow",
          "description": "This API allows the deletion of any specified workflow.\nIt has two functionalities - one being the deletion of just the DAG and updation of the DAG config, and the other being deletion of the workflow metadata from the registry config.\n\nThe input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.\nThe optional confirm_delete parameter is a boolean value that is used by the tool. If set to True, it goes ahead and deletes the workflow DAG and metadata configurations. If False, it generates a prompt that the user can confirm again.",
          "operationId": "delete_workflow_api_v1_workflow__workflow_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "j1gslo3g2jxlv"
          }
        },
        "patch": {
          "tags": [
            "workflows"
          ],
          "summary": "Patch Workflow",
          "operationId": "patch_workflow_api_v1_workflow__workflow_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkflowPatch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ntx34u1ynp8qr"
          }
        }
      },
      "/api/v1/workflow/configs/{workflow_id}": {
        "delete": {
          "tags": [
            "workflows"
          ],
          "summary": "Delete Workflow",
          "description": "This API allows the deletion of any specified workflow.\nIt has two functionalities - one being the deletion of just the DAG and updation of the DAG config, and the other being deletion of the workflow metadata from the registry config.\n\nThe input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.\nThe optional confirm_delete parameter is a boolean value that is used by the tool. If set to True, it goes ahead and deletes the workflow DAG and metadata configurations. If False, it generates a prompt that the user can confirm again.",
          "operationId": "delete_workflow_api_v1_workflow_configs__workflow_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "n0571upqrmazk"
          }
        }
      },
      "/api/v1/workflow{workflow_id}/runs/{run_id}/status": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Workflow Run Status",
          "description": "This API allows the user to get the status of a particular run of a workflow.\nThe input to the API is a workflow identifier and a run identifier, which are mandatory.\nThe output of the API is the status of the workflow run, with the corresponding DAG run identifier, use case and the status of the DAG run.",
          "operationId": "get_workflow_run_status_api_v1_workflow_workflow_id__runs__run_id__status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "description": "This field describes the ID of the workflow run used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string",
                "description": "This field describes the ID of the workflow run used to query the workflow registry."
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2lqc03no52sgh"
          }
        }
      },
      "/api/v1/workflow/{workflow_id}/runs": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "List Workflow Runs",
          "description": "This API allows the user to list all the runs of a workflow.\nThe input to the API is a workflow identifier, which is mandatory.\nThe output of the API is a list of all the runs of the workflow, with the corresponding DAG run identifier, use case and the status of the DAG run.",
          "operationId": "list_workflow_runs_api_v1_workflow__workflow_id__runs_get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "description": "This query parameter enables the user to search for workflows in the workflow registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for workflows in the workflow registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fjh0avfqwj0bq"
          }
        }
      },
      "/api/v1/workflow/{workflow_id}/runs/{run_id}": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Workflow Run",
          "description": "This API allows the user to get the details of a particular run of a workflow.\nThe input to the API is a workflow identifier and a run identifier, which are mandatory.\nThe output of the API is the details of the workflow run, with the corresponding DAG run identifier, use case and the status of the DAG run.",
          "operationId": "get_workflow_run_api_v1_workflow__workflow_id__runs__run_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the workflow used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This field describes the ID of the workflow used to query the workflow registry."
              },
              "name": "workflow_id",
              "in": "path"
            },
            {
              "description": "This field describes the ID of the workflow run used to query the workflow registry.",
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string",
                "description": "This field describes the ID of the workflow run used to query the workflow registry."
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "dt8g4pw27nv6w"
          }
        }
      },
      "/api/v1/workflow/create_preset_workflows": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Create Preset Workflows",
          "description": "This API is triggered for creating Preset Workflows for a client/account upon creation.",
          "operationId": "create_preset_workflows_api_v1_workflow_create_preset_workflows_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "2yvxpc81d7yc4"
          }
        }
      },
      "/api/v1/workflow/callback": {
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Workflow Callback",
          "operationId": "workflow_callback_api_v1_workflow_callback_post",
          "parameters": [
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Stephanie",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": false
              },
              "name": "use_stephanie",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
              "required": false,
              "schema": {
                "title": "Use Dataset Api",
                "type": "boolean",
                "description": "This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.",
                "default": true
              },
              "name": "use_dataset_api",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to provide the job config id used to represent the workflow run.",
              "required": false,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This query parameter allows you to provide the job config id used to represent the workflow run.",
                "default": ""
              },
              "name": "job_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Callback Payload",
                  "description": "Document Callback payload from nightwing",
                  "default": {}
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "4buuggjjrudd2"
          }
        }
      },
      "/api/v1/jobs/": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "List Jobs",
          "operationId": "list_jobs_api_v1_jobs__get",
          "parameters": [
            {
              "description": "This query parameter enables the user to search for jobs in the job registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for jobs in the job registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to filter the jobs based on the workflow_id.",
              "required": false,
              "schema": {
                "title": "Workflow Id",
                "type": "string",
                "description": "This query parameter allows you to filter the jobs based on the workflow_id."
              },
              "name": "workflow_id",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to filter the jobs based on the status.",
              "required": false,
              "schema": {
                "title": "Status",
                "type": "string",
                "description": "This query parameter allows you to filter the jobs based on the status."
              },
              "name": "status",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the job ids that must be returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Job Ids",
                "type": "string",
                "description": "This query parameter allows you to define the job ids that must be returned from the listing query."
              },
              "name": "job_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "1qfclbjypexts"
          }
        },
        "post": {
          "tags": [
            "workflows"
          ],
          "summary": "Create Job",
          "operationId": "create_job_api_v1_jobs__post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobCreate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "8q0yy9yenw0ng"
          }
        }
      },
      "/api/v1/jobs/{job_id}": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Job",
          "operationId": "get_job_api_v1_jobs__job_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the job used to query the job registry.",
              "required": true,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This field describes the ID of the job used to query the job registry."
              },
              "name": "job_id",
              "in": "path"
            },
            {
              "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "xn1dmdx8630wl"
          }
        },
        "delete": {
          "tags": [
            "workflows"
          ],
          "summary": "Delete Job",
          "operationId": "delete_job_api_v1_jobs__job_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the job used to query the job registry.",
              "required": true,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This field describes the ID of the job used to query the job registry."
              },
              "name": "job_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2kz34w11gzqxb"
          }
        },
        "patch": {
          "tags": [
            "workflows"
          ],
          "summary": "Patch Job",
          "operationId": "patch_job_api_v1_jobs__job_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the job used to query the job registry.",
              "required": true,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This field describes the ID of the job used to query the job registry."
              },
              "name": "job_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobPatch"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "z13aiq1e6l4vy"
          }
        }
      },
      "/api/v1/jobs/{job_id}/packet_status": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Job Packet Status",
          "operationId": "get_job_packet_status_api_v1_jobs__job_id__packet_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the job used to query the job registry.",
              "required": true,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This field describes the ID of the job used to query the job registry."
              },
              "name": "job_id",
              "in": "path"
            },
            {
              "description": "This field describes the event_type of the job used to query the job registry.",
              "required": false,
              "schema": {
                "title": "Event Type",
                "type": "string",
                "description": "This field describes the event_type of the job used to query the job registry.",
                "default": ""
              },
              "name": "event_type",
              "in": "query"
            },
            {
              "description": "This field describes the sources of the job used to query the job registry.",
              "required": false,
              "schema": {
                "title": "Sources",
                "type": "string",
                "description": "This field describes the sources of the job used to query the job registry.",
                "default": ""
              },
              "name": "sources",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "xosen3ql41mno"
          }
        }
      },
      "/api/v1/jobs/{job_id}/status": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Job Status",
          "operationId": "get_job_status_api_v1_jobs__job_id__status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the job used to query the job registry.",
              "required": true,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This field describes the ID of the job used to query the job registry."
              },
              "name": "job_id",
              "in": "path"
            },
            {
              "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "liwvbuiyic00g"
          }
        }
      },
      "/api/v1/jobs/{job_id}/payload": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Job Payload",
          "operationId": "get_job_payload_api_v1_jobs__job_id__payload_get",
          "parameters": [
            {
              "description": "This field describes the ID of the job used to query the job registry.",
              "required": true,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This field describes the ID of the job used to query the job registry."
              },
              "name": "job_id",
              "in": "path"
            },
            {
              "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/JobPayloadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "nepz4qyn8ska6"
          }
        }
      },
      "/api/v1/jobs/{job_id}/node/{node_name}/payload": {
        "get": {
          "tags": [
            "workflows"
          ],
          "summary": "Get Node Output",
          "operationId": "get_node_output_api_v1_jobs__job_id__node__node_name__payload_get",
          "parameters": [
            {
              "description": "This field describes the ID of the job used to query the job registry.",
              "required": true,
              "schema": {
                "title": "Job Id",
                "type": "string",
                "description": "This field describes the ID of the job used to query the job registry."
              },
              "name": "job_id",
              "in": "path"
            },
            {
              "description": "This field describes the ID of the node.",
              "required": true,
              "schema": {
                "title": "Node Name",
                "type": "string",
                "description": "This field describes the ID of the node."
              },
              "name": "node_name",
              "in": "path"
            },
            {
              "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NodePayloadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "1512zjbp5jokd"
          }
        }
      },
      "/api/v1/actions/": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "List Actions",
          "operationId": "list_actions_api_v1_actions__get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Page",
                "type": "integer"
              },
              "name": "page",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer"
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": true,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9nsp6ah5f4hui"
          }
        },
        "post": {
          "tags": [
            "agents"
          ],
          "summary": "Create Action",
          "operationId": "create_action_api_v1_actions__post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": true,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionCreateRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "4xug6wol4kuax"
          }
        }
      },
      "/api/v1/actions/{id}": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "Get Action By Id",
          "operationId": "get_action_by_id_api_v1_actions__id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Id",
                "type": "string"
              },
              "name": "id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "44x8fdm6a7qvk"
          }
        }
      },
      "/api/v1/actions/{action_id}": {
        "put": {
          "tags": [
            "agents"
          ],
          "summary": "Update Action",
          "operationId": "update_action_api_v1_actions__action_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Action Id",
                "type": "string"
              },
              "name": "action_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Data",
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ggnb1bpxrk93f"
          }
        },
        "delete": {
          "tags": [
            "agents"
          ],
          "summary": "Delete Action",
          "description": "Delete a action by ID.",
          "operationId": "delete_action_api_v1_actions__action_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Action Id",
                "type": "string"
              },
              "name": "action_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "90vs4rhbytrrm"
          }
        }
      },
      "/api/v1/chat/": {
        "post": {
          "tags": [
            "agents"
          ],
          "summary": "Create Chat",
          "operationId": "create_chat_api_v1_chat__post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": true,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatBase"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChatCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "4bvpes8j0saj4"
          }
        }
      },
      "/api/v1/chat/user/{user_id}": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "List Chats",
          "operationId": "list_chats_api_v1_chat_user__user_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "User Id",
                "type": "string"
              },
              "name": "user_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Page",
                "type": "integer"
              },
              "name": "page",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer"
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChatListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "nbgsewlocchny"
          }
        }
      },
      "/api/v1/chat/{chat_id}": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "Get Chat By Id",
          "operationId": "get_chat_by_id_api_v1_chat__chat_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Chat Id",
                "type": "string"
              },
              "name": "chat_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChatMessagesResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2vvov8rlc1eph"
          }
        },
        "delete": {
          "tags": [
            "agents"
          ],
          "summary": "Delete Chat",
          "operationId": "delete_chat_api_v1_chat__chat_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Chat Id",
                "type": "string"
              },
              "name": "chat_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": true,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ChatDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "rlpefh19aze5c"
          }
        }
      },
      "/api/v1/chat/{chat_id}/messages": {
        "post": {
          "tags": [
            "agents"
          ],
          "summary": "Add Chat Message",
          "operationId": "add_chat_message_api_v1_chat__chat_id__messages_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Chat Id",
                "type": "string"
              },
              "name": "chat_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatMessage"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AddMessagesResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "e3086cjqpiuhz"
          }
        }
      },
      "/api/v1/chat/{message_id}/completions": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "Get Message Response",
          "operationId": "get_message_response_api_v1_chat__message_id__completions_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Message Id",
                "type": "string"
              },
              "name": "message_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/app__schemas__chat__CompletionsMessagesResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7cfyuk8orq2c6"
          }
        }
      },
      "/api/v1/agents/": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "List Agents",
          "description": "List all agents with optional pagination.",
          "operationId": "list_agents_api_v1_agents__get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Page",
                "type": "integer"
              },
              "name": "page",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer"
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "jrbp17nfb86pd"
          }
        },
        "post": {
          "tags": [
            "agents"
          ],
          "summary": "Create Agent",
          "description": "Create a new agent.",
          "operationId": "create_agent_api_v1_agents__post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentBase"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "9ahv439gvrewd"
          }
        }
      },
      "/api/v1/agents/{agent_id}": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "Get Agent By Id",
          "description": "Get a specific agent by ID.",
          "operationId": "get_agent_by_id_api_v1_agents__agent_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Agent Id",
                "type": "string"
              },
              "name": "agent_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "6ys3k8z0u48e8"
          }
        },
        "put": {
          "tags": [
            "agents"
          ],
          "summary": "Update Agent",
          "description": "Update an existing agent.",
          "operationId": "update_agent_api_v1_agents__agent_id__put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Agent Id",
                "type": "string"
              },
              "name": "agent_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentUpdate"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3c54fhdzn1lz7"
          }
        },
        "delete": {
          "tags": [
            "agents"
          ],
          "summary": "Delete Agent",
          "description": "Delete an agent by ID.",
          "operationId": "delete_agent_api_v1_agents__agent_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Agent Id",
                "type": "string"
              },
              "name": "agent_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "c1cmictf4bz7j"
          }
        }
      },
      "/api/v1/agents/{agent_id}/run": {
        "post": {
          "tags": [
            "agents"
          ],
          "summary": "Run Agent",
          "description": "Run an existing agent.",
          "operationId": "run_agent_api_v1_agents__agent_id__run_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Agent Id",
                "type": "string"
              },
              "name": "agent_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Payload",
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "q6duhq5i5pfvu"
          }
        }
      },
      "/api/v1/agents/{agent_id}/{message_id}/completions": {
        "get": {
          "tags": [
            "agents"
          ],
          "summary": "Get Message Response",
          "operationId": "get_message_response_api_v1_agents__agent_id___message_id__completions_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Agent Id",
                "type": "string"
              },
              "name": "agent_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Message Id",
                "type": "string"
              },
              "name": "message_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/app__schemas__agents__CompletionsMessagesResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "6nphr8o59yrip"
          }
        }
      },
      "/api/v1/agents/create_account_datasets": {
        "post": {
          "tags": [
            "agents"
          ],
          "summary": "Create Account Datasets",
          "description": "This API is triggered for creating Account Level Datasets for a client/account upon creation.",
          "operationId": "create_account_datasets_api_v1_agents_create_account_datasets_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "36xof8e6vmpi7"
          }
        }
      },
      "/api/v1/chat/notify/": {
        "post": {
          "tags": [
            "agents"
          ],
          "summary": "Publish Notification",
          "operationId": "publish_notification_api_v1_chat_notify__post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": true,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationBase"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotificationCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "hc1qsq39q6r5c"
          }
        }
      },
      "/api/v1/ping": {
        "get": {
          "summary": "Ping",
          "operationId": "ping_api_v1_ping_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "tags": [
            "agents"
          ],
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "hdi83kwr6x8w7"
          }
        }
      },
      "/api/v2/connectors/connections": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Connectors",
          "description": "List all the connectors",
          "operationId": "list_connectors_api_v2_connectors_connections_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string"
              },
              "name": "search",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer"
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer"
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Status",
                "type": "string"
              },
              "name": "status",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Scheduletype",
                "type": "string"
              },
              "name": "scheduleType",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Source Id",
                "type": "string"
              },
              "name": "source_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Destination Id",
                "type": "string"
              },
              "name": "destination_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Source Type",
                "type": "string"
              },
              "name": "source_type",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Destination Type",
                "type": "string"
              },
              "name": "destination_type",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Last Attempt Status",
                "type": "string"
              },
              "name": "last_attempt_status",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Is Internal",
                "type": "boolean",
                "default": false
              },
              "name": "is_internal",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListConnectorsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "sgo53dlczhnvu"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Connector",
          "description": "Creates a connector between given source and destination",
          "operationId": "create_connector_api_v2_connectors_connections_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateConnector"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateConnectorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "67yahrzo5tmaz"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Connector",
          "description": "Returns connector for a given connection_id",
          "operationId": "get_connector_api_v2_connectors_connections__connection_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Internal Config",
                "type": "boolean",
                "default": false
              },
              "name": "internal_config",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Connector"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fq0bg9ob1wtkn"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Connector",
          "description": "Delete the given connector",
          "operationId": "delete_connector_api_v2_connectors_connections__connection_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "p8ffi9sq88gfb"
          }
        },
        "patch": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Update Connector",
          "description": "Update the given connector",
          "operationId": "update_connector_api_v2_connectors_connections__connection_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateConnector"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Connector"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "bdjdmniddbei3"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/run": {
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Run Connector",
          "description": "Runs a connector between given source and destination",
          "operationId": "run_connector_api_v2_connectors_connections__connection_id__run_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunConnectorResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "8llfmsiifudl0"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/runs/{run_id}/status": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Connector Run Status",
          "operationId": "get_connector_run_status_api_v2_connectors_connections__connection_id__runs__run_id__status_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetConnectorRunStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "7pvcrbi7tog8a"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/runs/{run_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Connector Run",
          "description": "Gets run of the given connector",
          "operationId": "get_connector_run_api_v2_connectors_connections__connection_id__runs__run_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConnectorRunDetail"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "625t37r85q9fl"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/feeds/{run_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Connector Run",
          "description": "Gets run of the given connector",
          "operationId": "get_connector_run_api_v2_connectors_connections__connection_id__feeds__run_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ConnectorRunDetail"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "a7x5qud66vg4s"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/runs/{run_id}/cancel": {
        "put": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Cancel Run",
          "description": "Cancel specified run of the given connector",
          "operationId": "cancel_run_api_v2_connectors_connections__connection_id__runs__run_id__cancel_put",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "izxxpwvs7ltlp"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/runs": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Connector Runs",
          "description": "Lists runs of the given connector",
          "operationId": "list_connector_runs_api_v2_connectors_connections__connection_id__runs_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Offset",
                "type": "integer"
              },
              "name": "offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer"
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListConnectorRunsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9aohpnz80dlmm"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/feeds": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Connector Runs",
          "description": "Lists runs of the given connector",
          "operationId": "list_connector_runs_api_v2_connectors_connections__connection_id__feeds_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Offset",
                "type": "integer"
              },
              "name": "offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer"
              },
              "name": "limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListConnectorRunsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "r9sc3dx0yfwxg"
          }
        }
      },
      "/api/v2/connectors/connections/{connection_id}/latest-run": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Latest Run",
          "description": "Gets latest run of the given connector",
          "operationId": "get_latest_run_api_v2_connectors_connections__connection_id__latest_run_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "6yniq13p0wa4d"
          }
        }
      },
      "/api/v2/connectors/sources/definitions": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Source Definitons",
          "description": "Lists all the supported sources",
          "operationId": "list_source_definitons_api_v2_connectors_sources_definitions_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ys1yk79mzgy04"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Source Definition",
          "description": "Create new source definition",
          "operationId": "create_source_definition_api_v2_connectors_sources_definitions_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSourceDefinition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "tvpq1my1j2jpb"
          }
        }
      },
      "/api/v2/connectors/sources/definitions/{source_definition_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Source Definition",
          "description": "Returns source defintion for a given source",
          "operationId": "get_source_definition_api_v2_connectors_sources_definitions__source_definition_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Definition Id",
                "type": "string"
              },
              "name": "source_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "sk17zhhf9yxfo"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Source Definition",
          "description": "Deletes given source definition",
          "operationId": "delete_source_definition_api_v2_connectors_sources_definitions__source_definition_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Definition Id",
                "type": "string"
              },
              "name": "source_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "f8noi0dht12pm"
          }
        },
        "patch": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Update Source Definition",
          "description": "updates given source definition",
          "operationId": "update_source_definition_api_v2_connectors_sources_definitions__source_definition_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Definition Id",
                "type": "string"
              },
              "name": "source_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSourceDefinition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2gyxbvnfkp5vy"
          }
        }
      },
      "/api/v2/connectors/sources": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Sources",
          "description": "Lists all the created sources",
          "operationId": "list_sources_api_v2_connectors_sources_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Is Internal",
                "type": "boolean",
                "default": false
              },
              "name": "is_internal",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Test Connection Status",
                "type": "string"
              },
              "name": "test_connection_status",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string"
              },
              "name": "search",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer"
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer"
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListSourcesResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "kf1geovjkpu7k"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Source",
          "description": "creates given source",
          "operationId": "create_source_api_v2_connectors_sources_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "4dzuaz5zbcj4b"
          }
        }
      },
      "/api/v2/connectors/sources/{source_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Source",
          "description": "Get given source_id",
          "operationId": "get_source_api_v2_connectors_sources__source_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Id",
                "type": "string"
              },
              "name": "source_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yrwwlv9n297tn"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Source",
          "description": "Deletes given source",
          "operationId": "delete_source_api_v2_connectors_sources__source_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Id",
                "type": "string"
              },
              "name": "source_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "bwb32p7zws9hk"
          }
        },
        "patch": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Update Source",
          "description": "updates given source",
          "operationId": "update_source_api_v2_connectors_sources__source_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Id",
                "type": "string"
              },
              "name": "source_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSource"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "tsmm9a8cxzkd2"
          }
        }
      },
      "/api/v2/connectors/sources/{source_id}/test-connection": {
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Test Source Connection",
          "description": "Tests connection foe the given source_id",
          "operationId": "test_source_connection_api_v2_connectors_sources__source_id__test_connection_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Id",
                "type": "string"
              },
              "name": "source_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "qdvx9gdgn21yl"
          }
        }
      },
      "/api/v2/connectors/sources/{source_id}/infer-schema": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Infer Source Schema",
          "description": "Tests connection foe the given source_id",
          "operationId": "infer_source_schema_api_v2_connectors_sources__source_id__infer_schema_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Source Id",
                "type": "string"
              },
              "name": "source_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Connection Id",
                "type": "string"
              },
              "name": "connection_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Disable Cache",
                "type": "boolean",
                "default": false
              },
              "name": "disable_cache",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3ipgbaclsh7ol"
          }
        }
      },
      "/api/v2/connectors/destinations/definitions": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Destination Definitons",
          "description": "Lists all the supported destinations",
          "operationId": "list_destination_definitons_api_v2_connectors_destinations_definitions_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "wxd04d2h9ic0d"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Destination Definition",
          "description": "Create new destination definition",
          "operationId": "create_destination_definition_api_v2_connectors_destinations_definitions_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDestinationDefinition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "vi7eyuked0t96"
          }
        }
      },
      "/api/v2/connectors/destinations/definitions/{destination_definition_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Destination Definition",
          "description": "Returns destination defintion for a given destination",
          "operationId": "get_destination_definition_api_v2_connectors_destinations_definitions__destination_definition_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Destination Definition Id",
                "type": "string"
              },
              "name": "destination_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "6v9vywnf1bdqn"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Destination Definition",
          "description": "Delete the given destination definition",
          "operationId": "delete_destination_definition_api_v2_connectors_destinations_definitions__destination_definition_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Destination Definition Id",
                "type": "string"
              },
              "name": "destination_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "obwhzbnqu9w9g"
          }
        },
        "patch": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Update Destination Definition",
          "description": "Update the given destination definition",
          "operationId": "update_destination_definition_api_v2_connectors_destinations_definitions__destination_definition_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Destination Definition Id",
                "type": "string"
              },
              "name": "destination_definition_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDestinationDefinition"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ijnpqhm06ethi"
          }
        }
      },
      "/api/v2/connectors/destinations": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Destinations",
          "description": "Lists all the created destinations",
          "operationId": "list_destinations_api_v2_connectors_destinations_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Is Internal",
                "type": "boolean",
                "default": false
              },
              "name": "is_internal",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Test Connection Status",
                "type": "string"
              },
              "name": "test_connection_status",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string"
              },
              "name": "search",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string"
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string"
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer"
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer"
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListDestinationsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "r6jweid08e4rz"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Destination",
          "description": "Get given destination_id",
          "operationId": "create_destination_api_v2_connectors_destinations_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDestination"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "6oa67kx2jjb7h"
          }
        }
      },
      "/api/v2/connectors/destinations/{destination_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Destination",
          "description": "Get given destination_id",
          "operationId": "get_destination_api_v2_connectors_destinations__destination_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Destination Id",
                "type": "string"
              },
              "name": "destination_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Destination"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yxl196expbbpa"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Destination",
          "description": "Delete the given destination",
          "operationId": "delete_destination_api_v2_connectors_destinations__destination_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Destination Id",
                "type": "string"
              },
              "name": "destination_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "f5i4fpe4xuo3y"
          }
        },
        "patch": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Update Destination",
          "description": "Update the given destination",
          "operationId": "update_destination_api_v2_connectors_destinations__destination_id__patch",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Destination Id",
                "type": "string"
              },
              "name": "destination_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDestination"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "1zgr1i5mrzn9k"
          }
        }
      },
      "/api/v2/connectors/destinations/{destination_id}/test-connection": {
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Test Destination Connection",
          "description": "Tests connection foe the given destination_id",
          "operationId": "test_destination_connection_api_v2_connectors_destinations__destination_id__test_connection_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Destination Id",
                "type": "string"
              },
              "name": "destination_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9oioig0aia7a0"
          }
        }
      },
      "/api/v2/connectors/datasets/data/register/": {
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Data Register",
          "operationId": "data_register_api_v2_connectors_datasets_data_register__post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterTable"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "dmrt3tnlqtzty"
          }
        }
      },
      "/api/v2/connectors/feeds": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Feeds",
          "description": "List feeds",
          "operationId": "list_feeds_api_v2_connectors_feeds_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Dataset Id",
                "type": "string"
              },
              "name": "dataset_id",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ne90vu854s1mu"
          }
        }
      },
      "/api/v2/connectors/feeds/{feed_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Feed",
          "description": "Get feed",
          "operationId": "get_feed_api_v2_connectors_feeds__feed_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Feed Id",
                "type": "string"
              },
              "name": "feed_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9ih2bnyyj3nwl"
          }
        }
      },
      "/api/v2/connectors/workspaces": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Workspaces",
          "description": "List workspaces",
          "operationId": "list_workspaces_api_v2_connectors_workspaces_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "x3neyqlj9j1rl"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Workspace",
          "description": "Create workspace",
          "operationId": "create_workspace_api_v2_connectors_workspaces_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "dkhkhkff5aid6"
          }
        }
      },
      "/api/v2/connectors/workspaces/{workspace_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Workspace By Id",
          "description": "Get workspace by id",
          "operationId": "get_workspace_by_id_api_v2_connectors_workspaces__workspace_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Workspace Id",
                "type": "string"
              },
              "name": "workspace_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "w0am10ecm0pmn"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Workspace",
          "description": "Delete workspace by id",
          "operationId": "delete_workspace_api_v2_connectors_workspaces__workspace_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Workspace Id",
                "type": "string"
              },
              "name": "workspace_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "nfsmaq9io591k"
          }
        }
      },
      "/api/v2/connectors/workspaces/name/{workspace_name}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Workspace By Name",
          "description": "Get workspace by name",
          "operationId": "get_workspace_by_name_api_v2_connectors_workspaces_name__workspace_name__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Workspace Name",
                "type": "string"
              },
              "name": "workspace_name",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "dbp4wuu29tova"
          }
        }
      },
      "/api/v2/connectors/workspaces/{workspace_id}/preset-connectors": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Preset Connnectors",
          "description": "Returns preset connectors created on the given workspace creation",
          "operationId": "get_preset_connnectors_api_v2_connectors_workspaces__workspace_id__preset_connectors_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Workspace Id",
                "type": "string"
              },
              "name": "workspace_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3qas97btfkh1q"
          }
        }
      },
      "/api/v2/connectors/ingress": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Ingresses",
          "description": "List all ingresses",
          "operationId": "list_ingresses_api_v2_connectors_ingress_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListIngressResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "s8prvorq6whqd"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Ingress",
          "description": "Create a new ingress",
          "operationId": "create_ingress_api_v2_connectors_ingress_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIngress"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateIngressResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "463e1rtg0kazi"
          }
        }
      },
      "/api/v2/connectors/ingress/{ingress_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Ingress",
          "description": "Get a specific ingress",
          "operationId": "get_ingress_api_v2_connectors_ingress__ingress_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Ingress Id",
                "type": "string"
              },
              "name": "ingress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Ingress"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "pnvbb6p00ki0f"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Ingress",
          "description": "Delete an existing ingress",
          "operationId": "delete_ingress_api_v2_connectors_ingress__ingress_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Ingress Id",
                "type": "string"
              },
              "name": "ingress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "1fsg6hyc1t26h"
          }
        }
      },
      "/api/v2/connectors/ingress/{ingress_id}/run": {
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Run Ingress",
          "description": "Run an existing ingress",
          "operationId": "run_ingress_api_v2_connectors_ingress__ingress_id__run_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Ingress Id",
                "type": "string"
              },
              "name": "ingress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunIngressResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "dkeetrtmgtv9q"
          }
        }
      },
      "/api/v2/connectors/ingress/{ingress_id}/run/{run_id}/status": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Ingress Run Status",
          "description": "Get the status of a running ingress",
          "operationId": "get_ingress_run_status_api_v2_connectors_ingress__ingress_id__run__run_id__status_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Ingress Id",
                "type": "string"
              },
              "name": "ingress_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetIngressRunStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "u8p8ilmf1vnzl"
          }
        }
      },
      "/api/v2/connectors/ingress/{ingress_id}/runs": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Ingress Runs",
          "description": "List all runs of an ingress",
          "operationId": "list_ingress_runs_api_v2_connectors_ingress__ingress_id__runs_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Ingress Id",
                "type": "string"
              },
              "name": "ingress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListIngressRunResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "qv4xlzuifhrgo"
          }
        }
      },
      "/api/v2/connectors/ingress/{ingress_id}/runs/{run_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Ingress Run",
          "description": "Get a specific run of an ingress",
          "operationId": "get_ingress_run_api_v2_connectors_ingress__ingress_id__runs__run_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Ingress Id",
                "type": "string"
              },
              "name": "ingress_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IngressRun"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "fbj3xsc46g8jq"
          }
        }
      },
      "/api/v2/connectors/egress": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Eggresses",
          "description": "List all egresses",
          "operationId": "list_eggresses_api_v2_connectors_egress_get",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListEgressResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "uvcmmgj52bz9r"
          }
        },
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Create Egress",
          "description": "Create a egress",
          "operationId": "create_egress_api_v2_connectors_egress_post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEgress"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateEgressResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "b42ujksun6vzp"
          }
        }
      },
      "/api/v2/connectors/egress/{egress_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Egress",
          "description": "Get a egress by id",
          "operationId": "get_egress_api_v2_connectors_egress__egress_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Egress Id",
                "type": "string"
              },
              "name": "egress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Egress"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "zzqb3lunt4e6s"
          }
        },
        "delete": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Delete Egress",
          "operationId": "delete_egress_api_v2_connectors_egress__egress_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Egress Id",
                "type": "string"
              },
              "name": "egress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "f344t0083i2ae"
          }
        }
      },
      "/api/v2/connectors/egress/{egress_id}/run": {
        "post": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Run Egress",
          "description": "Run a egress",
          "operationId": "run_egress_api_v2_connectors_egress__egress_id__run_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Egress Id",
                "type": "string"
              },
              "name": "egress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RunEgressResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "k5lfeuqb14t2r"
          }
        }
      },
      "/api/v2/connectors/egress/{egress_id}/run/{run_id}/status": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Egress Run Status",
          "description": "Get a egress run status",
          "operationId": "get_egress_run_status_api_v2_connectors_egress__egress_id__run__run_id__status_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Egress Id",
                "type": "string"
              },
              "name": "egress_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetEgressRunStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "jqy4g13nm7wr4"
          }
        }
      },
      "/api/v2/connectors/egress/{egress_id}/runs": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "List Egress Runs",
          "description": "List all egress runs",
          "operationId": "list_egress_runs_api_v2_connectors_egress__egress_id__runs_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Egress Id",
                "type": "string"
              },
              "name": "egress_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListEgressRunsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ikg7h5v212gu9"
          }
        }
      },
      "/api/v2/connectors/egress/{egress_id}/runs/{run_id}": {
        "get": {
          "tags": [
            "platform-connector"
          ],
          "summary": "Get Egress Run",
          "description": "Get a egress run by id",
          "operationId": "get_egress_run_api_v2_connectors_egress__egress_id__runs__run_id__get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Egress Id",
                "type": "string"
              },
              "name": "egress_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Run Id",
                "type": "string"
              },
              "name": "run_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Workspace-Id",
                "type": "string"
              },
              "name": "x-workspace-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EgressRun"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "vxz4fdgymk3a6"
          }
        }
      },
      "/api/v2/connectors/health": {
        "get": {
          "summary": "Startup Check",
          "description": "This is a startup check endpoint. It can be used to check if the application is up and running.\n\nReturns:\n- StartupSuccessResponse: If the application is up and running\n- StartupErrorResponse: If the application is not ready to serve requests",
          "operationId": "startup_check_api_v2_connectors_health_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "tags": [
            "platform-connector"
          ],
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "x5td7yshkoll0"
          }
        }
      },
      "/api/v2/datasets/{dataset_id}/upsert": {
        "post": {
          "tags": [
            "platform-data"
          ],
          "summary": "Upsert Record",
          "description": "Create data for a dataset based on the dataset_id.",
          "operationId": "upsert_record_api_v2_datasets__dataset_id__upsert_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string"
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPayload"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "i6wgrs9mo6fwb"
          }
        }
      },
      "/api/v2/datasets/{dataset_id}/query": {
        "post": {
          "tags": [
            "platform-data"
          ],
          "summary": "Query Records",
          "description": "Get the data of a dataset based on the dataset_id.",
          "operationId": "query_records_api_v2_datasets__dataset_id__query_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string"
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDatasetPayload"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yrm7p3tvpdgjh"
          }
        }
      },
      "/api/v2/datasets/{dataset_id}/data/{data_id}": {
        "delete": {
          "tags": [
            "platform-data"
          ],
          "summary": "Delete Record",
          "description": "Delete data for a dataset based on the dataset_id and data_id.",
          "operationId": "delete_record_api_v2_datasets__dataset_id__data__data_id__delete",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string"
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Data Id",
                "type": "string"
              },
              "name": "data_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "n3zmt3ond9t0s"
          }
        }
      },
      "/api/v2/datasets/health": {
        "get": {
          "summary": "Startup Check",
          "description": "This is a startup check endpoint. It can be used to check if the application is up and running.\n\nReturns:\n- StartupSuccessResponse: If the application is up and running\n- StartupErrorResponse: If the application is not ready to serve requests",
          "operationId": "startup_check_api_v2_datasets_health_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "tags": [
            "platform-data"
          ],
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "o425srijbgbjo"
          }
        }
      },
      "/api/v1/datasets/health": {
        "get": {
          "summary": "Startup Check",
          "description": "This is a startup check endpoint. It can be used to check if the application is up and running.\n\nReturns:\n- StartupSuccessResponse: If the application is up and running\n- StartupErrorResponse: If the application is not ready to serve requests",
          "operationId": "startup_check_api_v1_datasets_health_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "tags": [
            "platform-datasets"
          ],
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "ra87jhi9npq96"
          }
        }
      },
      "/api/v1/datasets/": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "List Datasets",
          "description": "This API lists the total number of datasets that have been registered in the dataset registry, with its corresponding name and identifiers.\nThe goal of this API is to provide the registered datasets in a convenient format that allows the user to browse and discover all entries in the registry.\n\nThere is no input required to invoke this API.\nThe output of this API is a count of the total number of datasets registered and a list of all these datasets in the form of a dictionary - the key of the dictionary being the dataset identifier and the value being the name of the dataset.",
          "operationId": "list_datasets_api_v1_datasets__get",
          "parameters": [
            {
              "description": "This query parameter describes whether we need to list either internal datasets, external datasets or all datasets.",
              "required": false,
              "schema": {
                "title": "Internal",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either internal datasets, external datasets or all datasets."
              },
              "name": "internal",
              "in": "query"
            },
            {
              "description": "This query parameter describes whether we need to list either preset datasets, custom datasets or all datasets.",
              "required": false,
              "schema": {
                "title": "Preset",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either preset datasets, custom datasets or all datasets."
              },
              "name": "preset",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on tags.",
              "required": false,
              "schema": {
                "title": "Tags",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on tags."
              },
              "name": "tags",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on the dataset name.",
              "required": false,
              "schema": {
                "title": "Dataset Name",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on the dataset name."
              },
              "name": "dataset_name",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on the dataset group.",
              "required": false,
              "schema": {
                "title": "Dataset Group",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on the dataset group."
              },
              "name": "dataset_group",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on the property of it being virtual or not.",
              "required": false,
              "schema": {
                "title": "Virtual",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on the property of it being virtual or not."
              },
              "name": "virtual",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status.",
              "required": false,
              "schema": {
                "title": "Profiling Status",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status."
              },
              "name": "profiling_status",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status.",
              "required": false,
              "schema": {
                "title": "Sampling Status",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status."
              },
              "name": "sampling_status",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on sync status.",
              "required": false,
              "schema": {
                "title": "Sync Status",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on sync status."
              },
              "name": "sync_status",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on access modes.",
              "required": false,
              "schema": {
                "title": "List Of Access Modes",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on access modes."
              },
              "name": "list_of_access_modes",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status.",
              "required": false,
              "schema": {
                "title": "Created By",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status."
              },
              "name": "created_by",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status.",
              "required": false,
              "schema": {
                "title": "Updated By",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry based on profile status."
              },
              "name": "updated_by",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for datasets in the dataset registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for datasets in the dataset registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the fields that must be returned from the listing query.",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app__schemas__datasets__ListingFields"
                },
                "description": "This query parameter allows you to define the fields that must be returned from the listing query."
              },
              "name": "fields",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the dataset_ids that must be returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Dataset Ids",
                "type": "string",
                "description": "This query parameter allows you to define the dataset_ids that must be returned from the listing query."
              },
              "name": "dataset_ids",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "jes0hlyrvk325"
          }
        },
        "post": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Create Dataset",
          "description": "This API is used to register metadata configurations pertaining to data in the dataset registry.\n\nDatasets can support polyglot persistence, i.e. the same data can reside in multiple storage formats. The access pattern of the dataset is dependent on the storage and nature of how we are consuming or querying the data.\nThis means that different data storage and access patterns can be correspondingly defined, and that is also part of the metadata of a dataset.\n\nIf the raw data needs to reside in our offered cloud storage, the API also creates the corresponding resources required.\nThe API also offers virtualization of datasets. Instead of storing the data in our offered cloud storage, the dataset can also be defined to point to a configuration using which we can establish connection and access the data.\n\nThe dataset registry also helps in isolating and composing datasets as entities that can be used to build and orchestrate workflows.\n\nThe input to this API is a payload containing all the metadata about the dataset.\nThe output is a dataset identifier which is a unique reference to this dataset in the dataset registry, and a config which is the same as the input along with the generated identifier.",
          "operationId": "create_dataset_api_v1_datasets__post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-User-Id"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDataset"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "0cky953qttv1g"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Get Dataset",
          "description": "This API allows the user to read metadata configuration pertaining to a dataset identifier.\nBy default, the API provides the latest metadata configuration which is present in the dataset registry.\nThe API also helps capture the end-to-end journey of this metadata by providing versioning, and hence captures data lineage in the metadata layer.\nUsing the version parameter (which by default points to the latest version of the dataset), we can obtain different versions of this metadata configuration.\n\nThe input to this API is a dataset identifier, which is mandatory. We can pass an optional version parameter as well - if not passed, it will point to the latest version of the data.\nThe output of this API is all the metadata pertaining to the corresponding dataset identifier.",
          "operationId": "get_dataset_api_v1_datasets__dataset_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the dataset that will be parsed from the dataset metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "description": "This field describes the fields of the dataset that will be returned from the dataset metadata.",
              "required": false,
              "schema": {
                "title": "Fields",
                "type": "string",
                "description": "This field describes the fields of the dataset that will be returned from the dataset metadata."
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "u1ylapohk2ini"
          }
        },
        "delete": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Delete Dataset",
          "description": "This API allows metadata deletion for any specified dataset identifier.\nFor datasets that are stored in our offered cloud storage, the resources will also be deleted.\nOnce invoked, this API removes this dataset entry from both the listing configuration and also deletes the corresponding metadata stored for this in the dataset registry.\nIf delete API is invoked, all versions of the metadata is deleted.\n\nThe input to this API is a dataset identifier which refers to the dataset that has to be deleted.",
          "operationId": "delete_dataset_api_v1_datasets__dataset_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "description": "This fiield is used to decide whether the delete should be a hard(deleting metadata) or a soft delete(deleting only registry config)",
              "required": false,
              "schema": {
                "title": "Hard Delete",
                "type": "boolean",
                "description": "This fiield is used to decide whether the delete should be a hard(deleting metadata) or a soft delete(deleting only registry config)",
                "default": false
              },
              "name": "hard_delete",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "cfc6wmnjp7mgw"
          }
        },
        "patch": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Partial Update Dataset",
          "description": "This API allows metadata configuration updation for any specified dataset and updates the metadata in the dataset registry.\nSince journalling is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.\nIt does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the dataset metadata.\n\nFor the data that resides in our offered cloud storage, the API will also trigger the resource creation or deletion operations for any new access modes being added or deleted respectively.\nFor virtual datasets, the API allows updating configurations to connect and query the raw data residing elsewhere.\n\nThis API does not allow schema mutation for a dataset. Hence, the dataset schema is not accepted here.\n\nThe input to this API is a dataset identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.",
          "operationId": "partial_update_dataset_api_v1_datasets__dataset_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateDataset"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "i7bgkayjm09yh"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/profile": {
        "post": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Profile Dataset",
          "description": "This API allows the user to profile a dataset to obtain and aggregated summary & univariate analysis of the raw data.\nThe dataset's profile is updated in the dataset metadata.\nThis API is asynchronous, and profiling status is also captured. On successful invocation, the status\nThe worker that does the profiling will update the profile of the raw dataset as well as the status and last profiled timestamp.\n\nThe input to this API is a dataset identifier which refers to the dataset that has to be profiled.",
          "operationId": "profile_dataset_api_v1_datasets__dataset_id__profile_post",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "r4evi2ud18j4p"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/profile/status": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Get Dataset Profile Status",
          "description": "This API allows the user to get the status of the profiling of a dataset.\n\nThe input to this API is a dataset identifier which refers to the dataset that has to be profiled.",
          "operationId": "get_dataset_profile_status_api_v1_datasets__dataset_id__profile_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "v26epwwn1edtr"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/sample": {
        "post": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Sample Dataset",
          "description": "This API allows the user to sample a dataset",
          "operationId": "sample_dataset_api_v1_datasets__dataset_id__sample_post",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-User-Id",
                "type": "string"
              },
              "name": "x-user-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SamplingInfo"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "d9t11st7q73ii"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/sample/status": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Get Sampling Status",
          "description": "This API allows the user to get the status of the sampling of a dataset.\n\nThe input to this API is a dataset identifier which refers to the dataset that has to be profiled.",
          "operationId": "get_sampling_status_api_v1_datasets__dataset_id__sample_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "ar5em2cja0kw5"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/export": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Download Dataset",
          "description": "This API allows the user to get the csv download link pertaining to a dataset identifier.\nThe input to this API is a dataset identifier, which is mandatory.\nThe output of this API is the download link for the dataset.",
          "operationId": "download_dataset_api_v1_datasets__dataset_id__export_get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yvyjo3z0rm2hw"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/sync": {
        "post": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Synchronize Dataset",
          "description": "API allows the user to manually sync the dataset with the data source. only polyglot datasets can be manually synced",
          "operationId": "synchronize_dataset_api_v1_datasets__dataset_id__sync_post",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "bpzkzzdk3pjo1"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/sync/latest-status": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Get Latest Synchronization Status",
          "description": "API returns the latest sync status",
          "operationId": "get_latest_synchronization_status_api_v1_datasets__dataset_id__sync_latest_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "8mwhfzyxuc800"
          }
        }
      },
      "/api/v1/datasets/{dataset_id}/sync-runs": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "List Dataset Synchronization Runs",
          "operationId": "list_dataset_synchronization_runs_api_v1_datasets__dataset_id__sync_runs_get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset used to query the dataset registry.",
              "required": true,
              "schema": {
                "title": "Dataset Id",
                "type": "string",
                "description": "This field describes the ID of the dataset used to query the dataset registry."
              },
              "name": "dataset_id",
              "in": "path"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "4t14o6vm0drnu"
          }
        }
      },
      "/api/v1/datasets/create_account_datasets": {
        "post": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Create Account Datasets",
          "description": "This API is triggered for creating Account Level Datasets for a client/account upon creation.",
          "operationId": "create_account_datasets_api_v1_datasets_create_account_datasets_post",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "kc1w2a0hureg9"
          }
        }
      },
      "/api/v1/dataset_groups/": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "List Dataset Groups",
          "operationId": "list_dataset_groups_api_v1_dataset_groups__get",
          "parameters": [
            {
              "description": "This query parameter describes whether we need to list either internal dataset groups, external dataset groups or all dataset groups.",
              "required": false,
              "schema": {
                "title": "Internal",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either internal dataset groups, external dataset groups or all dataset groups."
              },
              "name": "internal",
              "in": "query"
            },
            {
              "description": "This query parameter describes whether we need to list either preset dataset groups, custom dataset groups or all dataset groups.",
              "required": false,
              "schema": {
                "title": "Preset",
                "type": "boolean",
                "description": "This query parameter describes whether we need to list either preset dataset groups, custom dataset groups or all dataset groups."
              },
              "name": "preset",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for summarization_status in the dataset_group registry.",
              "required": false,
              "schema": {
                "title": "Summarization Status",
                "type": "string",
                "description": "This query parameter enables the user to search for summarization_status in the dataset_group registry."
              },
              "name": "summarization_status",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for dataset groups in the dataset group registry based on tags.",
              "required": false,
              "schema": {
                "title": "Tags",
                "type": "string",
                "description": "This query parameter enables the user to search for dataset groups in the dataset group registry based on tags."
              },
              "name": "tags",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for dataset groups in the dataset group registry.",
              "required": false,
              "schema": {
                "title": "Search",
                "type": "string",
                "description": "This query parameter enables the user to search for dataset groups in the dataset group registry."
              },
              "name": "search",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on a particular field.",
              "required": false,
              "schema": {
                "title": "Sort Field",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on a particular field."
              },
              "name": "sort_field",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the listing query based on ascending or descending order.",
              "required": false,
              "schema": {
                "title": "Sort Order",
                "type": "string",
                "description": "This query parameter allows you to sort the listing query based on ascending or descending order."
              },
              "name": "sort_order",
              "in": "query"
            },
            {
              "description": "This query parameter enables the user to search for dataset_group_name in the dataset_group registry.",
              "required": false,
              "schema": {
                "title": "Dataset Group Name",
                "type": "string",
                "description": "This query parameter enables the user to search for dataset_group_name in the dataset_group registry."
              },
              "name": "dataset_group_name",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Page Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query."
              },
              "name": "page_offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Page Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query."
              },
              "name": "page_limit",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the fields that must be returned from the listing query.",
              "required": false,
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app__schemas__dataset_groups__ListingFields"
                },
                "description": "This query parameter allows you to define the fields that must be returned from the listing query."
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupListingResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "tv6n7m00q9kmn"
          }
        },
        "post": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Create Dataset Group",
          "operationId": "create_dataset_group_api_v1_dataset_groups__post",
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatasetGroup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupCreateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "puixwjl9lrcgv"
          }
        }
      },
      "/api/v1/dataset_groups/{dataset_group_id}": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Get Dataset Group",
          "operationId": "get_dataset_group_api_v1_dataset_groups__dataset_group_id__get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset group used to query the dataset group registry.",
              "required": true,
              "schema": {
                "title": "Dataset Group Id",
                "type": "string",
                "description": "This field describes the ID of the dataset group used to query the dataset group registry."
              },
              "name": "dataset_group_id",
              "in": "path"
            },
            {
              "description": "This field describes the version of the dataset group that will be parsed from the dataset metadata lineage.",
              "required": false,
              "schema": {
                "title": "Version",
                "type": "integer",
                "description": "This field describes the version of the dataset group that will be parsed from the dataset metadata lineage.",
                "default": 0
              },
              "name": "version",
              "in": "query"
            },
            {
              "description": "This field describes the fields of the dataset that will be returned from the dataset metadata",
              "required": false,
              "schema": {
                "title": "Fields",
                "type": "string",
                "description": "This field describes the fields of the dataset that will be returned from the dataset metadata"
              },
              "name": "fields",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupReadResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "9l1anl1nzum0b"
          }
        },
        "put": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Update Dataset Group",
          "operationId": "update_dataset_group_api_v1_dataset_groups__dataset_group_id__put",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset group used to query the dataset group registry.",
              "required": true,
              "schema": {
                "title": "Dataset Group Id",
                "type": "string",
                "description": "This field describes the ID of the dataset group used to query the dataset group registry."
              },
              "name": "dataset_group_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDatasetGroup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "gyohrvawtv41x"
          }
        },
        "delete": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Delete Dataset Group",
          "operationId": "delete_dataset_group_api_v1_dataset_groups__dataset_group_id__delete",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset group used to query the dataset group registry.",
              "required": true,
              "schema": {
                "title": "Dataset Group Id",
                "type": "string",
                "description": "This field describes the ID of the dataset group used to query the dataset group registry."
              },
              "name": "dataset_group_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupDeleteResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "89kmdrsp1te5g"
          }
        },
        "patch": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Partial Update Dataset Group",
          "operationId": "partial_update_dataset_group_api_v1_dataset_groups__dataset_group_id__patch",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset group used to query the dataset group registry.",
              "required": true,
              "schema": {
                "title": "Dataset Group Id",
                "type": "string",
                "description": "This field describes the ID of the dataset group used to query the dataset group registry."
              },
              "name": "dataset_group_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialUpdateDatasetGroup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupUpdateResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2s9hxnm9vadr5"
          }
        }
      },
      "/api/v1/dataset_groups/{dataset_group_id}/summarize": {
        "post": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Summarize Dataset Group",
          "operationId": "summarize_dataset_group_api_v1_dataset_groups__dataset_group_id__summarize_post",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset group used to query the dataset group registry.",
              "required": true,
              "schema": {
                "title": "Dataset Group Id",
                "type": "string",
                "description": "This field describes the ID of the dataset group used to query the dataset group registry."
              },
              "name": "dataset_group_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetGroupSummarization"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupSummarizationResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "2owhnbqezj1id"
          }
        }
      },
      "/api/v1/dataset_groups/{dataset_group_id}/summarize/status": {
        "get": {
          "tags": [
            "platform-datasets"
          ],
          "summary": "Get Dataset Group Summary Status",
          "operationId": "get_dataset_group_summary_status_api_v1_dataset_groups__dataset_group_id__summarize_status_get",
          "parameters": [
            {
              "description": "This field describes the ID of the dataset group used to query the dataset group registry.",
              "required": true,
              "schema": {
                "title": "Dataset Group Id",
                "type": "string",
                "description": "This field describes the ID of the dataset group used to query the dataset group registry."
              },
              "name": "dataset_group_id",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Client-Id",
                "type": "string"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Request-Id",
                "type": "string"
              },
              "name": "x-request-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Correlation-Id",
                "type": "string"
              },
              "name": "x-correlation-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetGroupSummarizationStatusResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "u4ciaudbyt8a2"
          }
        }
      },
      "/api/v1/notification/publish": {
        "post": {
          "tags": [
            "platform-notification"
          ],
          "summary": "Publish",
          "description": "Publish a message to a subscriber",
          "operationId": "publish_api_v1_notification_publish_post",
          "parameters": [
            {
              "description": "Client ID",
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string",
                "description": "Client ID"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Publisher"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PublisherResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "yplx2h3rkxvvn"
          }
        }
      },
      "/api/v1/notifications": {
        "get": {
          "tags": [
            "platform-notification"
          ],
          "summary": "Get Notifications",
          "description": "Function to get notifications",
          "operationId": "get_notifications_api_v1_notifications_get",
          "parameters": [
            {
              "description": "The topic the subscriber is subscribed to",
              "required": true,
              "schema": {
                "title": "Topic",
                "type": "string",
                "description": "The topic the subscriber is subscribed to"
              },
              "name": "topic",
              "in": "query"
            },
            {
              "description": "The status of the notification",
              "required": false,
              "schema": {
                "title": "Status",
                "type": "string",
                "description": "The status of the notification"
              },
              "name": "status",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
                "default": 0
              },
              "name": "offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query.",
                "default": 5
              },
              "name": "limit",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to sort the records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Sort By",
                "type": "string",
                "description": "This query parameter allows you to sort the records returned from the listing query.",
                "default": "desc"
              },
              "name": "sort_by",
              "in": "query"
            },
            {
              "description": "Client ID",
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string",
                "description": "Client ID"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/NotficationsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "aekto7fz2h12s"
          }
        }
      },
      "/api/v1/notifications/acknowledge": {
        "post": {
          "tags": [
            "platform-notification"
          ],
          "summary": "Acknowledge Notification",
          "description": "Function to acknowledge a notification",
          "operationId": "acknowledge_notification_api_v1_notifications_acknowledge_post",
          "parameters": [
            {
              "description": "The topic the subscriber is subscribed to",
              "required": true,
              "schema": {
                "title": "Topic",
                "type": "string",
                "description": "The topic the subscriber is subscribed to"
              },
              "name": "topic",
              "in": "query"
            },
            {
              "description": "Client ID",
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string",
                "description": "Client ID"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AcknowledgeNotification"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "q324q12f763oe"
          }
        }
      },
      "/api/v1/subscribe": {
        "post": {
          "tags": [
            "platform-notification"
          ],
          "summary": "Subscribe",
          "description": "Function to subscribe to a topic",
          "operationId": "subscribe_api_v1_subscribe_post",
          "parameters": [
            {
              "description": "Client ID",
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string",
                "description": "Client ID"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscribe"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubscribeResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "57gphuv38iywv"
          }
        }
      },
      "/api/v1/subscriptions": {
        "get": {
          "tags": [
            "platform-notification"
          ],
          "summary": "List Subscriptions",
          "description": "Function to list all subscriptions",
          "operationId": "list_subscriptions_api_v1_subscriptions_get",
          "parameters": [
            {
              "description": "The topic the subscriber is subscribed to",
              "required": false,
              "schema": {
                "title": "Topic",
                "type": "string",
                "description": "The topic the subscriber is subscribed to"
              },
              "name": "topic",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
              "required": false,
              "schema": {
                "title": "Offset",
                "type": "integer",
                "description": "This query parameter allows you to define the number of records that must be skipped before selection for the listing query.",
                "default": 0
              },
              "name": "offset",
              "in": "query"
            },
            {
              "description": "This query parameter allows you to limit the number of records returned from the listing query.",
              "required": false,
              "schema": {
                "title": "Limit",
                "type": "integer",
                "description": "This query parameter allows you to limit the number of records returned from the listing query.",
                "default": 5
              },
              "name": "limit",
              "in": "query"
            },
            {
              "description": "Client ID",
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string",
                "description": "Client ID"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ListSubscriptionsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "3uwpfskcr0fkk"
          }
        }
      },
      "/api/v1/unsubscribe": {
        "post": {
          "tags": [
            "platform-notification"
          ],
          "summary": "Unsubscribe",
          "description": "Function to unsubscribe from a topic",
          "operationId": "unsubscribe_api_v1_unsubscribe_post",
          "parameters": [
            {
              "description": "Client ID",
              "required": true,
              "schema": {
                "title": "X-Client-Id",
                "type": "string",
                "description": "Client ID"
              },
              "name": "x-client-id",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnSubscribe"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UnSubscribeResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "x-stoplight": {
            "id": "vliru37go1xw9"
          }
        }
      },
      "/api/v1/notification/health": {
        "get": {
          "summary": "Startup Check",
          "description": "This is a startup check endpoint. It can be used to check if the application is up and running.\n\nReturns:\n- StartupSuccessResponse: If the application is up and running\n- StartupErrorResponse: If the application is not ready to serve requests",
          "operationId": "startup_check_api_v1_notification_health_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            }
          },
          "tags": [
            "platform-notification"
          ],
          "parameters": [
            {
              "required": false,
              "schema": {
                "title": "Access-Token",
                "type": "string"
              },
              "name": "access-token",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "X-Api-Key",
                "type": "string"
              },
              "name": "x-api-key",
              "in": "header"
            },
            {
              "required": false,
              "schema": {
                "title": "Account-Id",
                "type": "string"
              },
              "name": "account-id",
              "in": "header"
            }
          ],
          "x-stoplight": {
            "id": "ypn44jf1pebl4"
          }
        }
      }
    },
    "components": {
      "schemas": {
        "AccountCreate": {
          "title": "AccountCreate",
          "required": [
            "name",
            "email"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "email": {
              "title": "Email",
              "type": "string"
            },
            "id": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            }
          },
          "description": "Account create model",
          "x-stoplight": {
            "id": "ut1vzhwu0kx5b"
          }
        },
        "AccountUpdate": {
          "title": "AccountUpdate",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "license": {
              "title": "License",
              "type": "string"
            },
            "active": {
              "title": "Active",
              "type": "boolean"
            },
            "add_users": {
              "title": "Add Users",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "remove_users": {
              "title": "Remove Users",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Account update model.",
          "x-stoplight": {
            "id": "43dgzbm1u6zfg"
          }
        },
        "ApiKey": {
          "title": "ApiKey",
          "required": [
            "id",
            "user_id",
            "active",
            "created_ts"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "id": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "format": "uuid"
            },
            "account_id": {
              "title": "Account Id",
              "type": "string",
              "format": "uuid"
            },
            "active": {
              "title": "Active",
              "type": "boolean"
            },
            "roles": {
              "title": "Roles",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyRole"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array",
                    "items": {
                      "type": "format"
                    }
                  }
                }
              ]
            },
            "permissions": {
              "title": "Permissions",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyPermission"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array",
                    "items": {
                      "type": "format"
                    }
                  }
                }
              ]
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "Creation timestamp",
              "format": "date-time"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "Last update timestamp",
              "format": "date-time"
            }
          },
          "description": "ApiKey Model",
          "x-stoplight": {
            "id": "kx745m20r8c4d"
          }
        },
        "ApiKeyCreate": {
          "title": "ApiKeyCreate",
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "roles": {
              "title": "Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "permissions": {
              "title": "Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "ApiKey create model",
          "x-stoplight": {
            "id": "f324mwb7wjvfw"
          }
        },
        "ApiKeyPermission": {
          "title": "ApiKeyPermission",
          "type": "object",
          "properties": {
            "permission_id": {
              "title": "Permission Id",
              "type": "string",
              "format": "uuid"
            },
            "group": {
              "title": "Group",
              "type": "string"
            },
            "methods": {
              "title": "Methods",
              "type": "string"
            },
            "account_id": {
              "title": "Account Id",
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "permission_name": {
              "title": "Permission Name",
              "type": "string"
            },
            "entity": {
              "title": "Entity",
              "type": "string"
            },
            "route": {
              "title": "Route",
              "type": "string"
            }
          },
          "description": "ApiKey Permission Model",
          "x-stoplight": {
            "id": "1vni6w7veqzc2"
          }
        },
        "ApiKeyRole": {
          "title": "ApiKeyRole",
          "type": "object",
          "properties": {
            "role": {
              "title": "Role",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "role_id": {
              "title": "Role Id",
              "type": "string",
              "format": "uuid"
            },
            "account_id": {
              "title": "Account Id",
              "type": "string",
              "format": "uuid"
            },
            "permissions": {
              "title": "Permissions",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ApiKeyPermission"
              }
            }
          },
          "description": "ApiKey Role Model",
          "x-stoplight": {
            "id": "jow3l3qtlqjp9"
          }
        },
        "ApiKeyUpdate": {
          "title": "ApiKeyUpdate",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "active": {
              "title": "Active",
              "type": "boolean"
            },
            "add_roles": {
              "title": "Add Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_roles": {
              "title": "Remove Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "add_permissions": {
              "title": "Add Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_permissions": {
              "title": "Remove Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "ApiKey Update Model",
          "x-stoplight": {
            "id": "11ntm11awogdb"
          }
        },
        "ApiSet": {
          "title": "ApiSet",
          "required": [
            "name",
            "host"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "openapi_authorization": {
              "title": "Openapi Authorization",
              "type": "object"
            },
            "openapi_file_url": {
              "title": "Openapi File Url",
              "type": "string"
            },
            "host": {
              "title": "Host",
              "type": "string"
            },
            "authorization": {
              "title": "Authorization",
              "type": "object",
              "default": {}
            }
          },
          "x-stoplight": {
            "id": "qjkozagpvxwlw"
          }
        },
        "CreateApiKeyResponse": {
          "title": "CreateApiKeyResponse",
          "required": [
            "request_id",
            "message",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/ResponseWithApiKey"
            }
          },
          "description": "Create ApiKey Response Model",
          "x-stoplight": {
            "id": "8rxiqbu60yucd"
          }
        },
        "CreateIdentityProvider": {
          "title": "CreateIdentityProvider",
          "required": [
            "organization",
            "idp_name",
            "idp_client_id",
            "idp_client_secret",
            "discovery_endpoint"
          ],
          "type": "object",
          "properties": {
            "organization": {
              "title": "Organization",
              "type": "string"
            },
            "idp_name": {
              "title": "Idp Name",
              "type": "string"
            },
            "idp_client_id": {
              "title": "Idp Client Id",
              "type": "string"
            },
            "idp_client_secret": {
              "title": "Idp Client Secret",
              "type": "string"
            },
            "discovery_endpoint": {
              "title": "Discovery Endpoint",
              "type": "string"
            },
            "is_custom": {
              "title": "Is Custom",
              "type": "boolean",
              "default": false
            }
          },
          "description": "Create Identity Provider Model",
          "x-stoplight": {
            "id": "rckzgmmnlwp9x"
          }
        },
        "CreateLogFields": {
          "title": "CreateLogFields",
          "required": [
            "fields"
          ],
          "type": "object",
          "properties": {
            "fields": {
              "title": "Fields",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Account model.",
          "x-stoplight": {
            "id": "yo58wh0m9ln23"
          }
        },
        "CreateSecretRequest": {
          "title": "CreateSecretRequest",
          "required": [
            "secret_name",
            "secret_value"
          ],
          "type": "object",
          "properties": {
            "secret_name": {
              "title": "Secret Name",
              "type": "string"
            },
            "secret_value": {
              "title": "Secret Value",
              "type": "object"
            }
          },
          "description": "Secret create model",
          "x-stoplight": {
            "id": "vnuotlpfkz5ay"
          }
        },
        "CreateSecretResponse": {
          "title": "CreateSecretResponse",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResponseWithSecretName"
                }
              ],
              "default": {}
            }
          },
          "description": "Create Secret Response Model",
          "x-stoplight": {
            "id": "v8uodsv9vprpc"
          }
        },
        "DeleteApiKeyResponse": {
          "title": "DeleteApiKeyResponse",
          "required": [
            "request_id",
            "message",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "description": "Delete ApiKey Response Model",
          "x-stoplight": {
            "id": "v9gbsf1m2ntj9"
          }
        },
        "DeleteSecretResponse": {
          "title": "DeleteSecretResponse",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            }
          },
          "description": "Delete Secret Response Model",
          "x-stoplight": {
            "id": "n0axkbw4cqwzf"
          }
        },
        "ErrorDetail": {
          "title": "ErrorDetail",
          "enum": [
            "Bad request",
            "Invalid API key/token",
            "Resource not found",
            "Method not allowed",
            "Internal server error",
            "Invalid Namespace",
            "Unprocessable Entity"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "f26m3aup746s4"
          }
        },
        "ErrorResponse": {
          "title": "ErrorResponse",
          "required": [
            "detail"
          ],
          "type": "object",
          "properties": {
            "detail": {
              "$ref": "#/components/schemas/ErrorDetail"
            }
          },
          "description": "Error response model.",
          "x-stoplight": {
            "id": "sssvmlnlqj6r9"
          }
        },
        "FailureResponseStructure": {
          "title": "FailureResponseStructure",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "title": "Data",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array",
                  "items": {}
                }
              ]
            }
          },
          "description": "Failure Response Model",
          "x-stoplight": {
            "id": "5h8tybyg4q54y"
          }
        },
        "ForgotPassword": {
          "title": "ForgotPassword",
          "required": [
            "email",
            "organization"
          ],
          "type": "object",
          "properties": {
            "email": {
              "title": "Email",
              "type": "string"
            },
            "emailenabled": {
              "title": "Emailenabled",
              "type": "boolean",
              "default": true
            },
            "organization": {
              "title": "Organization",
              "type": "string"
            }
          },
          "description": "Forgot Password Model",
          "x-stoplight": {
            "id": "enllxrr2fw01e"
          }
        },
        "GetApiKeyResponse": {
          "title": "GetApiKeyResponse",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "description": "Get a ApiKey Response Model",
          "x-stoplight": {
            "id": "4y6b3eza4bl6w"
          }
        },
        "GetSecret": {
          "title": "GetSecret",
          "required": [
            "secret_name",
            "secret_values"
          ],
          "type": "object",
          "properties": {
            "secret_name": {
              "title": "Secret Name",
              "type": "string"
            },
            "secret_values": {
              "title": "Secret Values",
              "type": "object"
            }
          },
          "description": "Secret Model",
          "x-stoplight": {
            "id": "98863tce4fphd"
          }
        },
        "GetSecretResponse": {
          "title": "GetSecretResponse",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GetSecret"
                }
              ],
              "default": {}
            }
          },
          "description": "Get a Secret Response Model",
          "x-stoplight": {
            "id": "sz6hdcajsj0zb"
          }
        },
        "HTTPValidationError": {
          "title": "HTTPValidationError",
          "type": "object",
          "properties": {
            "detail": {
              "title": "Detail",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          },
          "x-stoplight": {
            "id": "oujbo3fjt7wb1"
          }
        },
        "ListApiKeyResponse": {
          "title": "ListApiKeyResponse",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ApiKey"
              },
              "default": []
            }
          },
          "description": "List of ApiKey's Response Model",
          "x-stoplight": {
            "id": "n97kpkwgbdh9m"
          }
        },
        "ListSecretResponse": {
          "title": "ListSecretResponse",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResponseWithResults"
                }
              ],
              "default": {}
            }
          },
          "description": "List Secret Response Model",
          "x-stoplight": {
            "id": "fh092yg8d14hi"
          }
        },
        "LogoutCreds": {
          "title": "LogoutCreds",
          "required": [
            "refresh_token"
          ],
          "type": "object",
          "properties": {
            "flow": {
              "title": "Flow",
              "type": "string"
            },
            "idp": {
              "title": "Idp",
              "type": "string"
            },
            "refresh_token": {
              "title": "Refresh Token",
              "type": "string"
            }
          },
          "description": "Logout user session",
          "x-stoplight": {
            "id": "i68omy56ru3nu"
          }
        },
        "PermissionCreate": {
          "title": "PermissionCreate",
          "required": [
            "route",
            "methods"
          ],
          "type": "object",
          "properties": {
            "route": {
              "title": "Route",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "methods": {
              "title": "Methods",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "group": {
              "title": "Group",
              "type": "string"
            },
            "entity": {
              "title": "Entity",
              "type": "string"
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "roles": {
              "title": "Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            }
          },
          "description": "Create Permission Model",
          "x-stoplight": {
            "id": "5de1nn6oy71vt"
          }
        },
        "PermissionUpdate": {
          "title": "PermissionUpdate",
          "type": "object",
          "properties": {
            "route": {
              "title": "Route",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "methods": {
              "title": "Methods",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "group": {
              "title": "Group",
              "type": "string"
            },
            "entity": {
              "title": "Entity",
              "type": "string"
            },
            "add_users": {
              "title": "Add Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_users": {
              "title": "Remove Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "add_user_groups": {
              "title": "Add User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_user_groups": {
              "title": "Remove User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "Update Permission Model",
          "x-stoplight": {
            "id": "299fimei9k1tk"
          }
        },
        "RbacStatus": {
          "title": "RbacStatus",
          "enum": [
            "SUCCESS",
            "FAILED",
            "INPROGRESS"
          ],
          "type": "string",
          "description": "Rbac status.",
          "x-stoplight": {
            "id": "pwtdycyh71li2"
          }
        },
        "RbacStatusCreate": {
          "title": "RbacStatusCreate",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "$ref": "#/components/schemas/RbacStatus"
            }
          },
          "description": "Rbac status model.",
          "x-stoplight": {
            "id": "1r3i6ehr40cno"
          }
        },
        "RbacStatusUpdate": {
          "title": "RbacStatusUpdate",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "$ref": "#/components/schemas/RbacStatus"
            }
          },
          "description": "Rbac status update model.",
          "x-stoplight": {
            "id": "pxe8pyr262a0p"
          }
        },
        "RequestStatus": {
          "title": "RequestStatus",
          "enum": [
            "SUCCESS",
            "FAILURE",
            "ACCEPTED",
            "ERROR"
          ],
          "type": "string",
          "description": "Enumeration of request statuses.",
          "x-stoplight": {
            "id": "ba8hb97n60f8q"
          }
        },
        "ResetPassword": {
          "title": "ResetPassword",
          "required": [
            "email",
            "old_password",
            "new_password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "title": "Email",
              "type": "string"
            },
            "old_password": {
              "title": "Old Password",
              "type": "string"
            },
            "new_password": {
              "title": "New Password",
              "type": "string"
            }
          },
          "description": "Reset Password Model",
          "x-stoplight": {
            "id": "lmvfnyg4gqqgv"
          }
        },
        "ResourceAllocationCreate": {
          "title": "ResourceAllocationCreate",
          "type": "object",
          "properties": {
            "allocation_name": {
              "title": "Allocation Name",
              "type": "string"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string"
            },
            "what_to_allocate": {
              "title": "What To Allocate",
              "type": "array",
              "items": {
                "type": "object"
              },
              "default": []
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "roles": {
              "title": "Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            }
          },
          "description": "Resource allocation model.",
          "x-stoplight": {
            "id": "82bdegvsgfuc2"
          }
        },
        "ResourceAllocationUpdate": {
          "title": "ResourceAllocationUpdate",
          "type": "object",
          "properties": {
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string"
            },
            "remove_dataset_id": {
              "title": "Remove Dataset Id",
              "type": "string"
            },
            "allocation_name": {
              "title": "Allocation Name",
              "type": "string"
            },
            "what_to_allocate": {
              "title": "What To Allocate",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "add_users": {
              "title": "Add Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_users": {
              "title": "Remove Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "add_user_groups": {
              "title": "Add User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_user_groups": {
              "title": "Remove User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "add_roles": {
              "title": "Add Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_roles": {
              "title": "Remove Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "Resource allocation update model.",
          "x-stoplight": {
            "id": "ofs5k2ohzpj0f"
          }
        },
        "ResourceAllocationUpdateOverwrite": {
          "title": "ResourceAllocationUpdateOverwrite",
          "required": [
            "what_to_allocate"
          ],
          "type": "object",
          "properties": {
            "allocation_name": {
              "title": "Allocation Name",
              "type": "string"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string"
            },
            "what_to_allocate": {
              "title": "What To Allocate",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "roles": {
              "title": "Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            }
          },
          "description": "Resource allocation update overwrite model.",
          "x-stoplight": {
            "id": "3kp2s6wk7hyzt"
          }
        },
        "ResponseWithApiKey": {
          "title": "ResponseWithApiKey",
          "required": [
            "id",
            "user_id",
            "active",
            "created_ts",
            "api_key"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "id": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "format": "uuid"
            },
            "account_id": {
              "title": "Account Id",
              "type": "string",
              "format": "uuid"
            },
            "active": {
              "title": "Active",
              "type": "boolean"
            },
            "roles": {
              "title": "Roles",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyRole"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array",
                    "items": {
                      "type": "format"
                    }
                  }
                }
              ]
            },
            "permissions": {
              "title": "Permissions",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyPermission"
                  }
                },
                {
                  "type": "array",
                  "items": {
                    "maxItems": 2,
                    "minItems": 2,
                    "type": "array",
                    "items": {
                      "type": "format"
                    }
                  }
                }
              ]
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "Creation timestamp",
              "format": "date-time"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "Last update timestamp",
              "format": "date-time"
            },
            "api_key": {
              "title": "Api Key",
              "type": "string",
              "format": "uuid"
            }
          },
          "description": "ApiKey Model",
          "x-stoplight": {
            "id": "a53ubqj71nrqc"
          }
        },
        "ResponseWithResults": {
          "title": "ResponseWithResults",
          "required": [
            "results"
          ],
          "type": "object",
          "properties": {
            "results": {
              "title": "Results",
              "type": "array",
              "items": {}
            }
          },
          "description": "List Secret Response Model for Results key",
          "x-stoplight": {
            "id": "p3t4wsrw5b6vd"
          }
        },
        "ResponseWithSecretName": {
          "title": "ResponseWithSecretName",
          "required": [
            "secret_name"
          ],
          "type": "object",
          "properties": {
            "secret_name": {
              "title": "Secret Name",
              "type": "string"
            }
          },
          "description": "Create Secret Response Model for secret name",
          "x-stoplight": {
            "id": "yn7v8zd1yfg5f"
          }
        },
        "RoleCreateModel": {
          "title": "RoleCreateModel",
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "add_permissions": {
              "title": "Add Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "permissions": {
              "title": "Permissions",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RoutePermission"
              },
              "default": []
            }
          },
          "description": "Role Request Model",
          "x-stoplight": {
            "id": "pe5dqpa3j74n8"
          }
        },
        "RoleUpdateModel": {
          "title": "RoleUpdateModel",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "permissions": {
              "title": "Permissions",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UpdateRoutePermission"
              }
            },
            "add_permissions": {
              "title": "Add Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_permissions": {
              "title": "Remove Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "Role update model.",
          "x-stoplight": {
            "id": "unor5r2o6w6hr"
          }
        },
        "RoutePermission": {
          "title": "RoutePermission",
          "required": [
            "route",
            "methods"
          ],
          "type": "object",
          "properties": {
            "route": {
              "title": "Route",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "methods": {
              "title": "Methods",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "group": {
              "title": "Group",
              "type": "string"
            },
            "entity": {
              "title": "Entity",
              "type": "string"
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "roles": {
              "title": "Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            }
          },
          "description": "Route Permission Model",
          "x-stoplight": {
            "id": "451hqsz869ow1"
          }
        },
        "SuccessResponseStructure": {
          "title": "SuccessResponseStructure",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "title": "Data",
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array",
                  "items": {}
                }
              ]
            }
          },
          "description": "Success Response Model",
          "x-stoplight": {
            "id": "ul0x72yj1vrdw"
          }
        },
        "UpdateApiKeyResponse": {
          "title": "UpdateApiKeyResponse",
          "required": [
            "request_id",
            "message",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "description": "Update ApiKey Response Model",
          "x-stoplight": {
            "id": "vfnpha2t6yj2p"
          }
        },
        "UpdateApiSet": {
          "title": "UpdateApiSet",
          "required": [
            "openapi_file_url",
            "host",
            "name"
          ],
          "type": "object",
          "properties": {
            "openapi_file_url": {
              "title": "Openapi File Url",
              "type": "string"
            },
            "host": {
              "title": "Host",
              "type": "string"
            },
            "openapi_authorization": {
              "title": "Openapi Authorization",
              "type": "object",
              "default": {}
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "authorization": {
              "title": "Authorization",
              "type": "object",
              "default": {}
            }
          },
          "x-stoplight": {
            "id": "3sr868nxcquua"
          }
        },
        "UpdateLogFields": {
          "title": "UpdateLogFields",
          "required": [
            "add_fields",
            "remove_fields"
          ],
          "type": "object",
          "properties": {
            "add_fields": {
              "title": "Add Fields",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "remove_fields": {
              "title": "Remove Fields",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "description": "Account model.",
          "x-stoplight": {
            "id": "iv26madnf76p8"
          }
        },
        "UpdateRoutePermission": {
          "title": "UpdateRoutePermission",
          "required": [
            "permission_id",
            "route",
            "methods"
          ],
          "type": "object",
          "properties": {
            "permission_id": {
              "title": "Permission Id",
              "type": "string",
              "format": "uuid"
            },
            "route": {
              "title": "Route",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "methods": {
              "title": "Methods",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "group": {
              "title": "Group",
              "type": "string"
            },
            "entity": {
              "title": "Entity",
              "type": "string"
            }
          },
          "description": "Route update model when updating through role",
          "x-stoplight": {
            "id": "5uozedu4k2o41"
          }
        },
        "UpdateSecret": {
          "title": "UpdateSecret",
          "required": [
            "secret_name"
          ],
          "type": "object",
          "properties": {
            "secret_name": {
              "title": "Secret Name",
              "type": "string"
            }
          },
          "description": "Create Secret Response Model for secret name",
          "x-stoplight": {
            "id": "6qmyft5yxkd3o"
          }
        },
        "UpdateSecretRequest": {
          "title": "UpdateSecretRequest",
          "required": [
            "secret_value"
          ],
          "type": "object",
          "properties": {
            "secret_value": {
              "title": "Secret Value",
              "type": "object"
            }
          },
          "description": "Secret Update Model",
          "x-stoplight": {
            "id": "15t18551whzlf"
          }
        },
        "UpdateSecretResponse": {
          "title": "UpdateSecretResponse",
          "required": [
            "request_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/RequestStatus"
            },
            "status_id": {
              "title": "Status Id",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string"
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpdateSecret"
                }
              ],
              "default": {}
            }
          },
          "description": "Update Secret Response Model",
          "x-stoplight": {
            "id": "kpfh31xn6bc96"
          }
        },
        "UserCreate": {
          "title": "UserCreate",
          "required": [
            "name",
            "email"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "email": {
              "title": "Email",
              "type": "string"
            },
            "password": {
              "title": "Password",
              "type": "string",
              "default": "Default"
            },
            "roles": {
              "title": "Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "permissions": {
              "title": "Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "User create model",
          "x-stoplight": {
            "id": "sihvmgw99wi8e"
          }
        },
        "UserCreds": {
          "title": "UserCreds",
          "required": [
            "email",
            "password"
          ],
          "type": "object",
          "properties": {
            "email": {
              "title": "Email",
              "type": "string"
            },
            "password": {
              "title": "Password",
              "type": "string"
            }
          },
          "description": "User credentials model.",
          "x-stoplight": {
            "id": "czq85dmk4thvs"
          }
        },
        "UserGroupCreate": {
          "title": "UserGroupCreate",
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "roles": {
              "title": "Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "user_ids": {
              "title": "User Ids",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            },
            "permissions": {
              "title": "Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "default": []
            }
          },
          "description": "UserGroup create model.",
          "x-stoplight": {
            "id": "q147favyas0oe"
          }
        },
        "UserGroupUpdate": {
          "title": "UserGroupUpdate",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "add_roles": {
              "title": "Add Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "add_users": {
              "title": "Add Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_roles": {
              "title": "Remove Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_users": {
              "title": "Remove Users",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "add_permissions": {
              "title": "Add Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_permissions": {
              "title": "Remove Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "UserGroup update model.",
          "x-stoplight": {
            "id": "6xccrojui7n5y"
          }
        },
        "UserUpdate": {
          "title": "UserUpdate",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "email": {
              "title": "Email",
              "type": "string"
            },
            "active": {
              "title": "Active",
              "type": "boolean"
            },
            "password": {
              "title": "Password",
              "type": "string"
            },
            "code": {
              "title": "Code",
              "type": "string"
            },
            "add_roles": {
              "title": "Add Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_roles": {
              "title": "Remove Roles",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "add_permissions": {
              "title": "Add Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "remove_permissions": {
              "title": "Remove Permissions",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          "description": "User Update Model",
          "x-stoplight": {
            "id": "x3os8mo00ab06"
          }
        },
        "ValidationError": {
          "title": "ValidationError",
          "required": [
            "loc",
            "msg",
            "type"
          ],
          "type": "object",
          "properties": {
            "loc": {
              "title": "Location",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              }
            },
            "msg": {
              "title": "Message",
              "type": "string"
            },
            "type": {
              "title": "Error Type",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "mzbruvjwabdna"
          }
        },
        "AssetDefinition": {
          "title": "AssetDefinition",
          "type": "object",
          "properties": {
            "asset": {
              "title": "Asset",
              "type": "object",
              "description": "This field provides the asset type id for the new asset type."
            },
            "dependencies": {
              "title": "Dependencies",
              "type": "array",
              "items": {},
              "description": "This field provides the asset type id for the new asset type.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "0akwfkouqrebk"
          }
        },
        "CreateAsset": {
          "title": "CreateAsset",
          "required": [
            "asset_name",
            "status",
            "cost",
            "meta_data"
          ],
          "type": "object",
          "properties": {
            "parent_config_id": {
              "title": "Parent Config Id",
              "type": "string",
              "description": "This field provides the id of the config being registered as an asset."
            },
            "asset_name": {
              "title": "Asset Name",
              "type": "string",
              "description": "This field provides the name of the asset."
            },
            "asset_type_id": {
              "title": "Asset Type Id",
              "type": "string",
              "description": "This field provides the asset type id for the new asset."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides the status of the asset."
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "This field provides the description of the asset."
            },
            "cost": {
              "title": "Cost",
              "type": "number",
              "description": "This field provides the cost of the asset."
            },
            "downloads": {
              "title": "Downloads",
              "type": "integer",
              "description": "This field provides the number of downloads of the asset.",
              "default": 0
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {},
              "description": "This field provides the list of tags for the asset.",
              "default": []
            },
            "meta_data": {
              "title": "Meta Data",
              "type": "object",
              "description": "This field provides the meta data of the asset."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "This field provides the data required for importing the asset."
            }
          },
          "x-stoplight": {
            "id": "7kcq3fd9g14dl"
          }
        },
        "CreateAssetType": {
          "title": "CreateAssetType",
          "required": [
            "asset_type_name",
            "entity_name",
            "asset_definition"
          ],
          "type": "object",
          "properties": {
            "asset_type_id": {
              "title": "Asset Type Id",
              "type": "string",
              "description": "This field provides the asset type id for the new asset type."
            },
            "asset_type_name": {
              "title": "Asset Type Name",
              "type": "string",
              "description": "This field provides the name of the asset type."
            },
            "entity_name": {
              "title": "Entity Name",
              "type": "string",
              "description": "This field provides the entity name of the asset type."
            },
            "enabled": {
              "title": "Enabled",
              "type": "boolean",
              "description": "This field provides the document id for the new document.",
              "default": true
            },
            "asset_definition": {
              "title": "Asset Definition",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetDefinition"
                }
              ],
              "description": "This field provides the document id for the new document."
            }
          },
          "x-stoplight": {
            "id": "thhdunmbjyx6v"
          }
        },
        "PatchAsset": {
          "title": "PatchAsset",
          "type": "object",
          "properties": {
            "asset_name": {
              "title": "Asset Name",
              "type": "string",
              "description": "This field provides the name of the asset."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides the status of the asset."
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "This field provides the description of the asset."
            },
            "cost": {
              "title": "Cost",
              "type": "number",
              "description": "This field provides the cost of the asset."
            },
            "downloads": {
              "title": "Downloads",
              "type": "integer",
              "description": "This field provides the number of downloads of the asset."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {},
              "description": "This field provides the list of tags for the asset."
            },
            "meta_data": {
              "title": "Meta Data",
              "type": "object",
              "description": "This field provides the meta data of the asset."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "This field provides the data required for importing the asset."
            }
          },
          "x-stoplight": {
            "id": "264s78iwyty8l"
          }
        },
        "PatchAssetType": {
          "title": "PatchAssetType",
          "type": "object",
          "properties": {
            "asset_type_name": {
              "title": "Asset Type Name",
              "type": "string",
              "description": "This field provides the name of the asset type."
            },
            "entity_name": {
              "title": "Entity Name",
              "type": "string",
              "description": "This field provides the entity name of the asset type."
            },
            "enabled": {
              "title": "Enabled",
              "type": "boolean",
              "description": "This field provides the document id for the new document."
            },
            "asset_definition": {
              "title": "Asset Definition",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AssetDefinition"
                }
              ],
              "description": "This field provides the document id for the new document."
            }
          },
          "x-stoplight": {
            "id": "jyn8rmrl70xll"
          }
        },
        "app__schemas__asset_types__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "asset_type_id",
            "asset_type_name",
            "entity_name",
            "enabled",
            "asset_definition"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "u59q7uharwmiv"
          }
        },
        "app__schemas__assets__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "asset_id",
            "asset_name",
            "asset_type_id",
            "asset_type_name",
            "description",
            "status",
            "downloads",
            "cost",
            "tags",
            "meta_data",
            "data"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "rgryrdi62a7d6"
          }
        },
        "AccessMode": {
          "title": "AccessMode",
          "enum": [
            "relational_database",
            "key_value",
            "search"
          ],
          "type": "string",
          "description": "Enum for access mode",
          "x-stoplight": {
            "id": "h83pxvkeei89g"
          }
        },
        "Query": {
          "title": "Query",
          "type": "object",
          "properties": {
            "filter": {
              "title": "Filter",
              "allOf": [
                {
                  "$ref": "#/components/schemas/QueryFilter"
                }
              ],
              "description": "This field describes what filters need to be applied as part of the query."
            },
            "select": {
              "title": "Select",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QuerySelect"
              },
              "description": "This field describes which columns to select for the query."
            },
            "sort": {
              "title": "Sort",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QuerySort"
              },
              "description": "This field describes which columns to sort the response by."
            },
            "es_params": {
              "title": "Es Params",
              "type": "object",
              "description": "This field describes what query need to be applied as part of the ES query."
            }
          },
          "x-stoplight": {
            "id": "14czi4jx7khrv"
          }
        },
        "QueryDatasetPayload": {
          "title": "QueryDatasetPayload",
          "required": [
            "query"
          ],
          "type": "object",
          "properties": {
            "fields": {
              "title": "Fields",
              "type": "array",
              "items": {},
              "description": "This field defines which all fields need to selected to obtain the result of the query."
            },
            "access_mode": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessMode"
                }
              ],
              "description": "This field defines the access mode to the data source."
            },
            "query": {
              "title": "Query",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Query"
                }
              ],
              "description": "This field defines the query that needs to be executed."
            },
            "offset": {
              "title": "Offset",
              "type": "integer",
              "description": "This field allows you to define the number of records that must be skipped before selection.",
              "default": 0
            },
            "limit": {
              "title": "Limit",
              "type": "integer",
              "description": "This query parameter allows you to limit the number of records returned from the query.",
              "default": 250
            }
          },
          "x-stoplight": {
            "id": "240g7c30ku4gw"
          }
        },
        "QueryFilter": {
          "title": "QueryFilter",
          "required": [
            "operator",
            "operands"
          ],
          "type": "object",
          "properties": {
            "operator": {
              "title": "Operator",
              "type": "string",
              "description": "This field defines the operator to be used for filtering."
            },
            "operands": {
              "title": "Operands",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/QueryInnerOperand"
                  },
                  {
                    "$ref": "#/components/schemas/QueryOperand"
                  }
                ]
              },
              "description": "This field defines the operands to be used for filtering."
            }
          },
          "x-stoplight": {
            "id": "tnz87qv2w77zq"
          }
        },
        "QueryInnerOperand": {
          "title": "QueryInnerOperand",
          "required": [
            "operator",
            "operands"
          ],
          "type": "object",
          "properties": {
            "operator": {
              "title": "Operator",
              "type": "string",
              "description": "This field defines the operator to be used for filtering."
            },
            "operands": {
              "title": "Operands",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/QueryOperand"
              },
              "description": "This field defines the operands to be used for filtering."
            }
          },
          "x-stoplight": {
            "id": "qp3nmdw2lcd9n"
          }
        },
        "QueryOperand": {
          "title": "QueryOperand",
          "required": [
            "field",
            "condition_operator",
            "value"
          ],
          "type": "object",
          "properties": {
            "field": {
              "title": "Field",
              "type": "string",
              "description": "This field defines the field to be used for filtering."
            },
            "condition_operator": {
              "title": "Condition Operator",
              "type": "string",
              "description": "This field defines the operator to be used for filtering."
            },
            "value": {
              "title": "Value",
              "description": "This field defines the value to be used for filtering."
            },
            "db_function": {
              "title": "Db Function",
              "type": "string",
              "description": "This field defines the function to be applied on the selected field."
            },
            "db_function_extra_args": {
              "title": "Db Function Extra Args",
              "type": "array",
              "items": {},
              "description": "This field defines the arguments to be passed to the db function."
            }
          },
          "x-stoplight": {
            "id": "qx9rbs0cgh6ao"
          }
        },
        "QuerySelect": {
          "title": "QuerySelect",
          "required": [
            "field"
          ],
          "type": "object",
          "properties": {
            "field": {
              "title": "Field",
              "type": "string",
              "description": "This field defines the field to be selected."
            },
            "alias": {
              "title": "Alias",
              "type": "string",
              "description": "This field defines the alias for the selected field.",
              "default": ""
            },
            "db_function": {
              "title": "Db Function",
              "type": "string",
              "description": "This field defines the function to be applied on the selected field."
            },
            "db_function_extra_args": {
              "title": "Db Function Extra Args",
              "type": "array",
              "items": {},
              "description": "This field defines the arguments to be passed to the db function."
            }
          },
          "x-stoplight": {
            "id": "mokxrb8d5yo3j"
          }
        },
        "QuerySort": {
          "title": "QuerySort",
          "required": [
            "field"
          ],
          "type": "object",
          "properties": {
            "field": {
              "title": "Field",
              "type": "string",
              "description": "This field defines the field to be sorted."
            },
            "sort_type": {
              "title": "Sort Type",
              "type": "string",
              "description": "This can be asc for ascending or desc for descending.",
              "default": "asc"
            },
            "db_function": {
              "title": "Db Function",
              "type": "string",
              "description": "This field defines the function to be applied on the selected field."
            },
            "db_function_extra_args": {
              "title": "Db Function Extra Args",
              "type": "array",
              "items": {},
              "description": "This field defines the arguments to be passed to the db function."
            }
          },
          "x-stoplight": {
            "id": "ckvd9vjtn4iz8"
          }
        },
        "UpsertPayload": {
          "title": "UpsertPayload",
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": {
                      "anyOf": [
                        {
                          "type": "boolean"
                        },
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {}
                        },
                        {
                          "type": "object"
                        }
                      ]
                    }
                  }
                },
                {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [
                      {
                        "type": "boolean"
                      },
                      {
                        "type": "string"
                      },
                      {
                        "type": "array",
                        "items": {}
                      },
                      {
                        "type": "object"
                      }
                    ]
                  }
                }
              ],
              "description": "This field takes a single packet or a micro-batch of records to insert."
            }
          },
          "x-stoplight": {
            "id": "111p5232uxn5p"
          }
        },
        "AWSFileAccessCredentials": {
          "title": "AWSFileAccessCredentials",
          "required": [
            "aws_access_key_id",
            "aws_secret_access_key",
            "region_name"
          ],
          "type": "object",
          "properties": {
            "aws_access_key_id": {
              "title": "Aws Access Key Id",
              "type": "string",
              "description": "This field references the access key to access the s3(IAM authentication) file store."
            },
            "aws_secret_access_key": {
              "title": "Aws Secret Access Key",
              "type": "string",
              "description": "This field references the secret key to access the s3(IAM authentication) file store."
            },
            "region_name": {
              "title": "Region Name",
              "type": "string",
              "description": "This field references the region of the s3 file store."
            }
          },
          "x-stoplight": {
            "id": "17sp8a8oq7xo3"
          }
        },
        "AzureFileAccessCredentials": {
          "title": "AzureFileAccessCredentials",
          "required": [
            "storage_account_name",
            "storage_account_key"
          ],
          "type": "object",
          "properties": {
            "storage_account_name": {
              "title": "Storage Account Name",
              "type": "string",
              "description": "This field references the storage account name to access the azure blob file store."
            },
            "storage_account_key": {
              "title": "Storage Account Key",
              "type": "string",
              "description": "This field references the storage account key to access the azure blob file store."
            }
          },
          "x-stoplight": {
            "id": "pqlnw6p8eodjv"
          }
        },
        "Cardinality": {
          "title": "Cardinality",
          "enum": [
            "one_to_one",
            "one_to_many",
            "many_to_many"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "4vgawsk9nwkde"
          }
        },
        "CategoricalFieldUnivariateSummary": {
          "title": "CategoricalFieldUnivariateSummary",
          "required": [
            "name",
            "type",
            "value_counts"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "description": "This field describes the name of the column in the dataset."
            },
            "type": {
              "title": "Type",
              "type": "string",
              "description": "This field describes the data type of the column in the dataset."
            },
            "zeroes": {
              "title": "Zeroes",
              "type": "integer",
              "description": "This field describes the number of zeroes for that column in the dataset.",
              "default": 0
            },
            "zeroes_percentage": {
              "title": "Zeroes Percentage",
              "type": "string",
              "description": "This field describes the percentage of zeroes for that column in the dataset."
            },
            "missing": {
              "title": "Missing",
              "type": "integer",
              "description": "This field describes the number of missing values for that column in the dataset.",
              "default": 0
            },
            "missing_percentage": {
              "title": "Missing Percentage",
              "type": "string",
              "description": "This field describes the percentage of missing values for that column in the dataset."
            },
            "size": {
              "title": "Size",
              "type": "string",
              "description": "This field describes the size of the column in the dataset."
            },
            "distinct": {
              "title": "Distinct",
              "type": "integer",
              "description": "This field describes the number of distinct values for that column in the dataset.",
              "default": 0
            },
            "distinct_percentage": {
              "title": "Distinct Percentage",
              "type": "string",
              "description": "This field describes the percentage of distinct values for that column in the dataset."
            },
            "value_counts": {
              "title": "Value Counts",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValueCounts"
              },
              "description": "This field is for columns in the data that have categorical values. This provides all unique values for that column in the dataset, and its corresponding counts"
            }
          },
          "x-stoplight": {
            "id": "ltaqp159u8w34"
          }
        },
        "CreateDataset": {
          "title": "CreateDataset",
          "required": [
            "dataset_name"
          ],
          "type": "object",
          "properties": {
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "This field describes the name of the dataset."
            },
            "dataset_schema": {
              "title": "Dataset Schema",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetField"
              },
              "description": "This field describes the schema of the dataset. It defines the rules and formats of the various fields in the dataset.",
              "default": []
            },
            "dataset_description": {
              "title": "Dataset Description",
              "type": "string",
              "description": "This field provides a description about the dataset."
            },
            "dataset_group": {
              "title": "Dataset Group",
              "type": "string",
              "description": "This field describes the name of the dataset group that the dataset belongs to."
            },
            "virtual": {
              "title": "Virtual",
              "type": "boolean",
              "description": "This field describes if a given access mode is a virtual access mode or not.",
              "default": false
            },
            "access_modes": {
              "title": "Access Modes",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetAccessModes"
              },
              "description": "This field describes the different access patterns and the corresponding polyglot storage modes of the dataset.",
              "default": []
            },
            "path_to_sample_data": {
              "title": "Path To Sample Data",
              "type": "string",
              "description": "This field references the path to the sample data for this dataset. The generated path will be a CSV file."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset is an internal dataset or not.",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset is a preset dataset or not.",
              "default": false
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the dataset.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "wempi2221d96t"
          }
        },
        "CreateDatasetGroup": {
          "title": "CreateDatasetGroup",
          "required": [
            "dataset_group_name"
          ],
          "type": "object",
          "properties": {
            "dataset_group_name": {
              "title": "Dataset Group Name",
              "type": "string",
              "description": "This field describes the name of the dataset group."
            },
            "dataset_group_description": {
              "title": "Dataset Group Description",
              "type": "string",
              "description": "This field provides a short description about the dataset group."
            },
            "datasets": {
              "title": "Datasets",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetEntity"
              },
              "description": "This field contains the list of identifiers for the selected datasets.",
              "default": []
            },
            "summarization_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupSummarizationStatus"
                }
              ],
              "description": "This field provides a status for the summarization of the dataset group."
            },
            "last_summarized_ts": {
              "title": "Last Summarized Ts",
              "type": "string",
              "description": "This field contains the timestamp of the last summarization of the dataset group."
            },
            "total_group_size": {
              "title": "Total Group Size",
              "type": "integer",
              "description": "This field describes the total size of the dataset group."
            },
            "number_of_datasets": {
              "title": "Number Of Datasets",
              "type": "integer",
              "description": "This field describes the total number of datasets that belong to the dataset group."
            },
            "number_of_records": {
              "title": "Number Of Records",
              "type": "integer",
              "description": "This field contains the timestamp of the last summarization of the dataset group."
            },
            "dataset_group_summary": {
              "title": "Dataset Group Summary",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupSummary"
                }
              ],
              "description": "This field provides a summary about the dataset group, and includes statistics about the different datasets that belong to this dataset group.",
              "default": {}
            },
            "relationship": {
              "title": "Relationship",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Relationship"
              },
              "description": "This field contains all the relationships between the datasets that belong to this dataset group.",
              "default": []
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the dataset group.",
              "default": []
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset group is an internal dataset group or not.",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset group is a preset dataset group or not.",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "u1cu3vhk3b2mb"
          }
        },
        "Dataset": {
          "title": "Dataset",
          "required": [
            "dataset_name",
            "created_ts",
            "updated_ts",
            "dataset_id",
            "mutability"
          ],
          "type": "object",
          "properties": {
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "This field describes the name of the dataset."
            },
            "dataset_schema": {
              "title": "Dataset Schema",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetField"
              },
              "description": "This field describes the schema of the dataset. It defines the rules and formats of the various fields in the dataset.",
              "default": []
            },
            "dataset_description": {
              "title": "Dataset Description",
              "type": "string",
              "description": "This field provides a description about the dataset."
            },
            "dataset_group": {
              "title": "Dataset Group",
              "type": "string",
              "description": "This field describes the name of the dataset group that the dataset belongs to."
            },
            "virtual": {
              "title": "Virtual",
              "type": "boolean",
              "description": "This field describes if a given access mode is a virtual access mode or not.",
              "default": false
            },
            "access_modes": {
              "title": "Access Modes",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetAccessModes"
              },
              "description": "This field describes the different access patterns and the corresponding polyglot storage modes of the dataset.",
              "default": []
            },
            "path_to_sample_data": {
              "title": "Path To Sample Data",
              "type": "string",
              "description": "This field references the path to the sample data for this dataset. The generated path will be a CSV file."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset is an internal dataset or not.",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset is a preset dataset or not.",
              "default": false
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the dataset.",
              "default": []
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the dataset."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the dataset."
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "This field describes the identifier of the dataset."
            },
            "dataset_summary": {
              "title": "Dataset Summary",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetSummary"
                }
              ],
              "description": "This field provides a summary about the dataset. The summary includes metadata about the dataset and univariate summary of all fields in the dataset.",
              "default": {}
            },
            "sampling_info": {
              "title": "Sampling Info",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SamplingInfo"
                }
              ],
              "description": "This field provides the configuration / strategy required for sampling the dataset during creation.",
              "default": {}
            },
            "profiling_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetProfilingStatus"
                }
              ],
              "description": "This field is a boolean that is used to describe if a dataset has been profiled or not.",
              "default": "NOT_PROFILED"
            },
            "sampling_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetSamplingStatus"
                }
              ],
              "description": "This field is a boolean that is used to describe if a dataset has been sampled or not.",
              "default": "NOT_SAMPLED"
            },
            "last_profiled_ts": {
              "title": "Last Profiled Ts",
              "type": "string",
              "description": "This field describes the last time when the dataset was profiled."
            },
            "last_sampled_ts": {
              "title": "Last Sampled Ts",
              "type": "string",
              "description": "This field describes the last time when the dataset was sampled."
            },
            "mutability": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetMutability"
                }
              ],
              "description": "This field describes the mutability of the dataset (i.e., how the records in the dataset can be modified)."
            },
            "number_of_records": {
              "title": "Number Of Records",
              "type": "integer",
              "description": "This field describes the number of records in the dataset."
            },
            "number_of_columns": {
              "title": "Number Of Columns",
              "type": "integer",
              "description": "This field describes the number of columns in the dataset."
            },
            "size": {
              "title": "Size",
              "type": "integer",
              "description": "This field describes the size of the dataset in bytes"
            },
            "number_of_access_modes": {
              "title": "Number Of Access Modes",
              "type": "integer",
              "description": "This field describes the number of access modes in the dataset."
            },
            "list_of_access_modes": {
              "title": "List Of Access Modes",
              "type": "array",
              "items": {},
              "description": "This field describes the list_of_access_modes"
            }
          },
          "x-stoplight": {
            "id": "hvw49pg8jbibc"
          }
        },
        "DatasetAccessModes": {
          "title": "DatasetAccessModes",
          "required": [
            "storage_type"
          ],
          "type": "object",
          "properties": {
            "storage_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorageType"
                }
              ],
              "description": "This field describes the type of storage where the dataset is stored."
            },
            "access_config": {
              "title": "Access Config",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FileAccessConfig"
                },
                {
                  "$ref": "#/components/schemas/RelationalDatabaseAccessConfig"
                },
                {
                  "$ref": "#/components/schemas/KeyValueAccessConfig"
                },
                {
                  "$ref": "#/components/schemas/SearchAccessConfig"
                }
              ],
              "description": "This field describes the access configuration / defines the access pattern of the dataset.",
              "default": {}
            },
            "consistency_schedule": {
              "title": "Consistency Schedule",
              "type": "string",
              "description": "This field describes the schedule of the consistency mode."
            }
          },
          "x-stoplight": {
            "id": "9m7ovskeiqrce"
          }
        },
        "DatasetColumnEntity": {
          "title": "DatasetColumnEntity",
          "required": [
            "field_name",
            "data_type"
          ],
          "type": "object",
          "properties": {
            "field_name": {
              "title": "Field Name",
              "type": "string",
              "description": "This field describes the name of the column in the dataset."
            },
            "data_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldDataType"
                }
              ],
              "description": "This field describes the data type of the column in the dataset."
            }
          },
          "x-stoplight": {
            "id": "dhn435cibwlv7"
          }
        },
        "DatasetCreateResponse": {
          "title": "DatasetCreateResponse",
          "required": [
            "status",
            "data",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the create API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "type": "string",
              "description": "This field describes the response of the create API. The output is a dataset ID that is a unique reference to the registered dataset."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Dataset"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset."
            }
          },
          "x-stoplight": {
            "id": "55x6vwu03lzqb"
          }
        },
        "DatasetDeleteResponse": {
          "title": "DatasetDeleteResponse",
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status.",
              "default": ""
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "owd2o78l71hls"
          }
        },
        "DatasetEntity": {
          "title": "DatasetEntity",
          "required": [
            "dataset_id"
          ],
          "type": "object",
          "properties": {
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "This field describes the identifier of the dataset."
            },
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "This field describes the name of the dataset."
            },
            "dataset_schema": {
              "title": "Dataset Schema",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetColumnEntity"
              },
              "description": "This field describes the dataset schema. It defines the rules and formats of the various columns in the dataset."
            }
          },
          "x-stoplight": {
            "id": "2nziqytfhczhm"
          }
        },
        "DatasetField": {
          "title": "DatasetField",
          "required": [
            "field_name",
            "data_type"
          ],
          "type": "object",
          "properties": {
            "field_name": {
              "title": "Field Name",
              "type": "string",
              "description": "This field describes the name of the column in the dataset."
            },
            "field_description": {
              "title": "Field Description",
              "type": "string",
              "description": "This field provides a short description about the corresponding column in the dataset."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the column in the dataset.",
              "default": []
            },
            "data_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FieldDataType"
                }
              ],
              "description": "This field describes the data type of the column in the dataset."
            },
            "primary_key": {
              "title": "Primary Key",
              "type": "boolean",
              "description": "This field indicates whether the field is a primary key for the corresponding dataset or not.",
              "default": false
            },
            "index_policy": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/IndexPolicy"
                }
              ],
              "description": "This field describes the index policy for the field in the dataset."
            },
            "index_params": {
              "title": "Index Params",
              "allOf": [
                {
                  "$ref": "#/components/schemas/IndexParams"
                }
              ],
              "description": "This field describes the index parameters for the field in the dataset.",
              "default": {}
            }
          },
          "x-stoplight": {
            "id": "g0wifcyson3xv"
          }
        },
        "DatasetGroup": {
          "title": "DatasetGroup",
          "required": [
            "dataset_group_name",
            "created_ts",
            "updated_ts",
            "dataset_group_id"
          ],
          "type": "object",
          "properties": {
            "dataset_group_name": {
              "title": "Dataset Group Name",
              "type": "string",
              "description": "This field describes the name of the dataset group."
            },
            "dataset_group_description": {
              "title": "Dataset Group Description",
              "type": "string",
              "description": "This field provides a short description about the dataset group."
            },
            "datasets": {
              "title": "Datasets",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetEntity"
              },
              "description": "This field contains the list of identifiers for the selected datasets.",
              "default": []
            },
            "summarization_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupSummarizationStatus"
                }
              ],
              "description": "This field provides a status for the summarization of the dataset group."
            },
            "last_summarized_ts": {
              "title": "Last Summarized Ts",
              "type": "string",
              "description": "This field contains the timestamp of the last summarization of the dataset group."
            },
            "total_group_size": {
              "title": "Total Group Size",
              "type": "integer",
              "description": "This field describes the total size of the dataset group."
            },
            "number_of_datasets": {
              "title": "Number Of Datasets",
              "type": "integer",
              "description": "This field describes the total number of datasets that belong to the dataset group."
            },
            "number_of_records": {
              "title": "Number Of Records",
              "type": "integer",
              "description": "This field contains the timestamp of the last summarization of the dataset group."
            },
            "dataset_group_summary": {
              "title": "Dataset Group Summary",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupSummary"
                }
              ],
              "description": "This field provides a summary about the dataset group, and includes statistics about the different datasets that belong to this dataset group.",
              "default": {}
            },
            "relationship": {
              "title": "Relationship",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Relationship"
              },
              "description": "This field contains all the relationships between the datasets that belong to this dataset group.",
              "default": []
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the dataset group.",
              "default": []
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset group is an internal dataset group or not.",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset group is a preset dataset group or not.",
              "default": false
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the dataset group."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the dataset group."
            },
            "dataset_group_id": {
              "title": "Dataset Group Id",
              "type": "string",
              "description": "This field describes the identifier of the dataset group."
            }
          },
          "x-stoplight": {
            "id": "84vjoilizd0nu"
          }
        },
        "DatasetGroupCreateResponse": {
          "title": "DatasetGroupCreateResponse",
          "required": [
            "status",
            "data",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the create API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "type": "string",
              "description": "This field describes the response of the create API. The output is a dataset group ID that is a unique reference to the registered dataset group."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroup"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset group."
            }
          },
          "x-stoplight": {
            "id": "ly53xeavfc2qj"
          }
        },
        "DatasetGroupDeleteResponse": {
          "title": "DatasetGroupDeleteResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "bnbopbnei3yyp"
          }
        },
        "DatasetGroupListingEntity": {
          "title": "DatasetGroupListingEntity",
          "required": [
            "created_ts",
            "updated_ts",
            "dataset_group_id",
            "dataset_group_name"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the dataset group."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the dataset group."
            },
            "dataset_group_id": {
              "title": "Dataset Group Id",
              "type": "string",
              "description": "This field describes the identifier of the dataset group."
            },
            "dataset_group_name": {
              "title": "Dataset Group Name",
              "type": "string",
              "description": "This field describes the name of the dataset group."
            },
            "number_of_datasets": {
              "title": "Number Of Datasets",
              "type": "integer",
              "description": "This field describes the total number of datasets that belong to the dataset group."
            },
            "total_group_size": {
              "title": "Total Group Size",
              "type": "integer",
              "description": "This field describes the total size of the dataset group."
            },
            "total_datasets_profiled": {
              "title": "Total Datasets Profiled",
              "type": "integer",
              "description": "This field contains the total number of datasets in the dataset group which have been profiled."
            },
            "total_datasets_with_descriptions": {
              "title": "Total Datasets With Descriptions",
              "type": "integer",
              "description": "This field contains the total number of datasets in the dataset group which have a dataset description."
            },
            "total_datasets_with_column_descriptions": {
              "title": "Total Datasets With Column Descriptions",
              "type": "integer",
              "description": "This field contains the total number of datasets in the dataset group which have a column-level description."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the dataset group.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "lgqoi2cgznkkc"
          }
        },
        "DatasetGroupListingResponse": {
          "title": "DatasetGroupListingResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all dataset groups registered and their corresponding dataset group IDs."
            }
          },
          "x-stoplight": {
            "id": "d7rzxm9fwuh6m"
          }
        },
        "DatasetGroupListingResponseValidation": {
          "title": "DatasetGroupListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of datasets that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetGroupListingEntity"
              },
              "description": "This field describes the list of datasets that have been registered."
            }
          },
          "x-stoplight": {
            "id": "2f02qfx3koz1q"
          }
        },
        "DatasetGroupReadResponse": {
          "title": "DatasetGroupReadResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroup"
                }
              ],
              "description": "This field describes the response data of the read API. The output contains all the metadata about the dataset group that was registered during creation."
            }
          },
          "x-stoplight": {
            "id": "suswy4gq89rqo"
          }
        },
        "DatasetGroupSummarizationResponse": {
          "title": "DatasetGroupSummarizationResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the summarize API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "This field describes a brief message about the API response."
            }
          },
          "x-stoplight": {
            "id": "lsc5urrtzri1x"
          }
        },
        "DatasetGroupSummarizationStatus": {
          "title": "DatasetGroupSummarizationStatus",
          "enum": [
            "SUMMARIZATION_IN_PROGRESS",
            "SUMMARIZED",
            "SUMMARIZATION_FAILED",
            "NOT_SUMMARIZED"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "0q7prbbxuwffk"
          }
        },
        "DatasetGroupSummarizationStatusResponse": {
          "title": "DatasetGroupSummarizationStatusResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the summarize status API's response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupSummarizationStatus"
                }
              ],
              "description": "This field provides a status for the summarization of the dataset group."
            }
          },
          "x-stoplight": {
            "id": "eynfa5li9oj9i"
          }
        },
        "DatasetGroupSummary": {
          "title": "DatasetGroupSummary",
          "type": "object",
          "properties": {
            "number_of_datasets": {
              "title": "Number Of Datasets",
              "type": "integer",
              "description": "This field describes the total number of datasets that belong to the dataset group."
            },
            "total_group_size": {
              "title": "Total Group Size",
              "type": "integer",
              "description": "This field describes the total size of the dataset group."
            },
            "total_datasets_profiled": {
              "title": "Total Datasets Profiled",
              "type": "integer",
              "description": "This field contains the total number of datasets in the dataset group which have been profiled."
            },
            "total_datasets_with_descriptions": {
              "title": "Total Datasets With Descriptions",
              "type": "integer",
              "description": "This field contains the total number of datasets in the dataset group which have a dataset description."
            },
            "total_datasets_with_column_descriptions": {
              "title": "Total Datasets With Column Descriptions",
              "type": "integer",
              "description": "This field contains the total number of datasets in the dataset group which have a column-level description."
            }
          },
          "x-stoplight": {
            "id": "of47uq69ix1ox"
          }
        },
        "DatasetGroupUpdateResponse": {
          "title": "DatasetGroupUpdateResponse",
          "required": [
            "status",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroup"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset group."
            }
          },
          "x-stoplight": {
            "id": "09ys1z0aisxf1"
          }
        },
        "DatasetListingEntity": {
          "title": "DatasetListingEntity",
          "required": [
            "created_ts",
            "updated_ts",
            "dataset_id",
            "dataset_name"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the dataset."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the dataset."
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "This field describes the identifier of the dataset."
            },
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "This field describes the name of the dataset."
            },
            "dataset_group": {
              "title": "Dataset Group",
              "type": "string",
              "description": "This field describes the name of the dataset group that the dataset belongs to."
            },
            "dataset_summary": {
              "title": "Dataset Summary",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetSummaryListing"
                }
              ],
              "description": "This field provides a summary about the dataset. The summary includes metadata about the dataset, a sample set of records that we can find in the data, and univariate summary of all fields in the dataset."
            },
            "profiling_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetProfilingStatus"
                }
              ],
              "description": "This field is a boolean that is used to describe if a dataset is profiled dataset or not.",
              "default": "NOT_PROFILED"
            },
            "sampling_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetSamplingStatus"
                }
              ],
              "description": "This field is a boolean that is used to describe if a dataset is profiled dataset or not.",
              "default": "NOT_SAMPLED"
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the dataset.",
              "default": []
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the dataset.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the dataset.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "nnml0t0zn8tfn"
          }
        },
        "DatasetListingResponse": {
          "title": "DatasetListingResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all datasets registered and their corresponding dataset IDs."
            }
          },
          "x-stoplight": {
            "id": "sqvnueq1qo2q9"
          }
        },
        "DatasetListingResponseValidation": {
          "title": "DatasetListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of datasets that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetListingEntity"
              },
              "description": "This field describes the list of datasets that have been registered."
            }
          },
          "x-stoplight": {
            "id": "whynmj2mw5r3w"
          }
        },
        "DatasetMutability": {
          "title": "DatasetMutability",
          "enum": [
            "immutable",
            "append",
            "upsert"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "d2s0h0hmj8r3h"
          }
        },
        "DatasetProfilingStatus": {
          "title": "DatasetProfilingStatus",
          "enum": [
            "NOT_PROFILED",
            "PROFILING_IN_PROGRESS",
            "PROFILING_FAILED",
            "PROFILED"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "9wqwfqfruazbp"
          }
        },
        "DatasetReadResponse": {
          "title": "DatasetReadResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Dataset"
                }
              ],
              "description": "This field describes the response data of the read API. The output contains all the metadata about the dataset that was registered during creation."
            }
          },
          "x-stoplight": {
            "id": "ghen6wf721oi8"
          }
        },
        "DatasetSamplingStatus": {
          "title": "DatasetSamplingStatus",
          "enum": [
            "NOT_SAMPLED",
            "SAMPLING_IN_PROGRESS",
            "SAMPLED",
            "SAMPLING_FAILED"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "xeymjt6eisvsk"
          }
        },
        "DatasetSummary": {
          "title": "DatasetSummary",
          "type": "object",
          "properties": {
            "number_of_records": {
              "title": "Number Of Records",
              "type": "integer",
              "description": "This field describes the number of records in the dataset.",
              "default": 0
            },
            "number_of_columns": {
              "title": "Number Of Columns",
              "type": "integer",
              "description": "This field describes the number of columns in the dataset.",
              "default": 0
            },
            "size": {
              "title": "Size",
              "type": "integer",
              "description": "This field describes the size of the dataset (in bytes).",
              "default": 0
            },
            "univariates": {
              "title": "Univariates",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/NumericalFieldUnivariateSummary"
                  },
                  {
                    "$ref": "#/components/schemas/FieldUnivariateSummary"
                  }
                ]
              },
              "description": "This field provides a univariate summary / statistical analysis for all fields in the dataset that can be valuable for descriptive statistics and exploratory data analysis.",
              "default": []
            },
            "schema_summary": {
              "title": "Schema Summary",
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              },
              "description": "This field provides a summary distribution of the number of columns per data type.",
              "default": {}
            }
          },
          "x-stoplight": {
            "id": "t84gnt1l69889"
          }
        },
        "DatasetSummaryListing": {
          "title": "DatasetSummaryListing",
          "type": "object",
          "properties": {
            "number_of_records": {
              "title": "Number Of Records",
              "type": "integer",
              "description": "This field describes the number of records in the dataset.",
              "default": 0
            },
            "number_of_columns": {
              "title": "Number Of Columns",
              "type": "integer",
              "description": "This field describes the number of columns in the dataset.",
              "default": 0
            },
            "size": {
              "title": "Size",
              "type": "string",
              "description": "This field describes the size of the dataset."
            }
          },
          "x-stoplight": {
            "id": "mfn6ex4rk3x8e"
          }
        },
        "DatasetUpdateField": {
          "title": "DatasetUpdateField",
          "required": [
            "field_name"
          ],
          "type": "object",
          "properties": {
            "field_name": {
              "title": "Field Name",
              "type": "string",
              "description": "This field describes the name of the column in the dataset."
            },
            "field_description": {
              "title": "Field Description",
              "type": "string",
              "description": "This field provides a short description about the corresponding column in the dataset."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the column in the dataset.",
              "default": []
            }
          },
          "additionalProperties": false,
          "x-stoplight": {
            "id": "z4etc1ynwp02q"
          }
        },
        "DatasetUpdateResponse": {
          "title": "DatasetUpdateResponse",
          "required": [
            "status",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Dataset"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset."
            }
          },
          "x-stoplight": {
            "id": "a96jvpo08uqut"
          }
        },
        "EntityUser": {
          "title": "EntityUser",
          "required": [
            "user_id"
          ],
          "type": "object",
          "properties": {
            "user_id": {
              "title": "User Id",
              "type": "string",
              "description": "This field describes the id of the user."
            },
            "name": {
              "title": "Name",
              "type": "string",
              "description": "This field describes the name of the user"
            }
          },
          "x-stoplight": {
            "id": "onrzp0e3rl2d0"
          }
        },
        "EntityUserGroup": {
          "title": "EntityUserGroup",
          "required": [
            "user_group_id"
          ],
          "type": "object",
          "properties": {
            "user_group_id": {
              "title": "User Group Id",
              "type": "string",
              "description": "This field describes the group id of the user."
            },
            "name": {
              "title": "Name",
              "type": "string",
              "description": "This field describes the name of the user"
            }
          },
          "x-stoplight": {
            "id": "lba2mc0nafs7v"
          }
        },
        "FieldDataType": {
          "title": "FieldDataType",
          "enum": [
            "integer",
            "bigint",
            "string",
            "float",
            "bool",
            "datetime",
            "array",
            "object"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "bozowhyvtxsjc"
          }
        },
        "FileAccessConfig": {
          "title": "FileAccessConfig",
          "required": [
            "file_format"
          ],
          "type": "object",
          "properties": {
            "path_to_data": {
              "title": "Path To Data",
              "type": "string",
              "description": "This field references the path to the raw data for this dataset. For non-virtual datasets, this can be an input to an existing file. If a new file needs to be created, then a new path is generated."
            },
            "file_format": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FileFormat"
                }
              ],
              "description": "This field references the file format of the dataset."
            },
            "file_store": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FileStores"
                }
              ],
              "description": "This field references the file store of the dataset, and needs to be passed only for virtual datasets."
            },
            "credentials": {
              "title": "Credentials",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AWSFileAccessCredentials"
                },
                {
                  "$ref": "#/components/schemas/AzureFileAccessCredentials"
                },
                {
                  "$ref": "#/components/schemas/GCPFileAccessCredentials"
                }
              ],
              "description": "This field references the credentials to access the file store, and needs to be passed only for virtual datasets."
            }
          },
          "x-stoplight": {
            "id": "onugdr71esct9"
          }
        },
        "FileFormat": {
          "title": "FileFormat",
          "enum": [
            "csv",
            "parquet",
            "json",
            "delta"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "3wzhkoxnunccf"
          }
        },
        "FileStores": {
          "title": "FileStores",
          "enum": [
            "s3",
            "gcs",
            "azure_blob"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "2oi93298wqgnz"
          }
        },
        "GCPFileAccessCredentials": {
          "title": "GCPFileAccessCredentials",
          "required": [
            "access_key_id",
            "secret_access_key"
          ],
          "type": "object",
          "properties": {
            "access_key_id": {
              "title": "Access Key Id",
              "type": "string",
              "description": "This field references the access key to access the gcp(HMAC authetication) file store."
            },
            "secret_access_key": {
              "title": "Secret Access Key",
              "type": "string",
              "description": "This field references the secret key to access the gcp(HMAC authetication) file store."
            }
          },
          "x-stoplight": {
            "id": "ajb47xv0jj526"
          }
        },
        "KeyValueAccessConfig": {
          "title": "KeyValueAccessConfig",
          "type": "object",
          "properties": {
            "cosmos_connection_string": {
              "title": "Cosmos Connection String",
              "type": "string",
              "description": "This field references the connection URL to Cosmos DB."
            },
            "database": {
              "title": "Database",
              "type": "string",
              "description": "This field references the database name in Cosmos DB."
            },
            "container": {
              "title": "Container",
              "type": "string",
              "description": "This field references the container name in Cosmos DB."
            }
          },
          "x-stoplight": {
            "id": "d3mz5na9zmrkv"
          }
        },
        "NumericalFieldUnivariateSummary": {
          "title": "NumericalFieldUnivariateSummary",
          "required": [
            "name",
            "type",
            "mean",
            "median",
            "max",
            "min",
            "stddev"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "description": "This field describes the name of the column in the dataset."
            },
            "type": {
              "title": "Type",
              "type": "string",
              "description": "This field describes the data type of the column in the dataset."
            },
            "zeroes": {
              "title": "Zeroes",
              "type": "integer",
              "description": "This field describes the number of zeroes for that column in the dataset.",
              "default": 0
            },
            "zeroes_percentage": {
              "title": "Zeroes Percentage",
              "type": "string",
              "description": "This field describes the percentage of zeroes for that column in the dataset."
            },
            "missing": {
              "title": "Missing",
              "type": "integer",
              "description": "This field describes the number of missing values for that column in the dataset.",
              "default": 0
            },
            "missing_percentage": {
              "title": "Missing Percentage",
              "type": "string",
              "description": "This field describes the percentage of missing values for that column in the dataset."
            },
            "size": {
              "title": "Size",
              "type": "string",
              "description": "This field describes the size of the column in the dataset."
            },
            "distinct": {
              "title": "Distinct",
              "type": "integer",
              "description": "This field describes the number of distinct values for that column in the dataset.",
              "default": 0
            },
            "distinct_percentage": {
              "title": "Distinct Percentage",
              "type": "string",
              "description": "This field describes the percentage of distinct values for that column in the dataset."
            },
            "mean": {
              "title": "Mean",
              "type": "number",
              "description": "This field is for columns in the data that have numerical values. This provides an average value of all records for that column in the dataset."
            },
            "median": {
              "title": "Median",
              "type": "number",
              "description": "TThis field is for columns in the data that have numerical values. This provides a median value of all records for that column in the dataset."
            },
            "max": {
              "title": "Max",
              "type": "number",
              "description": "This field is for columns in the data that have numerical values. This provides the maximum value of all records for that column in the dataset."
            },
            "min": {
              "title": "Min",
              "type": "number",
              "description": "This field is for columns in the data that have numerical values. This provides a minimum value of all records for that column in the dataset."
            },
            "stddev": {
              "title": "Stddev",
              "type": "number",
              "description": "This field is for columns in the data that have numerical values. This provides the standard deviation of all records for that column in the dataset."
            }
          },
          "x-stoplight": {
            "id": "npxk7rybebl2v"
          }
        },
        "PartialUpdateDataset": {
          "title": "PartialUpdateDataset",
          "type": "object",
          "properties": {
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "This field describes the name of the dataset."
            },
            "dataset_description": {
              "title": "Dataset Description",
              "type": "string",
              "description": "This field provides a description about the dataset."
            },
            "dataset_schema": {
              "title": "Dataset Schema",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetUpdateField"
              },
              "description": "This field describes the schema of the dataset. It defines the rules and formats of the various fields in the dataset.",
              "default": []
            },
            "dataset_summary": {
              "title": "Dataset Summary",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetSummary"
                }
              ],
              "description": "This field provides a summary about the dataset. The summary includes metadata about the dataset and univariate summary of all fields in the dataset."
            },
            "dataset_group": {
              "title": "Dataset Group",
              "type": "string",
              "description": "This field describes the name of the dataset group that the dataset belongs to."
            },
            "access_modes": {
              "title": "Access Modes",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpdateDatasetAccessModes"
                }
              ],
              "description": "This field describes the updates to the storage details of the dataset."
            },
            "sampling_info": {
              "title": "Sampling Info",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SamplingInfo"
                }
              ],
              "description": "This field provides the configuration / strategy required for sampling the dataset during creation."
            },
            "path_to_sample_data": {
              "title": "Path To Sample Data",
              "type": "string",
              "description": "This field references the path to the sample data (a CSV file) for this dataset."
            },
            "profiling_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetProfilingStatus"
                }
              ],
              "description": "This field is a boolean that is used to describe if a dataset has been profiled or not."
            },
            "sampling_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetSamplingStatus"
                }
              ],
              "description": "This field is a boolean that is used to describe if a dataset has been sampled or not."
            },
            "sync_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetSynchronizeStatus"
                }
              ],
              "description": "This field is a enum that is used to describe the latest sync run status"
            },
            "next_sync_ts": {
              "title": "Next Sync Ts",
              "type": "string",
              "description": "This field describes the next time when the dataset is to be synced"
            },
            "last_profiled_ts": {
              "title": "Last Profiled Ts",
              "type": "string",
              "description": "This field describes the last time when the dataset was profiled."
            },
            "last_sampled_ts": {
              "title": "Last Sampled Ts",
              "type": "string",
              "description": "This field describes the last time when the dataset was sampled."
            },
            "last_synchronized_ts": {
              "title": "Last Synchronized Ts",
              "type": "string",
              "description": "This field describes the last time when the dataset was synchronized."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset is an internal dataset or not."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset is a preset dataset or not."
            },
            "tags": {
              "title": "Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpdateDatasetTags"
                }
              ],
              "description": "This field describes updates to the tags that are associated to the dataset."
            },
            "number_of_records": {
              "title": "Number Of Records",
              "type": "integer",
              "description": "This field describes the number of records in the dataset."
            },
            "number_of_columns": {
              "title": "Number Of Columns",
              "type": "integer",
              "description": "This field describes the number of columns in the dataset."
            },
            "size": {
              "title": "Size",
              "type": "integer",
              "description": "This field describes the size of the dataset in bytes"
            },
            "number_of_access_modes": {
              "title": "Number Of Access Modes",
              "type": "integer",
              "description": "This field describes the number of access modes in the dataset."
            },
            "list_of_access_modes": {
              "title": "List Of Access Modes",
              "type": "array",
              "items": {},
              "description": "This field describes the list_of_access_modes"
            }
          },
          "x-stoplight": {
            "id": "gr4w8qnjgmbro"
          }
        },
        "PartialUpdateDatasetGroup": {
          "title": "PartialUpdateDatasetGroup",
          "type": "object",
          "properties": {
            "dataset_group_name": {
              "title": "Dataset Group Name",
              "type": "string",
              "description": "This field describes the name of the dataset group."
            },
            "dataset_group_description": {
              "title": "Dataset Group Description",
              "type": "string",
              "description": "This field provides a short description about the dataset group."
            },
            "datasets": {
              "title": "Datasets",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpdateDatasetEntity"
                }
              ],
              "description": "This field describes the updates to the datasets that are part of the dataset group."
            },
            "summarization_status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupSummarizationStatus"
                }
              ],
              "description": "This field provides a status for the summarization of the dataset group."
            },
            "last_summarized_ts": {
              "title": "Last Summarized Ts",
              "type": "string",
              "description": "This field contains the timestamp of the last summarization of the dataset group."
            },
            "total_group_size": {
              "title": "Total Group Size",
              "type": "integer",
              "description": "This field describes the total size of the dataset group."
            },
            "number_of_datasets": {
              "title": "Number Of Datasets",
              "type": "integer",
              "description": "This field describes the total number of datasets that belong to the dataset group."
            },
            "number_of_records": {
              "title": "Number Of Records",
              "type": "integer",
              "description": "This field contains the timestamp of the last summarization of the dataset group."
            },
            "total_datasets_with_column_descriptions": {
              "title": "Total Datasets With Column Descriptions",
              "type": "integer",
              "description": "This field contains the number of datasets with column descriptions in the dataset group."
            },
            "total_datasets_with_descriptions": {
              "title": "Total Datasets With Descriptions",
              "type": "integer",
              "description": "This field contains the number of datasets with descriptions in the dataset group.."
            },
            "total_datasets_profiled": {
              "title": "Total Datasets Profiled",
              "type": "integer",
              "description": "This field contains the number of datasets profiled in the dataset group.."
            },
            "dataset_group_summary": {
              "title": "Dataset Group Summary",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetGroupSummary"
                }
              ],
              "description": "This field provides a summary about the dataset group, and includes statistics about the different datasets that belong to this dataset group."
            },
            "relationship": {
              "title": "Relationship",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpdateRelationship"
                }
              ],
              "description": "This field contains all the relationships between the datasets that belong to this dataset group."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset group is an internal dataset group or not."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a dataset group is a preset dataset group or not."
            },
            "tags": {
              "title": "Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpdateDatasetGroupTags"
                }
              ],
              "description": "This field describes updates to the tags that are associated to the dataset group."
            }
          },
          "x-stoplight": {
            "id": "z4ckz2du7xlmc"
          }
        },
        "RelationalDatabaseAccessConfig": {
          "title": "RelationalDatabaseAccessConfig",
          "required": [
            "table_name",
            "schema_name"
          ],
          "type": "object",
          "properties": {
            "db_host": {
              "title": "Db Host",
              "type": "string",
              "description": "This field references the host of the relational database."
            },
            "db_port": {
              "title": "Db Port",
              "type": "integer",
              "description": "This field references the port of the relational database."
            },
            "db_user": {
              "title": "Db User",
              "type": "string",
              "description": "This field references the user of the relational database."
            },
            "db_password": {
              "title": "Db Password",
              "type": "string",
              "description": "This field references the password of the relational database."
            },
            "db_name": {
              "title": "Db Name",
              "type": "string",
              "description": "This field references the database name in the relational database."
            },
            "table_name": {
              "title": "Table Name",
              "type": "string",
              "description": "This field references the table name in the relational database."
            },
            "schema_name": {
              "title": "Schema Name",
              "type": "string",
              "description": "This field references the schema name in the relational database."
            }
          },
          "x-stoplight": {
            "id": "tn3p8bfqp9cwl"
          }
        },
        "Relationship": {
          "title": "Relationship",
          "required": [
            "primary_dataset",
            "secondary_dataset",
            "primary_dataset_field",
            "secondary_dataset_field",
            "association"
          ],
          "type": "object",
          "properties": {
            "primary_dataset": {
              "title": "Primary Dataset",
              "type": "string",
              "description": "This field contains the primary dataset for the relationship."
            },
            "secondary_dataset": {
              "title": "Secondary Dataset",
              "type": "string",
              "description": "This field contains the secondary dataset for the relationship."
            },
            "primary_dataset_field": {
              "title": "Primary Dataset Field",
              "type": "string",
              "description": "This field describes the field of the primary dataset which is used in the relationship definition."
            },
            "secondary_dataset_field": {
              "title": "Secondary Dataset Field",
              "type": "string",
              "description": "This field describes the field of the secondary dataset which is used in the relationship definition."
            },
            "association": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Cardinality"
                }
              ],
              "description": "This field describes the cardinality of the defined relationship."
            }
          },
          "x-stoplight": {
            "id": "h6jurhimclq63"
          }
        },
        "SamplingInfo": {
          "title": "SamplingInfo",
          "type": "object",
          "properties": {
            "sampling_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SamplingTypes"
                }
              ],
              "description": "This field describes the strategy used to sample this dataset."
            },
            "sample_size": {
              "title": "Sample Size",
              "exclusiveMaximum": 10000,
              "minimum": 1,
              "type": "integer",
              "description": "This field provides the number of records that are part of the sample."
            },
            "sample_on_create": {
              "title": "Sample On Create",
              "type": "boolean",
              "description": "This field specifies if the provided sampling strategy needs to be invoked during creation of the dataset.",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "8j6xyaxy4ykq6"
          }
        },
        "SamplingTypes": {
          "title": "SamplingTypes",
          "enum": [
            "random",
            "top",
            "bottom"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "vjbaeidao9csj"
          }
        },
        "SearchAccessConfig": {
          "title": "SearchAccessConfig",
          "type": "object",
          "properties": {
            "es_host": {
              "title": "Es Host",
              "type": "string",
              "description": "This field references the host of the Elasticsearch."
            },
            "es_port": {
              "title": "Es Port",
              "type": "integer",
              "description": "This field references the port of the Elasticsearch."
            },
            "es_username": {
              "title": "Es Username",
              "type": "string",
              "description": "This field references the username of the Elasticsearch."
            },
            "es_password": {
              "title": "Es Password",
              "type": "string",
              "description": "This field references the password of the Elasticsearch."
            },
            "es_index": {
              "title": "Es Index",
              "type": "string",
              "description": "This field references the index name in the Elasticsearch."
            },
            "dataset_schema": {
              "title": "Dataset Schema",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchField"
              },
              "description": "This field describes the schema of the dataset to override for elastic search. It defines the rules and formats of the various fields in the dataset.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "0wmi6xjdc8smf"
          }
        },
        "SearchField": {
          "title": "SearchField",
          "type": "object",
          "properties": {
            "field_name": {
              "title": "Field Name",
              "type": "string",
              "description": "This is a field name to override from dataset schema specific to elastic search."
            },
            "data_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchFieldDataType"
                }
              ],
              "description": "This field is to specify the datatype for Elasticsearch."
            },
            "search": {
              "title": "Search",
              "type": "boolean",
              "description": "This field is to enable/disable search on Elasticsearch."
            },
            "index": {
              "title": "Index",
              "type": "boolean",
              "description": "This field is to enable/disable index on Elasticsearch."
            },
            "facet": {
              "title": "Facet",
              "type": "boolean",
              "description": "This field is to enable/disable facet on Elasticsearch."
            }
          },
          "x-stoplight": {
            "id": "qrz9smb01n9sb"
          }
        },
        "SearchFieldDataType": {
          "title": "SearchFieldDataType",
          "enum": [
            "integer",
            "float",
            "dict",
            "date",
            "keyword",
            "object",
            "bool"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "xiprrjirol7mq"
          }
        },
        "StorageType": {
          "title": "StorageType",
          "enum": [
            "file",
            "relational_database",
            "key_value",
            "search"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "tx9l1j3yy0cc3"
          }
        },
        "UpdateDatasetAccessModes": {
          "title": "UpdateDatasetAccessModes",
          "type": "object",
          "properties": {
            "remove": {
              "title": "Remove",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetAccessModes"
              },
              "description": "This field describes all the existing access pattern definitions that need to be removed from the dataset as part of the update.",
              "default": []
            },
            "update": {
              "title": "Update",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetAccessModes"
              },
              "description": "This field describes all the updates for existing access pattern definitions in the dataset.",
              "default": []
            }
          },
          "additionalProperties": false,
          "x-stoplight": {
            "id": "4kxscpnp3yqfi"
          }
        },
        "UpdateDatasetEntity": {
          "title": "UpdateDatasetEntity",
          "type": "object",
          "properties": {
            "add": {
              "title": "Add",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetEntity"
              },
              "description": "This field describes all the new datasets that need to be added to the dataset group as part of the update.",
              "default": []
            },
            "remove": {
              "title": "Remove",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetEntity"
              },
              "description": "This field describes all the existing datasets that need to be removed from the dataset group as part of the update.",
              "default": []
            },
            "update": {
              "title": "Update",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetEntity"
              },
              "description": "This field describes all the updates for existing datasets in the dataset group.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "4nkq0qekumd0a"
          }
        },
        "UpdateDatasetGroupTags": {
          "title": "UpdateDatasetGroupTags",
          "type": "object",
          "properties": {
            "add": {
              "title": "Add",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes all the new tags that need to be added to the dataset group as part of the update.",
              "default": []
            },
            "remove": {
              "title": "Remove",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes all the existing tags that need to be removed from the dataset group as part of the update.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "6jjzxhgtwe726"
          }
        },
        "UpdateDatasetTags": {
          "title": "UpdateDatasetTags",
          "type": "object",
          "properties": {
            "add": {
              "title": "Add",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes all the new tags that need to be added to the dataset as part of the update.",
              "default": []
            },
            "remove": {
              "title": "Remove",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes all the existing tags that need to be removed from the dataset as part of the update.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "c7k8chto65yyq"
          }
        },
        "UpdateRelationship": {
          "title": "UpdateRelationship",
          "type": "object",
          "properties": {
            "add": {
              "title": "Add",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Relationship"
              },
              "description": "This field describes all the new datasets that need to be added to the dataset group as part of the update.",
              "default": []
            },
            "remove": {
              "title": "Remove",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Relationship"
              },
              "description": "This field describes all the existing datasets that need to be removed from the dataset group as part of the update.",
              "default": []
            },
            "update": {
              "title": "Update",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Relationship"
              },
              "description": "This field describes all the updates for existing relationships in the dataset group.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "qeiivzfri8hes"
          }
        },
        "ValueCounts": {
          "title": "ValueCounts",
          "required": [
            "value",
            "count"
          ],
          "type": "object",
          "properties": {
            "value": {
              "title": "Value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ],
              "description": "This field describes a unique value that is part of a column in the dataset."
            },
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the number of occurences of that corresponding value in the dataset."
            }
          },
          "x-stoplight": {
            "id": "0sru0ejnnh51a"
          }
        },
        "app__schemas__dataset_groups__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "created_ts",
            "updated_ts",
            "dataset_group_id",
            "dataset_group_name",
            "dataset_group_description",
            "summarization_status",
            "number_of_datasets",
            "total_group_size",
            "total_datasets_profiled",
            "total_datasets_with_descriptions",
            "total_datasets_with_column_descriptions",
            "tags",
            "last_summarized_ts",
            "number_of_records"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "p69e44uc0ulee"
          }
        },
        "app__schemas__datasets__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "dataset_name",
            "dataset_group",
            "created_ts",
            "updated_ts",
            "last_profiled_ts",
            "last_sampled_ts",
            "profiling_status",
            "sampling_status",
            "virtual",
            "tags",
            "dataset_id",
            "size",
            "number_of_columns",
            "number_of_records",
            "created_by",
            "updated_by",
            "number_of_access_modes",
            "list_of_access_modes",
            "last_synchronized_ts",
            "sync_status",
            "next_sync_ts"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "q9uy149feod23"
          }
        },
        "Body_create_node_api_v1_nodes__post": {
          "title": "Body_create_node_api_v1_nodes__post",
          "required": [
            "node_config",
            "workflow_config"
          ],
          "type": "object",
          "properties": {
            "node_config": {
              "$ref": "#/components/schemas/Node"
            },
            "workflow_config": {
              "$ref": "#/components/schemas/Workflow"
            }
          },
          "x-stoplight": {
            "id": "uplj42x6ay6z2"
          }
        },
        "Body_deploy_workflow_v2_api_v1_workflow_deploy_v2_post": {
          "title": "Body_deploy_workflow_v2_api_v1_workflow_deploy_v2_post",
          "required": [
            "nodes",
            "workflow",
            "workflow_form",
            "workflow_type"
          ],
          "type": "object",
          "properties": {
            "nodes": {
              "title": "Nodes",
              "type": "object"
            },
            "workflow": {
              "title": "Workflow",
              "type": "array",
              "items": {}
            },
            "workflow_form": {
              "title": "Workflow Form",
              "type": "array",
              "items": {}
            },
            "workflow_type": {
              "title": "Workflow Type",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "4fo4iwkztd091"
          }
        },
        "Body_process_packet_workflow_api_v1_workflow_process_packet_post": {
          "title": "Body_process_packet_workflow_api_v1_workflow_process_packet_post",
          "required": [
            "workflow",
            "packet"
          ],
          "type": "object",
          "properties": {
            "workflow": {
              "$ref": "#/components/schemas/WorkflowSpeedrunFromID"
            },
            "packet": {
              "title": "Packet",
              "type": "object"
            }
          },
          "x-stoplight": {
            "id": "0ndxxsxq2xnsb"
          }
        },
        "Body_update_node_api_v1_nodes__node_id__put": {
          "title": "Body_update_node_api_v1_nodes__node_id__put",
          "required": [
            "node_config",
            "workflow_config"
          ],
          "type": "object",
          "properties": {
            "node_config": {
              "$ref": "#/components/schemas/Node"
            },
            "workflow_config": {
              "$ref": "#/components/schemas/Workflow"
            }
          },
          "x-stoplight": {
            "id": "4a0dxfnqmgaye"
          }
        },
        "ComputeDataset": {
          "title": "ComputeDataset",
          "required": [
            "dataset_name",
            "dataset",
            "client",
            "enable_s3_push",
            "use_s3_path"
          ],
          "type": "object",
          "properties": {
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "This field describes the name that can be associated to the dataset node. This name will act as the alias for the dataset itself when building data workflows in the underlying queries that are generated."
            },
            "dataset": {
              "title": "Dataset",
              "type": "string",
              "description": "It is a different key that is required for running workflows in spark through the starfire library. We will be merging this to the dataset field in subsequent releases."
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "This field describes the identifier of the dataset. This is the entry that will be in the dataset registry."
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "dataset_path": {
              "title": "Dataset Path",
              "type": "string",
              "description": "This field describes the path that can be used to access the raw data in the dataset node.",
              "default": ""
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding dataset node. If it is not present, it will be created.",
              "default": ""
            },
            "persist": {
              "title": "Persist",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the data.",
              "default": false
            },
            "path_type": {
              "title": "Path Type",
              "type": "string",
              "description": "This field describes the type of path that can be specified in the dataset_path field. For data in delta tables it will be a directory path, and for csvs it will be a specific file path in any file system.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "file_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FileType"
                }
              ],
              "description": "This field describes the file_type of the data in the dataset.",
              "default": "delta"
            },
            "enable_s3_push": {
              "title": "Enable S3 Push",
              "type": "boolean",
              "description": "This field enables push and pull policy for graph processing. If it is not present, it will be created."
            },
            "use_s3_path": {
              "title": "Use S3 Path",
              "type": "boolean",
              "description": "This field enables push and s3 policy for graph processing. If it is not present, it will be created."
            },
            "persist_document": {
              "title": "Persist Document",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the documents.",
              "default": false
            },
            "node_type": {
              "title": "Node Type",
              "type": "string",
              "description": "This field describes the node name for type",
              "default": ""
            },
            "node_name": {
              "title": "Node Name",
              "type": "string",
              "description": "This field describes the node name for cloning",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "4ps0oum1ch8gm"
          }
        },
        "ConnectionNode": {
          "title": "ConnectionNode",
          "required": [
            "connection_id"
          ],
          "type": "object",
          "properties": {
            "connection_id": {
              "title": "Connection Id",
              "type": "string",
              "description": "This field describes the identifier of connector hub's connection"
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding connection node. If it is not present, it will be created.",
              "default": ""
            },
            "connection_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ConnectionType"
                }
              ],
              "description": "This field describes the connection_type of the corresponding connection node.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "jw6kg7litrdfl"
          }
        },
        "ConnectionType": {
          "title": "ConnectionType",
          "enum": [
            "ingress",
            "egress"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "ijxg91ppxihmm"
          }
        },
        "CustomCodeNode": {
          "title": "CustomCodeNode",
          "required": [
            "query_type",
            "query_value"
          ],
          "type": "object",
          "properties": {
            "query_type": {
              "title": "Query Type",
              "type": "string",
              "description": "This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. "
            },
            "query_value": {
              "title": "Query Value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "object"
                }
              ],
              "description": "This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation."
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding transformation node. If it is not present, it will be created.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "persist": {
              "title": "Persist",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the data.",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "8g6rn2x3m21ad"
          }
        },
        "DatasetNode": {
          "title": "DatasetNode",
          "required": [
            "dataset_name",
            "dataset",
            "client"
          ],
          "type": "object",
          "properties": {
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "This field describes the name that can be associated to the dataset node. This name will act as the alias for the dataset itself when building data workflows in the underlying queries that are generated."
            },
            "dataset": {
              "title": "Dataset",
              "type": "string",
              "description": "It is a different key that is required for running workflows in spark through the starfire library. We will be merging this to the dataset field in subsequent releases."
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "This field describes the identifier of the dataset. This is the entry that will be in the dataset registry."
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "dataset_path": {
              "title": "Dataset Path",
              "type": "string",
              "description": "This field describes the path that can be used to access the raw data in the dataset node.",
              "default": ""
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding dataset node. If it is not present, it will be created.",
              "default": ""
            },
            "persist": {
              "title": "Persist",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the data.",
              "default": false
            },
            "path_type": {
              "title": "Path Type",
              "type": "string",
              "description": "This field describes the type of path that can be specified in the dataset_path field. For data in delta tables it will be a directory path, and for csvs it will be a specific file path in any file system.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "file_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FileType"
                }
              ],
              "description": "This field describes the file_type of the data in the dataset.",
              "default": "delta"
            },
            "mode": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/WriteMode"
                }
              ],
              "description": "This field describes the mode to persist the data in the dataset.",
              "default": "overwrite"
            }
          },
          "x-stoplight": {
            "id": "iozqd85890qfo"
          }
        },
        "DeployParams": {
          "title": "DeployParams",
          "type": "object",
          "properties": {
            "engine": {
              "title": "Engine",
              "type": "string",
              "description": "Specifies the engine on which workflow has to be deployed."
            },
            "schedule_interval": {
              "title": "Schedule Interval",
              "type": "string",
              "description": "Setup the schedule of the dag, if not specified its by default set to 2:30 PM run"
            }
          },
          "x-stoplight": {
            "id": "b1md5w33oz05y"
          }
        },
        "DeploymentConfig": {
          "title": "DeploymentConfig",
          "required": [
            "tag",
            "config"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "string",
              "description": "This field describes the ID of the deployment."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the deployment API response status."
            },
            "tag": {
              "title": "Tag",
              "type": "string",
              "description": "This field describes the tag of the deployment."
            },
            "config": {
              "title": "Config",
              "type": "object",
              "description": "This field describes the config of the deployment."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            }
          },
          "x-stoplight": {
            "id": "w3wjjb9qfzgoc"
          }
        },
        "DestinationNode": {
          "title": "DestinationNode",
          "required": [
            "destination_id"
          ],
          "type": "object",
          "properties": {
            "destination_id": {
              "title": "Destination Id",
              "type": "string",
              "description": "This field describes the identifier of connector hub's destination"
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding destination node. If it is not present, it will be created.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "mhkzptxwx7t4g"
          }
        },
        "FieldMapping": {
          "title": "FieldMapping",
          "required": [
            "field_in_data",
            "field_it_should_be"
          ],
          "type": "object",
          "properties": {
            "field_in_data": {
              "title": "Field In Data",
              "type": "string"
            },
            "field_it_should_be": {
              "title": "Field It Should Be",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "cj3zzua4ywxb7"
          }
        },
        "FileInfo": {
          "title": "FileInfo",
          "required": [
            "file_type",
            "file_path"
          ],
          "type": "object",
          "properties": {
            "file_type": {
              "title": "File Type",
              "type": "string",
              "description": "type of file delta, parquet, csv"
            },
            "file_path": {
              "title": "File Path",
              "type": "string",
              "description": "path to the file"
            },
            "mode": {
              "title": "Mode",
              "type": "string",
              "description": "Mode used to write the file, append, overwrite",
              "default": "overwrite"
            },
            "df_type": {
              "title": "Df Type",
              "type": "string"
            },
            "field_mapping": {
              "title": "Field Mapping",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FieldMapping"
              },
              "description": "field mapping to rename columns of some table",
              "default": []
            },
            "partitionBy": {
              "title": "Partitionby",
              "type": "string",
              "description": "partition the data before saving using this column",
              "default": ""
            },
            "overwriteSchema": {
              "title": "Overwriteschema",
              "type": "string",
              "description": "overwrite the schema or not",
              "default": "false"
            }
          },
          "x-stoplight": {
            "id": "l8x2xcuhhyyh9"
          }
        },
        "FileType": {
          "title": "FileType",
          "enum": [
            "csv",
            "delta",
            "parquet",
            "json"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "h7716yg9yivxe"
          }
        },
        "IDPNode": {
          "title": "IDPNode",
          "type": "object",
          "properties": {
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding blur detection node. If it is not present, it will be created.",
              "default": ""
            },
            "query_type": {
              "title": "Query Type",
              "type": "string",
              "description": "This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. "
            },
            "query_value": {
              "title": "Query Value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "object"
                }
              ],
              "description": "This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation."
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "input_columns": {
              "title": "Input Columns",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the field which has image url of the corresponding node. If it is not present, it will be created.",
              "default": []
            },
            "enable_s3_push": {
              "title": "Enable S3 Push",
              "type": "boolean",
              "description": "This field enables push and pull policy for graph processing. If it is not present, it will be created.",
              "default": false
            },
            "persist": {
              "title": "Persist",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the data.",
              "default": false
            },
            "mapping": {
              "title": "Mapping",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "This field has the mapping of the fields that needs to mapped beefore returned",
              "default": {}
            },
            "persist_document": {
              "title": "Persist Document",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the documents.",
              "default": false
            },
            "model_path": {
              "title": "Model Path",
              "type": "string",
              "description": "This field describes the s3 pickle path for learn inference node",
              "default": ""
            },
            "node_type": {
              "title": "Node Type",
              "type": "string",
              "description": "This field describes the node type for cloning",
              "default": ""
            },
            "node_name": {
              "title": "Node Name",
              "type": "string",
              "description": "This field describes the node name for cloning",
              "default": ""
            },
            "expressions": {
              "title": "Expressions",
              "type": "object",
              "description": "This field is describes the expressions which are evaluted in metrics node",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "jln97qgf4rlkf"
          }
        },
        "Job": {
          "title": "Job",
          "type": "object",
          "properties": {
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "job_name": {
              "title": "Job Name",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the current status of the job",
              "default": "IN_PROGRESS"
            },
            "packet_id": {
              "title": "Packet Id",
              "type": "string",
              "description": "This field describes the packet_id/run_id corresponding to the job."
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__jobs__WorkflowTypes"
                }
              ],
              "description": "This field describes the type of base workflow.",
              "default": "idp"
            },
            "node_level_status": {
              "title": "Node Level Status",
              "type": "array",
              "items": {},
              "description": "This field describes the status of each node corresponding to the job.",
              "default": []
            },
            "processing_time": {
              "title": "Processing Time",
              "type": "integer",
              "description": "This field describes the processing time taken by the job."
            }
          },
          "x-stoplight": {
            "id": "tu9337v1317bg"
          }
        },
        "JobConfig": {
          "title": "JobConfig",
          "type": "object",
          "properties": {
            "job_template": {
              "title": "Job Template",
              "type": "string",
              "description": "This field describes the job template that is used for workflow execution. The job template can be accessed using this key to query stephanie.",
              "default": "starfire_vizsql"
            },
            "instance_pool_template_key": {
              "title": "Instance Pool Template Key",
              "type": "string",
              "description": "This field describes the name of the instance pool in databricks. All starfire jobs run on the instance pool template that can be accessed using this key to query stephanie.",
              "default": "starfire"
            }
          },
          "x-stoplight": {
            "id": "kqks3srvt1doc"
          }
        },
        "JobConfigValidation": {
          "title": "JobConfigValidation",
          "required": [
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the job."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the job."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "job_name": {
              "title": "Job Name",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the current status of the job",
              "default": "IN_PROGRESS"
            },
            "packet_id": {
              "title": "Packet Id",
              "type": "string",
              "description": "This field describes the packet_id/run_id corresponding to the job."
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__jobs__WorkflowTypes"
                }
              ],
              "description": "This field describes the type of base workflow.",
              "default": "idp"
            },
            "node_level_status": {
              "title": "Node Level Status",
              "type": "array",
              "items": {},
              "description": "This field describes the status of each node corresponding to the job.",
              "default": []
            },
            "processing_time": {
              "title": "Processing Time",
              "type": "integer",
              "description": "This field describes the processing time taken by the job."
            }
          },
          "x-stoplight": {
            "id": "dpmvj3qk13xvo"
          }
        },
        "JobCreate": {
          "title": "JobCreate",
          "type": "object",
          "properties": {
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__jobs__WorkflowTypes"
                }
              ],
              "description": "This field describes the type of base workflow."
            },
            "job_name": {
              "title": "Job Name",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "packet_id": {
              "title": "Packet Id",
              "type": "string",
              "description": "This field describes the packet_id/run_id corresponding to the job."
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the current status of the job",
              "default": "IN_PROGRESS"
            },
            "node_level_status": {
              "title": "Node Level Status",
              "type": "array",
              "items": {},
              "description": "This field describes the status of each node corresponding to the job."
            }
          },
          "x-stoplight": {
            "id": "mf2iem7ifyccu"
          }
        },
        "JobPatch": {
          "title": "JobPatch",
          "type": "object",
          "properties": {
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "job_name": {
              "title": "Job Name",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the current status of the job"
            },
            "packet_id": {
              "title": "Packet Id",
              "type": "string",
              "description": "This field describes the packet_id/run_id corresponding to the job."
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__jobs__WorkflowTypes"
                }
              ],
              "description": "This field describes the type of base workflow."
            },
            "node_level_status": {
              "title": "Node Level Status",
              "type": "array",
              "items": {},
              "description": "This field describes the status of each node corresponding to the job."
            },
            "processing_time": {
              "title": "Processing Time",
              "type": "integer",
              "description": "This field describes the processing time taken by the job."
            }
          },
          "x-stoplight": {
            "id": "qtnzlcyefemsv"
          }
        },
        "JobPayloadResponse": {
          "title": "JobPayloadResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "use_dataset_api": {
              "title": "Use Dataset Api",
              "type": "boolean",
              "description": "This field describes if the job uses dataset api."
            },
            "use_stephanie": {
              "title": "Use Stephanie",
              "type": "boolean",
              "description": "This field describes if the job uses stephanie."
            },
            "graph_payload": {
              "title": "Graph Payload",
              "type": "object",
              "description": "This field describes the payload of the job"
            },
            "client_id": {
              "title": "Client Id",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "client_name": {
              "title": "Client Name",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            }
          },
          "x-stoplight": {
            "id": "q6ku8dey3qppx"
          }
        },
        "JobReadResponse": {
          "title": "JobReadResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/JobConfigValidation"
                }
              ],
              "description": "This field describes the response data of the read API. The output contains all the metadata about the job that was registered during creation."
            }
          },
          "x-stoplight": {
            "id": "x2k115j628tk2"
          }
        },
        "JobUpdateResponse": {
          "title": "JobUpdateResponse",
          "required": [
            "status",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Job"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset."
            }
          },
          "x-stoplight": {
            "id": "1kderbgumli65"
          }
        },
        "ListingFields": {
          "title": "ListingFields",
          "enum": [
            "node_definition_id",
            "node_definition_name",
            "display_name",
            "node_group",
            "ui_config",
            "status",
            "created_ts",
            "updated_ts",
            "preset",
            "runtime"
          ],
          "type": "string",
          "description": "Enumeration of fields available for listing models.",
          "x-stoplight": {
            "id": "3ae071qvk6r83"
          }
        },
        "Node": {
          "title": "Node",
          "required": [
            "node_name",
            "node_type",
            "node_config"
          ],
          "type": "object",
          "properties": {
            "node_name": {
              "title": "Node Name",
              "type": "string",
              "description": "This field describes the name of the node provided by the user. "
            },
            "node_description": {
              "title": "Node Description",
              "type": "string",
              "description": "This field provides a description about the node in the corresponding workflow."
            },
            "node_type": {
              "title": "Node Type",
              "type": "string",
              "description": "This field describes the type of the node. The node can be a dataset node, transformation node in data workflows, model training / artifact / inference nodes in machine learning workflows and so on."
            },
            "node_config": {
              "title": "Node Config",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ComputeDataset"
                },
                {
                  "$ref": "#/components/schemas/DatasetNode"
                },
                {
                  "$ref": "#/components/schemas/QueryForm"
                },
                {
                  "$ref": "#/components/schemas/ConnectionNode"
                },
                {
                  "$ref": "#/components/schemas/SourceNode"
                },
                {
                  "$ref": "#/components/schemas/DestinationNode"
                },
                {
                  "$ref": "#/components/schemas/IDPNode"
                },
                {
                  "$ref": "#/components/schemas/Trainconv"
                },
                {
                  "$ref": "#/components/schemas/TrArtifact"
                },
                {
                  "$ref": "#/components/schemas/TrainconvLite"
                },
                {
                  "$ref": "#/components/schemas/CustomCodeNode"
                }
              ],
              "description": "This field describes the metadata configurations that pertain to a node. The configurations can differ based on the type of the node itself."
            },
            "input_cols": {
              "title": "Input Cols",
              "type": "array",
              "items": {},
              "description": "This field stores the details about input columns to a node if it is applicable. Storing this in node metadata aids in configuring sequential pipeline of any type of workflows.",
              "default": []
            },
            "output_cols": {
              "title": "Output Cols",
              "type": "array",
              "items": {},
              "description": "This field stores the details about output columns to a node if it is applicable. Output columns of a node in a workflow become the input columns in the succeeding node.",
              "default": []
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "his field describes any set of tags that can be associated to the node.",
              "default": []
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "k1l3lnrrh59qg"
          }
        },
        "NodeConfigValidation": {
          "title": "NodeConfigValidation",
          "required": [
            "created_ts",
            "updated_ts",
            "node_id",
            "node_name",
            "node_type",
            "node_config"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the node."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the node."
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the node."
            },
            "node_name": {
              "title": "Node Name",
              "type": "string",
              "description": "This field describes the name of the node provided by the user. "
            },
            "node_description": {
              "title": "Node Description",
              "type": "string",
              "description": "This field provides a description about the node in the corresponding workflow."
            },
            "node_type": {
              "title": "Node Type",
              "type": "string",
              "description": "This field describes the type of the node. The node can be a dataset node, transformation node in data workflows, model training / artifact / inference nodes in machine learning workflows and so on."
            },
            "node_config": {
              "title": "Node Config",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ComputeDataset"
                },
                {
                  "$ref": "#/components/schemas/DatasetNode"
                },
                {
                  "$ref": "#/components/schemas/QueryForm"
                },
                {
                  "$ref": "#/components/schemas/ConnectionNode"
                },
                {
                  "$ref": "#/components/schemas/SourceNode"
                },
                {
                  "$ref": "#/components/schemas/DestinationNode"
                },
                {
                  "$ref": "#/components/schemas/IDPNode"
                },
                {
                  "$ref": "#/components/schemas/Trainconv"
                },
                {
                  "$ref": "#/components/schemas/TrArtifact"
                },
                {
                  "$ref": "#/components/schemas/TrainconvLite"
                },
                {
                  "$ref": "#/components/schemas/CustomCodeNode"
                }
              ],
              "description": "This field describes the metadata configurations that pertain to a node. The configurations can differ based on the type of the node itself."
            },
            "input_cols": {
              "title": "Input Cols",
              "type": "array",
              "items": {},
              "description": "This field stores the details about input columns to a node if it is applicable. Storing this in node metadata aids in configuring sequential pipeline of any type of workflows.",
              "default": []
            },
            "output_cols": {
              "title": "Output Cols",
              "type": "array",
              "items": {},
              "description": "This field stores the details about output columns to a node if it is applicable. Output columns of a node in a workflow become the input columns in the succeeding node.",
              "default": []
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the node.",
              "default": []
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes the workflow if of the node"
            }
          },
          "x-stoplight": {
            "id": "5we4b7tsn8q10"
          }
        },
        "NodeCreateEntity": {
          "title": "NodeCreateEntity",
          "required": [
            "node_id",
            "workflow_id"
          ],
          "type": "object",
          "properties": {
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the node."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes the identifier of the workflow that the node corresponds to."
            }
          },
          "x-stoplight": {
            "id": "ofr34bd3j2z3o"
          }
        },
        "NodeCreateResponse": {
          "title": "NodeCreateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the create API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeCreateEntity"
                }
              ],
              "description": "This field describes the response of the create API. The output is a dictionary that contains both the node ID (that is a unique reference to the registered node) and a workflow ID (that is a unique reference to the registered worflow that the node corresponds to)."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeConfigValidation"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a node ID that can be used as a unique reference to this node."
            }
          },
          "x-stoplight": {
            "id": "aklqnv4hro9nr"
          }
        },
        "NodeDefinition": {
          "title": "NodeDefinition",
          "required": [
            "node_definition_name",
            "display_name",
            "node_group",
            "ui_config",
            "node_definition_id",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "node_definition_name": {
              "title": "Node Definition Name",
              "type": "string",
              "description": "Name of the node definition."
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "Display name of the node definition."
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "Description of the model.",
              "default": ""
            },
            "node_group": {
              "title": "Node Group",
              "type": "string",
              "description": "Group of the node definition."
            },
            "ui_config": {
              "title": "Ui Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UIConfig"
                }
              ],
              "description": "UI Config of the node definition."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Tags associated with the node definition.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "Status of the node definition.",
              "default": "inactive"
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "description": "This field describes the user id used to create node definition.",
              "default": ""
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment details of the node definition.",
              "default": {}
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field describes whether a node type is preset or not.",
              "default": false
            },
            "runtime": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinitionRuntime"
                }
              ],
              "description": " This field describes the runtime of the node definition.",
              "default": "python"
            },
            "node_definition_id": {
              "title": "Node Definition Id",
              "type": "string",
              "description": "ID of the node definition."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "The timestamp when the node definition was created."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "The timestamp when the node definition was last updated."
            }
          },
          "description": "Model for listing node definitions.",
          "x-stoplight": {
            "id": "y5nlf7g8cf0g2"
          }
        },
        "NodeDefinitionCreateResponse": {
          "title": "NodeDefinitionCreateResponse",
          "required": [
            "status",
            "data",
            "config"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "type": "string",
              "description": "The id of the node definition that was created."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinition"
                }
              ],
              "description": "The node definition that was created."
            }
          },
          "description": "Response model for creating a node definition.",
          "x-stoplight": {
            "id": "cku7o4skt92m1"
          }
        },
        "NodeDefinitionDeleteResponse": {
          "title": "NodeDefinitionDeleteResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "Data related to the response.",
              "default": {}
            }
          },
          "description": "Response model for deleting a node definition.",
          "x-stoplight": {
            "id": "9ecpdrfs40b6v"
          }
        },
        "NodeDefinitionUpdate": {
          "title": "NodeDefinitionUpdate",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "This field describes the display name of the node type. This is used in the UI to display the node type."
            },
            "code": {
              "title": "Code",
              "type": "string"
            },
            "libraries_to_install": {
              "title": "Libraries To Install",
              "type": "array",
              "items": {},
              "default": []
            },
            "group_name": {
              "title": "Group Name",
              "type": "string",
              "description": "This field describes the name of the group for which the node belongs to."
            },
            "schema": {
              "title": "Schema",
              "type": "object",
              "description": "This field describes the schema of the node type. This is used in the UI to display the node type.",
              "default": {}
            },
            "icon_type": {
              "title": "Icon Type",
              "type": "string",
              "description": "This field describes the icon type of the node type. This is used in the UI to display the node type."
            },
            "icon": {
              "title": "Icon",
              "type": "string",
              "description": "This field describes the icon of the node type. This is used in the UI to display the node type."
            },
            "parameters": {
              "title": "Parameters",
              "type": "object",
              "description": "This field describes the parameters of the node type containing input and output parameters",
              "default": {}
            },
            "description": {
              "title": "Description",
              "type": "string"
            },
            "deployment_details": {
              "title": "Deployment Details",
              "type": "object"
            }
          },
          "x-stoplight": {
            "id": "ihbf0tims5m3v"
          }
        },
        "NodeDefinitionUpdateResponse": {
          "title": "NodeDefinitionUpdateResponse",
          "required": [
            "status",
            "config"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinition"
                }
              ],
              "description": "The node definition that was updated."
            }
          },
          "description": "Response model for updating a node definition.",
          "x-stoplight": {
            "id": "6c8vmfpv9t8jm"
          }
        },
        "NodeDeleteResponse": {
          "title": "NodeDeleteResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            }
          },
          "x-stoplight": {
            "id": "kecpcgba00dtw"
          }
        },
        "NodeDiscoveryResponse": {
          "title": "NodeDiscoveryResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDiscoveryResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all node types registered and their corresponding node type IDs."
            }
          },
          "x-stoplight": {
            "id": "qlgurdqezok65"
          }
        },
        "NodeDiscoveryResponseValidation": {
          "title": "NodeDiscoveryResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of node types that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NodeTypeConfigValidation"
              },
              "description": "This field describes the list of node types that have been registered."
            }
          },
          "x-stoplight": {
            "id": "nxcrm010vnf2c"
          }
        },
        "NodeListingEntity": {
          "title": "NodeListingEntity",
          "required": [
            "node_id",
            "node_name",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the node."
            },
            "node_name": {
              "title": "Node Name",
              "type": "string",
              "description": "This field describes the name of the node."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the node."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the node."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the node.",
              "default": []
            },
            "node_type": {
              "title": "Node Type",
              "type": "string",
              "description": "This field describes the type of the node belongs to."
            }
          },
          "x-stoplight": {
            "id": "ah9k17hpj8mne"
          }
        },
        "NodeListingResponse": {
          "title": "NodeListingResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all nodes registered and their corresponding node IDs."
            }
          },
          "x-stoplight": {
            "id": "03epo0cjkj923"
          }
        },
        "NodeListingResponseValidation": {
          "title": "NodeListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of nodes that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NodeListingEntity"
              },
              "description": "This field describes the list of nodes that have been registered."
            }
          },
          "x-stoplight": {
            "id": "7b9s1ijyrwh3j"
          }
        },
        "NodePayloadResponse": {
          "title": "NodePayloadResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload.",
              "default": ""
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload.",
              "default": ""
            },
            "data": {
              "title": "Data",
              "description": "This field describes the payload of the job"
            }
          },
          "x-stoplight": {
            "id": "4t6t0l5xwwktz"
          }
        },
        "NodeReadResponse": {
          "title": "NodeReadResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeConfigValidation"
                }
              ],
              "description": "This field describes the response data of the read API. The output contains all the metadata about the node that was registered during creation."
            }
          },
          "x-stoplight": {
            "id": "g5wit24nqcbg4"
          }
        },
        "NodeRegistration": {
          "title": "NodeRegistration",
          "required": [
            "node_definition_id",
            "node_definition_name",
            "docker_image",
            "deployment_details",
            "runtime"
          ],
          "type": "object",
          "properties": {
            "node_definition_id": {
              "title": "Node Definition Id",
              "type": "string",
              "description": "ID of the node definition."
            },
            "node_definition_name": {
              "title": "Node Definition Name",
              "type": "string",
              "description": "Name of the node definition."
            },
            "docker_image": {
              "title": "Docker Image",
              "type": "string",
              "description": "Docker image of the node definition."
            },
            "deployment_details": {
              "title": "Deployment Details",
              "type": "object",
              "description": "Deployment details of the node definition."
            },
            "runtime": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinitionRuntime"
                }
              ],
              "description": "The runtime of the node definition."
            }
          },
          "description": "Model for registering a node definition.",
          "x-stoplight": {
            "id": "b7gucs37u50kd"
          }
        },
        "NodeSetup": {
          "title": "NodeSetup",
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "user_id": {
              "title": "User Id",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "m203zw222wa4c"
          }
        },
        "NodeType": {
          "title": "NodeType",
          "required": [
            "type",
            "display_name",
            "icon",
            "schema"
          ],
          "type": "object",
          "properties": {
            "type": {
              "title": "Type",
              "type": "string",
              "description": "This field describes the type of the node. The node can be a dataset node, transformation node in data workflows, model training / artifact / inference nodes in machine learning workflows and so on."
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "This field describes the display name of the node type. This is used in the UI to display the node type."
            },
            "icon_type": {
              "title": "Icon Type",
              "type": "string",
              "description": "This field describes the icon type of the node type. This is used in the UI to display the node type."
            },
            "icon": {
              "title": "Icon",
              "type": "string",
              "description": "This field describes the icon of the node type. This is used in the UI to display the node type."
            },
            "group": {
              "title": "Group",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeGroup"
                }
              ],
              "description": "This field describes the group of the node type. This is used in the UI to display the node type."
            },
            "schema": {
              "title": "Schema",
              "type": "object",
              "description": "This field describes the schema of the node type. This is used in the UI to display the node type."
            },
            "ui_schema": {
              "title": "Ui Schema",
              "type": "object",
              "description": "This field describes the ui schema of the node type. This is used in the UI"
            },
            "group_name": {
              "title": "Group Name",
              "type": "string",
              "description": "This field describes the name of the group for which the node belongs to."
            },
            "allowed_sources": {
              "title": "Allowed Sources",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node types that are allowed as sources for the current node type.",
              "default": []
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "This field provides a short description about the node type."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the node type.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes if the node type is active or not. If it is not active, it will not be available for use in the UI.",
              "default": "active"
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "description": "This field describes the user id used to create node type"
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field deployment details of the node type.",
              "default": {}
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field describes the node type is a preset or not",
              "default": false
            },
            "runtime": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeRuntime"
                }
              ],
              "description": " This field describes the runtime of the node type.",
              "default": "python"
            }
          },
          "x-stoplight": {
            "id": "o3ids3snmm4zg"
          }
        },
        "NodeTypeConfigValidation": {
          "title": "NodeTypeConfigValidation",
          "required": [
            "created_ts",
            "updated_ts",
            "type_id",
            "type",
            "display_name",
            "icon"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the dataset."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the dataset."
            },
            "type_id": {
              "title": "Type Id",
              "type": "string",
              "description": "This field describes the identifier of the node type."
            },
            "type": {
              "title": "Type",
              "type": "string",
              "description": "This field describes the type of the node. The node can be a dataset node, transformation node in data workflows, model training / artifact / inference nodes in machine learning workflows and so on."
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "This field describes the display name of the node type. This is used in the UI to display the node type."
            },
            "icon_type": {
              "title": "Icon Type",
              "type": "string",
              "description": "This field describes the icon type of the node type. This is used in the UI to display the node type."
            },
            "icon": {
              "title": "Icon",
              "type": "string",
              "description": "This field describes the icon of the node type. This is used in the UI to display the node type."
            },
            "group": {
              "title": "Group",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeGroup"
                }
              ],
              "description": "This field describes the group of the node type. This is used in the UI to display the node type."
            },
            "schema": {
              "title": "Schema",
              "type": "object",
              "description": "This field describes the schema of the node type. This is used in the UI to display the node type."
            },
            "ui_schema": {
              "title": "Ui Schema",
              "type": "object",
              "description": "This field describes the ui schema of the node type. This is used in the UI"
            },
            "group_name": {
              "title": "Group Name",
              "type": "string",
              "description": "This field describes the name of the group for which the node belongs to."
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "This field provides a short description about the node type."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the node type.",
              "default": []
            },
            "allowed_sources": {
              "title": "Allowed Sources",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node types that are allowed as sources for the current node type.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes if the node type is active or not. If it is not active, it will not be available for use in the UI.",
              "default": "active"
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "description": "This field describes the user id used to create node type"
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment details of the node type."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field describes whether a node type is preset or not",
              "default": false
            },
            "runtime": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeRuntime"
                }
              ],
              "description": " This field describes the runtime of the node type.",
              "default": "python"
            }
          },
          "x-stoplight": {
            "id": "50l8xk2n3q2nc"
          }
        },
        "NodeTypeCreateResponse": {
          "title": "NodeTypeCreateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the create API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "type": "string",
              "description": "This field describes the response of the create API."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeConfigValidation"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a node ID that can be used as a unique reference to this node."
            }
          },
          "x-stoplight": {
            "id": "24g5fmoi6d1wn"
          }
        },
        "NodeTypeDeleteResponse": {
          "title": "NodeTypeDeleteResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            }
          },
          "x-stoplight": {
            "id": "g2lu8r49ouomi"
          }
        },
        "NodeTypeGroup": {
          "title": "NodeTypeGroup",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "description": "This field describes the name of the group of the node type. This is used in the UI to display the node type.",
              "default": ""
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "This field describes the display name of the group of the node type. This is used in the UI to display the node type.",
              "default": ""
            },
            "icon_type": {
              "title": "Icon Type",
              "type": "string",
              "description": "This field describes the icon type of the group of the node type. This is used in the UI to display the node type.",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "z176yf1w1uq88"
          }
        },
        "NodeTypeListingResponse": {
          "title": "NodeTypeListingResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all node types registered and their corresponding node type IDs."
            }
          },
          "x-stoplight": {
            "id": "uyxrmh2bhh25x"
          }
        },
        "NodeTypeListingResponseValidation": {
          "title": "NodeTypeListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of node types that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NodeTypeConfigValidation"
              },
              "description": "This field describes the list of node types that have been registered."
            }
          },
          "x-stoplight": {
            "id": "undg24kolyr96"
          }
        },
        "NodeTypePatch": {
          "title": "NodeTypePatch",
          "type": "object",
          "properties": {
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "This field describes the display name of the node type. This is used in the UI to display the node type."
            },
            "icon_type": {
              "title": "Icon Type",
              "type": "string",
              "description": "This field describes the icon type of the node type. This is used in the UI to display the node type."
            },
            "icon": {
              "title": "Icon",
              "type": "string",
              "description": "This field describes the icon of the node type. This is used in the UI to display the node type."
            },
            "group": {
              "title": "Group",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeGroup"
                }
              ],
              "description": "This field describes the group of the node type. This is used in the UI to display the node type."
            },
            "schema": {
              "title": "Schema",
              "type": "object",
              "description": "This field describes the schema of the node type. This is used in the UI to display the node type."
            },
            "ui_schema": {
              "title": "Ui Schema",
              "type": "object",
              "description": "This field describes the ui schema of the node type. This is used in the UI"
            },
            "group_name": {
              "title": "Group Name",
              "type": "string",
              "description": "This field describes the name of the group for which the node belongs to."
            },
            "allowed_sources": {
              "title": "Allowed Sources",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node types that are allowed as sources for the current node type."
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "This field provides a short description about the node type."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the node type."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes if the node type is active or not. If it is not active, it will not be available for use in the UI."
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "description": "This field describes the user id used to create node type"
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment details of the node type."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field describes whether a node type is preset or not"
            }
          },
          "x-stoplight": {
            "id": "4bjvz7sv44fjh"
          }
        },
        "NodeTypeReadResponse": {
          "title": "NodeTypeReadResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeConfigValidation"
                }
              ],
              "description": "This field describes the response data of the read API. The output contains all the metadata about the node type that was registered during creation."
            }
          },
          "x-stoplight": {
            "id": "xxf7k2vvl7dpe"
          }
        },
        "NodeTypeRuntime": {
          "title": "NodeTypeRuntime",
          "enum": [
            "python",
            "spark"
          ],
          "type": "string",
          "description": "This class enumerates the different runtimes that are supported for a Node Type.",
          "x-stoplight": {
            "id": "13w79lbbsura3"
          }
        },
        "NodeTypeUpdateResponse": {
          "title": "NodeTypeUpdateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeTypeConfigValidation"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a node ID that can be used as a unique reference to this node."
            }
          },
          "x-stoplight": {
            "id": "abhigg2wjatk4"
          }
        },
        "NodeUpdateResponse": {
          "title": "NodeUpdateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "config",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeConfigValidation"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a node ID that can be used as a unique reference to this node."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeCreateEntity"
                }
              ],
              "description": "This field describes the response of the update API. The output is a dictionary that contains both the node ID (that is a unique reference to the updated node) and a workflow ID (that is a unique reference to the registered worflow that the node corresponds to)."
            }
          },
          "x-stoplight": {
            "id": "rmgjfptgpq434"
          }
        },
        "QueryForm": {
          "title": "QueryForm",
          "required": [
            "source_dataset",
            "sink_dataset",
            "query_type",
            "query_value"
          ],
          "type": "object",
          "properties": {
            "source_dataset": {
              "title": "Source Dataset",
              "type": "string",
              "description": "This field describes the name of the dataset that will be the source / input for this query operation or transformation."
            },
            "sink_dataset": {
              "title": "Sink Dataset",
              "type": "string",
              "description": "This field describes the name of the dataset that will be the sink / output of this query operation or transformation."
            },
            "query_type": {
              "title": "Query Type",
              "type": "string",
              "description": "This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. "
            },
            "query_value": {
              "title": "Query Value",
              "anyOf": [
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "object"
                }
              ],
              "description": "This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation."
            },
            "additional_dataset": {
              "title": "Additional Dataset",
              "type": "array",
              "items": {},
              "description": "This is an optional field that represents any additional dataset(s) that are needed to execute the transformation.",
              "default": []
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding transformation node. If it is not present, it will be created.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "pqgh3arwqjvzc"
          }
        },
        "QueryNode": {
          "title": "QueryNode",
          "required": [
            "source_dataset",
            "sink_dataset",
            "query_type",
            "query_dict"
          ],
          "type": "object",
          "properties": {
            "source_dataset": {
              "title": "Source Dataset",
              "type": "string",
              "description": "This field describes the name of the dataset that will be the source / input for this query operation or transformation."
            },
            "sink_dataset": {
              "title": "Sink Dataset",
              "type": "string",
              "description": "This field describes the name of the dataset that will be the sink / output of this query operation or transformation."
            },
            "query_type": {
              "title": "Query Type",
              "type": "string",
              "description": "This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. "
            },
            "query_dict": {
              "title": "Query Dict",
              "anyOf": [
                {
                  "type": "array",
                  "items": {}
                },
                {
                  "type": "object"
                }
              ],
              "description": "This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation."
            },
            "additional_dataset": {
              "title": "Additional Dataset",
              "type": "array",
              "items": {},
              "description": "This is an optional field that represents any additional dataset(s) that are needed to execute the transformation.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "91z63hhixlaij"
          }
        },
        "SourceNode": {
          "title": "SourceNode",
          "required": [
            "source_id"
          ],
          "type": "object",
          "properties": {
            "source_id": {
              "title": "Source Id",
              "type": "string",
              "description": "This field describes the identifier of connector hub's source"
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding source node. If it is not present, it will be created.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "u9hwd7h4mrrmx"
          }
        },
        "SpeedrunParams": {
          "title": "SpeedrunParams",
          "type": "object",
          "properties": {
            "use_sample_data": {
              "title": "Use Sample Data",
              "type": "boolean",
              "description": "Specifies whether to use sample data or not.",
              "default": true
            },
            "num_records": {
              "title": "Num Records",
              "type": "integer",
              "description": "Specifies the number of records to return as part of the speedrun response.",
              "default": 1000
            }
          },
          "x-stoplight": {
            "id": "5vxbibis0z7px"
          }
        },
        "Task": {
          "title": "Task",
          "type": "object",
          "properties": {
            "task_type": {
              "title": "Task Type",
              "type": "string",
              "description": "type of dask, Databricks, Bash"
            },
            "depends_on_past": {
              "title": "Depends On Past",
              "type": "boolean",
              "description": "if it depends on the past runs of this task, will execute only if old instances were success",
              "default": false
            },
            "pool": {
              "title": "Pool",
              "type": "string",
              "description": "Airflow pools id to which this task belongs"
            },
            "retries": {
              "title": "Retries",
              "type": "integer",
              "description": "Number of time to retry a task before failing",
              "default": 1
            },
            "python_params": {
              "title": "Python Params",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "python params for the job"
            },
            "notebook_params": {
              "title": "Notebook Params",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "Notebook params for the job"
            }
          },
          "x-stoplight": {
            "id": "b0rz8cnhjgrqp"
          }
        },
        "TrArtifact": {
          "title": "TrArtifact",
          "required": [
            "model_config"
          ],
          "type": "object",
          "properties": {
            "idp_sink_dataset": {
              "title": "Idp Sink Dataset",
              "type": "string",
              "description": "Dataset Name to store output"
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding es classifier node. If it is not present, it will be created.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "model_config": {
              "title": "Model Config",
              "type": "object",
              "description": "This field describes the config needed for model prediction. If it is not present, it will be created."
            },
            "persist": {
              "title": "Persist",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the data.",
              "default": false
            },
            "node_type": {
              "title": "Node Type",
              "type": "string",
              "description": "This field describes the node type for learn inference node",
              "default": ""
            },
            "node_name": {
              "title": "Node Name",
              "type": "string",
              "description": "This field describes the node name for cloning",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "kt7ro0duz8ogw"
          }
        },
        "Trainconv": {
          "title": "Trainconv",
          "required": [
            "training_config"
          ],
          "type": "object",
          "properties": {
            "idp_sink_dataset": {
              "title": "Idp Sink Dataset",
              "type": "string",
              "description": "Dataset Name to store output"
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding es classifier node. If it is not present, it will be created.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "training_config": {
              "title": "Training Config",
              "type": "object",
              "description": "This field describes the config needed for training. If it is not present, it will be created."
            },
            "persist": {
              "title": "Persist",
              "type": "boolean",
              "description": "This field is a configuration that can be used in data workflows in dataset nodes to store the data.",
              "default": false
            },
            "node_type": {
              "title": "Node Type",
              "type": "string",
              "description": "This field describes the node type for learn inference node",
              "default": ""
            },
            "node_name": {
              "title": "Node Name",
              "type": "string",
              "description": "This field describes the node name for cloning",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "ko4nqc9mbf6um"
          }
        },
        "TrainconvLite": {
          "title": "TrainconvLite",
          "required": [
            "training_config"
          ],
          "type": "object",
          "properties": {
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field describes the identifier of the corresponding es classifier node. If it is not present, it will be created.",
              "default": ""
            },
            "dependent_node_ids": {
              "title": "Dependent Node Ids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.",
              "default": []
            },
            "training_config": {
              "title": "Training Config",
              "type": "object",
              "description": "This field describes the config needed for training. If it is not present, it will be created."
            }
          },
          "x-stoplight": {
            "id": "4lxt8f2lghqqk"
          }
        },
        "Workflow": {
          "title": "Workflow",
          "required": [
            "workflow_name",
            "workflow_description",
            "tasks_config"
          ],
          "type": "object",
          "properties": {
            "created_by": {
              "title": "Created By",
              "type": "string",
              "description": "This field captures the id of the user who created the workflow."
            },
            "updated_by": {
              "title": "Updated By",
              "type": "string",
              "description": "This field captures the id of the user who updated the workflow."
            },
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes the name of the workflow."
            },
            "workflow_description": {
              "title": "Workflow Description",
              "type": "string",
              "description": "This field provides a description about the workflow."
            },
            "owner": {
              "title": "Owner",
              "type": "string",
              "description": "This field describes the service that owns / is responsible for this workflow.",
              "default": "starfire"
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the workflow.",
              "default": []
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__workflows__WorkflowTypes"
                }
              ],
              "description": "This field describes the type or the use case of the workflow.",
              "default": "analytics"
            },
            "tasks_config": {
              "title": "Tasks Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowCreationConfig"
                }
              ],
              "description": "This field desribes the config that will be used by the spark or pandas deployments for a given task."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field tracks whether the given workflow is an internal workflow or not.",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a workflow is a preset workflow or not.",
              "default": false
            },
            "draft": {
              "title": "Draft",
              "type": "boolean",
              "description": "This field describes whether the workflow is in draft state or not.",
              "default": false
            },
            "schedule_interval": {
              "title": "Schedule Interval",
              "type": "string",
              "description": "This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated DAG (post deployment)."
            },
            "datasets": {
              "title": "Datasets",
              "type": "object",
              "description": "This field describes the datasets that are created by the workflow.",
              "default": {}
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment configuration for the workflow.",
              "default": {}
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the workflow.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the workflow.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the current status of the workflow",
              "default": "DRAFT"
            },
            "metrics_dataset": {
              "title": "Metrics Dataset",
              "type": "object",
              "description": "This field describes about the metrics datasets",
              "default": {}
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "deploy_params": {
              "title": "Deploy Params",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeployParams"
                }
              ],
              "description": "Parameters that were used for deploying the workflow.",
              "default": {}
            },
            "job_list": {
              "title": "Job List",
              "type": "array",
              "items": {},
              "description": "This field describes the list of job runs that are associated to the workflow.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "j0gvidhb7kbkc"
          }
        },
        "WorkflowConfigValidation": {
          "title": "WorkflowConfigValidation",
          "required": [
            "created_ts",
            "updated_ts",
            "workflow_name",
            "workflow_description",
            "workflow_type",
            "tasks_config"
          ],
          "type": "object",
          "properties": {
            "created_by": {
              "title": "Created By",
              "type": "string",
              "description": "This field captures the id of the user who created the workflow."
            },
            "updated_by": {
              "title": "Updated By",
              "type": "string",
              "description": "This field captures the id of the user who updated the workflow."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the workflow."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the workflow."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes a unique identifier of the workflow."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated Graph (post deployment)."
            },
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes the name of the workflow."
            },
            "workflow_description": {
              "title": "Workflow Description",
              "type": "string",
              "description": "This field provides a description about the workflow."
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__workflows__WorkflowTypes"
                }
              ],
              "description": "This field describes the type or the use case of the workflow."
            },
            "owner": {
              "title": "Owner",
              "type": "string",
              "description": "This field describes the service that owns / is responsible for this workflow.",
              "default": "starfire"
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the workflow.",
              "default": []
            },
            "tasks": {
              "title": "Tasks",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/Task"
              },
              "description": "This field describes the config to setup the tasks for the DAG deployments."
            },
            "tasks_config": {
              "title": "Tasks Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowCreationConfigValidation"
                }
              ],
              "description": "This field desribes the config that will be used by the spark or pandas deployments for a given task."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field tracks whether the given workflow is an internal workflow or not.",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a workflow is a preset workflow or not.",
              "default": false
            },
            "draft": {
              "title": "Draft",
              "type": "boolean",
              "description": "This field describes whether the workflow is in draft state or not.",
              "default": false
            },
            "schedule_interval": {
              "title": "Schedule Interval",
              "type": "string",
              "description": "This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment."
            },
            "dependencies": {
              "title": "Dependencies",
              "type": "object",
              "description": "This field is a dictionary with node id as key and the parent and child node of that node as values."
            },
            "datasets": {
              "title": "Datasets",
              "type": "object",
              "description": "This field describes the datasets that are created by the workflow.",
              "default": {}
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment configuration for the workflow.",
              "default": {}
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the workflow.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the workflow.",
              "default": []
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "metrics_dataset": {
              "title": "Metrics Dataset",
              "type": "object",
              "description": "This field describes about the metrics datasets",
              "default": {}
            },
            "deploy_params": {
              "title": "Deploy Params",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeployParams"
                }
              ],
              "description": "Parameters that were used for deploying the workflow.",
              "default": {}
            },
            "job_list": {
              "title": "Job List",
              "type": "array",
              "items": {},
              "description": "This field describes the list of job runs that are associated to the workflow.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "d8dy71hkqhojc"
          }
        },
        "WorkflowCreateResponse": {
          "title": "WorkflowCreateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the create API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "type": "string",
              "description": "This field describes the response of the create API. The output is a workflow ID that is a unique reference to the registered workflow."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowConfigValidation"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a workflow ID that can be used as a unique reference to this workflow."
            }
          },
          "x-stoplight": {
            "id": "sbx87qpgtzpcg"
          }
        },
        "WorkflowCreationConfig": {
          "title": "WorkflowCreationConfig",
          "type": "object",
          "properties": {
            "workflow_form": {
              "title": "Workflow Form",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ComputeDataset"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetNode"
                  },
                  {
                    "$ref": "#/components/schemas/QueryForm"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectionNode"
                  },
                  {
                    "$ref": "#/components/schemas/SourceNode"
                  },
                  {
                    "$ref": "#/components/schemas/DestinationNode"
                  },
                  {
                    "$ref": "#/components/schemas/IDPNode"
                  },
                  {
                    "$ref": "#/components/schemas/Trainconv"
                  },
                  {
                    "$ref": "#/components/schemas/TrArtifact"
                  },
                  {
                    "$ref": "#/components/schemas/TrainconvLite"
                  },
                  {
                    "$ref": "#/components/schemas/CustomCodeNode"
                  }
                ]
              },
              "description": "This field describes the workflow configuration that will be populated as per what is entered on the form interface in the canvas.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "wbmc39mvmsfza"
          }
        },
        "WorkflowCreationConfigValidation": {
          "title": "WorkflowCreationConfigValidation",
          "type": "object",
          "properties": {
            "data_handler": {
              "title": "Data Handler",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/FileInfo"
              },
              "description": "This field describes the metadata configuration about the data handler that describes information about the file and the type of data that we deal with in this workflow configuration."
            },
            "workflow_form": {
              "title": "Workflow Form",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ComputeDataset"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetNode"
                  },
                  {
                    "$ref": "#/components/schemas/QueryForm"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectionNode"
                  },
                  {
                    "$ref": "#/components/schemas/SourceNode"
                  },
                  {
                    "$ref": "#/components/schemas/DestinationNode"
                  },
                  {
                    "$ref": "#/components/schemas/IDPNode"
                  },
                  {
                    "$ref": "#/components/schemas/Trainconv"
                  },
                  {
                    "$ref": "#/components/schemas/TrArtifact"
                  },
                  {
                    "$ref": "#/components/schemas/TrainconvLite"
                  },
                  {
                    "$ref": "#/components/schemas/CustomCodeNode"
                  }
                ]
              },
              "description": "This field describes the workflow configuration that will be populated as per what is entered on the form interface in the canvas.",
              "default": []
            },
            "workflow": {
              "title": "Workflow",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ComputeDataset"
                  },
                  {
                    "$ref": "#/components/schemas/DatasetNode"
                  },
                  {
                    "$ref": "#/components/schemas/QueryNode"
                  },
                  {
                    "$ref": "#/components/schemas/ConnectionNode"
                  },
                  {
                    "$ref": "#/components/schemas/SourceNode"
                  },
                  {
                    "$ref": "#/components/schemas/DestinationNode"
                  },
                  {
                    "$ref": "#/components/schemas/IDPNode"
                  },
                  {
                    "$ref": "#/components/schemas/Trainconv"
                  },
                  {
                    "$ref": "#/components/schemas/TrArtifact"
                  },
                  {
                    "$ref": "#/components/schemas/TrainconvLite"
                  },
                  {
                    "$ref": "#/components/schemas/CustomCodeNode"
                  }
                ]
              },
              "description": "This field describes the workflow configuration that is mapped to the workflow_form field. We currently handle this mapping for compatability between the spark and pandas deployments. It will be merged to one variable in the upcoming releases.",
              "default": []
            },
            "job_config": {
              "title": "Job Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/JobConfig"
                }
              ],
              "description": "This field describes the job config that is used for workflow creation and execution.",
              "default": {
                "job_template": "starfire_vizsql",
                "instance_pool_template_key": "starfire"
              }
            }
          },
          "x-stoplight": {
            "id": "rla8x4nbdn135"
          }
        },
        "WorkflowDagRun": {
          "title": "WorkflowDagRun",
          "required": [
            "job_id",
            "graph_id"
          ],
          "type": "object",
          "properties": {
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated DAG run."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated DAG."
            }
          },
          "x-stoplight": {
            "id": "pu91qdz9kdyf8"
          }
        },
        "WorkflowDeleteResponse": {
          "title": "WorkflowDeleteResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            }
          },
          "x-stoplight": {
            "id": "uhhxweekvb7ok"
          }
        },
        "WorkflowDeployEntity": {
          "title": "WorkflowDeployEntity",
          "required": [
            "message",
            "dag_id"
          ],
          "type": "object",
          "properties": {
            "message": {
              "title": "Message",
              "type": "string",
              "description": "This field shows a short message about the output of the API."
            },
            "dag_id": {
              "title": "Dag Id",
              "type": "string",
              "description": "This field describes the unique reference to the deployed DAG."
            }
          },
          "x-stoplight": {
            "id": "64zeqwmurzd1d"
          }
        },
        "WorkflowDeployResponse": {
          "title": "WorkflowDeployResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WorkflowDeployEntity"
                },
                {
                  "$ref": "#/components/schemas/WorkflowIdpDeployEntity"
                }
              ],
              "description": "This field describes the response data of the deploy API. The output contains all the metadata about the deployed workflow."
            }
          },
          "x-stoplight": {
            "id": "d2o8q1w64bq2j"
          }
        },
        "WorkflowIdpDeployEntity": {
          "title": "WorkflowIdpDeployEntity",
          "required": [
            "idp_processor_graph_id",
            "idp_processor_packet_id"
          ],
          "type": "object",
          "properties": {
            "idp_processor_graph_id": {
              "title": "Idp Processor Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated IDP processor graph."
            },
            "idp_processor_packet_id": {
              "title": "Idp Processor Packet Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated IDP processor packet."
            }
          },
          "x-stoplight": {
            "id": "a9i0wiscgdccg"
          }
        },
        "WorkflowListingEntity": {
          "title": "WorkflowListingEntity",
          "required": [
            "workflow_id",
            "workflow_name",
            "workflow_type",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "created_by": {
              "title": "Created By",
              "type": "string",
              "description": "This field captures the id of the user who created the workflow."
            },
            "updated_by": {
              "title": "Updated By",
              "type": "string",
              "description": "This field captures the id of the user who updated the workflow."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes the identifier of the workflow."
            },
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes the name of the workflow."
            },
            "workflow_type": {
              "title": "Workflow Type",
              "type": "string",
              "description": "This field describes the type of the workflow."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the workflow."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the workflow."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the workflow.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides a description about the workflow.",
              "default": "DRAFT"
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the workflow.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the workflow.",
              "default": []
            },
            "job_list": {
              "title": "Job List",
              "type": "array",
              "items": {},
              "description": "This field describes the list of job runs that are associated to the workflow.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "mwevvkj1n1fp3"
          }
        },
        "WorkflowListingResponse": {
          "title": "WorkflowListingResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all workflows registered and their corresponding workflow IDs."
            }
          },
          "x-stoplight": {
            "id": "yyt1m17b6a39j"
          }
        },
        "WorkflowListingResponseValidation": {
          "title": "WorkflowListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of workflows that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/WorkflowListingEntity"
              },
              "description": "This field describes the list of workflows that have been registered."
            }
          },
          "x-stoplight": {
            "id": "we000sg03hcw9"
          }
        },
        "WorkflowPatch": {
          "title": "WorkflowPatch",
          "type": "object",
          "properties": {
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes the name of the workflow."
            },
            "workflow_description": {
              "title": "Workflow Description",
              "type": "string",
              "description": "This field provides a description about the workflow."
            },
            "owner": {
              "title": "Owner",
              "type": "string",
              "description": "This field describes the service that owns / is responsible for this workflow."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the workflow."
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__workflows__WorkflowTypes"
                }
              ],
              "description": "This field describes the type or the use case of the workflow."
            },
            "tasks_config": {
              "title": "Tasks Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowCreationConfig"
                }
              ],
              "description": "This field desribes the config that will be used by the spark or pandas deployments for a given task."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field tracks whether the given workflow is an internal workflow or not."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a workflow is a preset workflow or not."
            },
            "draft": {
              "title": "Draft",
              "type": "boolean",
              "description": "This field describes whether the workflow is in draft state or not."
            },
            "schedule_interval": {
              "title": "Schedule Interval",
              "type": "string",
              "description": "This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated DAG (post deployment)."
            },
            "datasets": {
              "title": "Datasets",
              "type": "object",
              "description": "This field describes the datasets that are created by the workflow."
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment configuration for the workflow."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the workflow."
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the workflow."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the current status of the workflow"
            },
            "job_list": {
              "title": "Job List",
              "type": "array",
              "items": {},
              "description": "This field describes the list of job runs that are associated to the workflow."
            }
          },
          "x-stoplight": {
            "id": "8wr16a13v9avh"
          }
        },
        "WorkflowReadResponse": {
          "title": "WorkflowReadResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowConfigValidation"
                }
              ],
              "description": "This field describes the response data of the read API. The output contains all the metadata about the workflow that was registered during creation."
            }
          },
          "x-stoplight": {
            "id": "wpg1zdx99rf2n"
          }
        },
        "WorkflowRunResponse": {
          "title": "WorkflowRunResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowDagRun"
                }
              ],
              "description": "This field describes the response data of the run API. The output contains all the metadata about the execution of the deployed workflow."
            }
          },
          "x-stoplight": {
            "id": "uladlp1qsiokz"
          }
        },
        "WorkflowSpeedrunFromID": {
          "title": "WorkflowSpeedrunFromID",
          "required": [
            "workflow_id"
          ],
          "type": "object",
          "properties": {
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes the identifier of the workflow that will be used to fetch the workflow for synchronous execution"
            }
          },
          "x-stoplight": {
            "id": "6ne6luw6eeuqs"
          }
        },
        "WorkflowSpeedrunFromSubgraph": {
          "title": "WorkflowSpeedrunFromSubgraph",
          "required": [
            "graph"
          ],
          "type": "object",
          "properties": {
            "graph": {
              "title": "Graph",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/DatasetNode"
                  },
                  {
                    "$ref": "#/components/schemas/QueryForm"
                  }
                ]
              },
              "description": "This field describes a sub-workflow input to for synchronous execution."
            }
          },
          "x-stoplight": {
            "id": "jl4b8pm68qoes"
          }
        },
        "WorkflowSpeedrunRequest": {
          "title": "WorkflowSpeedrunRequest",
          "required": [
            "workflow"
          ],
          "type": "object",
          "properties": {
            "workflow": {
              "title": "Workflow",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/WorkflowSpeedrunFromSubgraph"
                },
                {
                  "$ref": "#/components/schemas/WorkflowSpeedrunFromID"
                }
              ],
              "description": "Describes the input to the speedrun API - can either be the workflow ID or the workflow graph."
            },
            "parameters": {
              "title": "Parameters",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SpeedrunParams"
                }
              ],
              "description": "Parameters for the speedrun.",
              "default": {
                "use_sample_data": true,
                "num_records": 1000
              }
            }
          },
          "x-stoplight": {
            "id": "5kfnicgnp9qmb"
          }
        },
        "WorkflowSpeedrunResponse": {
          "title": "WorkflowSpeedrunResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "This field describes the response data of the speedrun API. The output contains all the metadata about the models and/or datasets that were generated during the workflow execution."
            }
          },
          "x-stoplight": {
            "id": "gjjihfo5zu09u"
          }
        },
        "WorkflowStatusResponse": {
          "title": "WorkflowStatusResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "This field describes the response data of the status API. The output contains metadata about the status of the executed workflow."
            }
          },
          "x-stoplight": {
            "id": "udjsxgz6dq4bz"
          }
        },
        "WorkflowUndeployResponse": {
          "title": "WorkflowUndeployResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "This field describes the response data of the undeploy API. The output contains metadata about the status of the workflow being undeployed."
            }
          },
          "x-stoplight": {
            "id": "hvcr86de2ahef"
          }
        },
        "WorkflowUpdateResponse": {
          "title": "WorkflowUpdateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowConfigValidation"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a workflow ID that can be used as a unique reference to this workflow."
            }
          },
          "x-stoplight": {
            "id": "5hpjak1xmsfdd"
          }
        },
        "WorkflowValidationEntity": {
          "title": "WorkflowValidationEntity",
          "required": [
            "message"
          ],
          "type": "object",
          "properties": {
            "message": {
              "title": "Message",
              "type": "string",
              "description": "This field shows a short message about the output of the API."
            }
          },
          "x-stoplight": {
            "id": "4h2j9b5nxoc6m"
          }
        },
        "WorkflowValidationResponse": {
          "title": "WorkflowValidationResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the read API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowValidationEntity"
                }
              ],
              "description": "This field describes the response data of the read API. The output contains all the metadata about the workflow that was registered during creation."
            }
          },
          "x-stoplight": {
            "id": "jqdmhh787dzqp"
          }
        },
        "WriteMode": {
          "title": "WriteMode",
          "enum": [
            "overwrite",
            "append"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "5gkz5v7pceegb"
          }
        },
        "app__schemas__jobs__WorkflowTypes": {
          "title": "WorkflowTypes",
          "enum": [
            "idp",
            "analytics"
          ],
          "type": "string",
          "description": "This class describes the different types of workflows that exist.",
          "x-stoplight": {
            "id": "1q5v6665xhr4b"
          }
        },
        "app__schemas__workflows__WorkflowTypes": {
          "title": "WorkflowTypes",
          "enum": [
            "idp",
            "analytics"
          ],
          "type": "string",
          "description": "This class describes the different types of workflows that exist.",
          "x-stoplight": {
            "id": "3t9yssfrip8gc"
          }
        },
        "CreateDatatype": {
          "title": "CreateDatatype",
          "required": [
            "datatype_config",
            "datatype_name"
          ],
          "type": "object",
          "properties": {
            "datatype_config": {
              "title": "Datatype Config",
              "type": "array",
              "items": {}
            },
            "datatype_name": {
              "title": "Datatype Name",
              "type": "string"
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "yn5u3lm9f993i"
          }
        },
        "CreatePresetDocType": {
          "title": "CreatePresetDocType",
          "required": [
            "config_type",
            "preset_doc_type_name"
          ],
          "type": "object",
          "properties": {
            "config_type": {
              "title": "Config Type",
              "type": "array",
              "items": {}
            },
            "preset_doc_type_name": {
              "title": "Preset Doc Type Name",
              "type": "string"
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "0odpjrlf48gt5"
          }
        },
        "DocType": {
          "title": "DocType",
          "required": [
            "doc_type_name"
          ],
          "type": "object",
          "properties": {
            "doc_type_name": {
              "title": "Doc Type Name",
              "type": "string",
              "description": "This field describes the name of the doc_type."
            },
            "doc_type_id": {
              "title": "Doc Type Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "doc_type": {
              "title": "Doc Type",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "taxonomy": {
              "title": "Taxonomy",
              "type": "object",
              "doc_type_description": "This field provides a summary about the doc_type. The summary includes metadata about the doc_type, a sample set of records that we can find in the data, and univariate summary of all fields in the doc_type."
            },
            "taxonomy_id": {
              "title": "Taxonomy Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "file_path": {
              "title": "File Path",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field provides a description about the doc_type."
            },
            "preset_workflow_id": {
              "title": "Preset Workflow Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "preset_job_id": {
              "title": "Preset Job Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "preset_document_id": {
              "title": "Preset Document Id",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field provides a description about the doc_type."
            },
            "preset_dataset_id": {
              "title": "Preset Dataset Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the doc type.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the doc type.",
              "default": []
            },
            "report_id": {
              "title": "Report Id",
              "type": "string",
              "description": "This field provides a description about the report id."
            },
            "metrics_dataset": {
              "title": "Metrics Dataset",
              "type": "object",
              "description": "This field provides a description about the metrics dataset"
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a doc type is a preset doc type or not.",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "n81bzd0fmubw7"
          }
        },
        "DocTypeConfigValidation": {
          "title": "DocTypeConfigValidation",
          "required": [
            "created_ts",
            "updated_ts",
            "doc_type_id",
            "doc_type_name"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the doc_type."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the doc_type."
            },
            "doc_type_id": {
              "title": "Doc Type Id",
              "type": "string",
              "description": "This field describes the identifier of the doc_type."
            },
            "doc_type_name": {
              "title": "Doc Type Name",
              "type": "string",
              "description": "This field describes the name of the doc_type."
            },
            "doc_type": {
              "title": "Doc Type",
              "type": "string",
              "description": "This field describes the name of the doc_type."
            },
            "taxonomy": {
              "title": "Taxonomy",
              "type": "object",
              "description": "This field provides a summary about the doc_type. The summary includes metadata about the doc_type, a sample set of records that we can find in the data, and univariate summary of all fields in the doc_type."
            },
            "taxonomy_id": {
              "title": "Taxonomy Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "file_path": {
              "title": "File Path",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field provides a description about the doc_type."
            },
            "preset_workflow_id": {
              "title": "Preset Workflow Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "preset_job_id": {
              "title": "Preset Job Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "preset_document_id": {
              "title": "Preset Document Id",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field provides a description about the doc_type."
            },
            "preset_dataset_id": {
              "title": "Preset Dataset Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the doc type.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the doc type.",
              "default": []
            },
            "report_id": {
              "title": "Report Id",
              "type": "string",
              "description": "This field provides a description about the report id."
            },
            "metrics_dataset": {
              "title": "Metrics Dataset",
              "type": "object",
              "description": "This field provides a description about the metrics dataset"
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a doc type is a preset doc type or not.",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "f5prkooqtb0le"
          }
        },
        "DocTypeDeleteResponse": {
          "title": "DocTypeDeleteResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            }
          },
          "x-stoplight": {
            "id": "ido09k13eb7ot"
          }
        },
        "DocTypeListingEntity": {
          "title": "DocTypeListingEntity",
          "required": [
            "created_ts",
            "updated_ts",
            "doc_type_id",
            "doc_type_name"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the doc_type."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the doc_type."
            },
            "doc_type_id": {
              "title": "Doc Type Id",
              "type": "string",
              "description": "This field describes the identifier of the doc_type."
            },
            "doc_type_name": {
              "title": "Doc Type Name",
              "type": "string",
              "description": "This field describes the name of the doc_type."
            },
            "doc_type": {
              "title": "Doc Type",
              "type": "string",
              "description": "This field describes the name of the doc_type."
            },
            "taxonomy": {
              "title": "Taxonomy",
              "type": "object",
              "description": "This field provides a summary about the doc_type. The summary includes metadata about the doc_type, a sample set of records that we can find in the data, and univariate summary of all fields in the doc_type."
            },
            "taxonomy_id": {
              "title": "Taxonomy Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "file_path": {
              "title": "File Path",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field provides a description about the doc_type."
            },
            "preset_workflow_id": {
              "title": "Preset Workflow Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "preset_job_id": {
              "title": "Preset Job Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "preset_document_id": {
              "title": "Preset Document Id",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field provides a description about the doc_type."
            },
            "preset_dataset_id": {
              "title": "Preset Dataset Id",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides a description about the doc_type."
            },
            "no_of_documents": {
              "title": "No Of Documents",
              "type": "integer",
              "description": "This field provides a description about the count of documents of the doc_type."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the doc type.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the doc type.",
              "default": []
            },
            "report_id": {
              "title": "Report Id",
              "type": "string",
              "description": "This field provides a description about the report id."
            },
            "metrics_dataset": {
              "title": "Metrics Dataset",
              "type": "object",
              "description": "This field provides a description about the metrics dataset"
            }
          },
          "x-stoplight": {
            "id": "edwc45u7co36y"
          }
        },
        "DocTypeListingResponse": {
          "title": "DocTypeListingResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DocTypeListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all datasets registered and their corresponding dataset IDs."
            }
          },
          "x-stoplight": {
            "id": "z18zwazabt8eu"
          }
        },
        "DocTypeListingResponseValidation": {
          "title": "DocTypeListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of datasets that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DocTypeListingEntity"
              },
              "description": "This field describes the list of datasets that have been registered."
            }
          },
          "x-stoplight": {
            "id": "f4743s162hlzu"
          }
        },
        "DocTypeUpdate": {
          "title": "DocTypeUpdate",
          "type": "object",
          "properties": {
            "doc_type_name": {
              "title": "Doc Type Name",
              "type": "string",
              "description": "The name of the document type."
            },
            "doc_type": {
              "title": "Doc Type",
              "type": "string",
              "description": "The type of document."
            },
            "taxonomy_id": {
              "title": "Taxonomy Id",
              "type": "string",
              "description": "The ID of the taxonomy."
            },
            "taxonomy": {
              "title": "Taxonomy",
              "type": "object",
              "description": "The taxonomy details."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "The workflow ID."
            },
            "file_path": {
              "title": "File Path",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The file paths associated with the document."
            },
            "preset_workflow_id": {
              "title": "Preset Workflow Id",
              "type": "string",
              "description": "The preset workflow ID."
            },
            "preset_job_id": {
              "title": "Preset Job Id",
              "type": "string",
              "description": "The preset job ID."
            },
            "preset_document_id": {
              "title": "Preset Document Id",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "List of preset document IDs."
            },
            "preset_dataset_id": {
              "title": "Preset Dataset Id",
              "type": "string",
              "description": "The preset dataset ID."
            },
            "status": {
              "title": "Status",
              "description": "The status of the document."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "Whether the document is internal."
            },
            "config_type": {
              "title": "Config Type",
              "type": "string",
              "description": "The configuration type of the document."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {},
              "description": "List of users associated with the document."
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {},
              "description": "List of user groups associated with the document."
            },
            "bg_job_id": {
              "title": "Bg Job Id",
              "type": "string",
              "description": "The background job ID."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a doc type is a preset doc type or not.",
              "default": false
            },
            "metrics_dataset": {
              "title": "Metrics Dataset",
              "type": "object",
              "description": "This field provides a description about the metrics dataset"
            }
          },
          "x-stoplight": {
            "id": "3unle4079z3ol"
          }
        },
        "DocTypeUpdateResponse": {
          "title": "DocTypeUpdateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "config"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the update API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "config": {
              "title": "Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DocTypeConfigValidation"
                }
              ],
              "description": "This field describes all the metadata sent in the input payload, along with a doc_type ID that can be used as a unique reference to this doc_type."
            }
          },
          "x-stoplight": {
            "id": "8nnk3nd5rxxpq"
          }
        },
        "DocumentCreate": {
          "title": "DocumentCreate",
          "type": "object",
          "properties": {
            "image_url": {
              "title": "Image Url",
              "type": "string",
              "description": "This field describes the url of the image for the new document."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field provides a description about the workflow id for the new document"
            },
            "document_name": {
              "title": "Document Name",
              "type": "string",
              "description": "This field provides the name for the new document"
            },
            "doctype_id": {
              "title": "Doctype Id",
              "type": "string",
              "description": "This field provides the doctype id for the new document"
            },
            "HITL_action": {
              "title": "Hitl Action",
              "type": "string",
              "description": "This field describes the HITL action for the new document."
            },
            "HITL_status": {
              "title": "Hitl Status",
              "type": "string",
              "description": "This field provides the HITL status for the new document."
            },
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "This field provides the job id for the new document."
            },
            "node_id": {
              "title": "Node Id",
              "type": "string",
              "description": "This field provides the node id for the new document."
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field provides the client id for the new document."
            },
            "document_id": {
              "title": "Document Id",
              "type": "string",
              "description": "This field provides the document id for the new document."
            },
            "pages": {
              "title": "Pages",
              "type": "object",
              "description": "This field provides the pages for the new document."
            },
            "ocr_json_path": {
              "title": "Ocr Json Path",
              "type": "string",
              "description": "This field provides the OCR JSON path for the new document."
            },
            "textract_json_path": {
              "title": "Textract Json Path",
              "type": "string",
              "description": "This field provides the Textract JSON path for the new document."
            },
            "predicted_doctype_id": {
              "title": "Predicted Doctype Id",
              "type": "string",
              "description": "This field provides the predicted doctype id for the new document by Auto classifier"
            },
            "document_embedding_path_dict": {
              "title": "Document Embedding Path Dict",
              "type": "object",
              "description": "This field provides the text embeddings path for the new document."
            },
            "is_doctype_reviewed": {
              "title": "Is Doctype Reviewed",
              "type": "boolean",
              "description": "Boolean for defining whether the doctype for the document is reviewed.",
              "default": false
            },
            "registration_document": {
              "title": "Registration Document",
              "type": "boolean",
              "description": "This field describes whether the document was uploaded for doc_type registration.",
              "default": false
            },
            "batch_name": {
              "title": "Batch Name",
              "type": "string",
              "description": "This field describes about the batch name of the document."
            }
          },
          "x-stoplight": {
            "id": "fhdu0j3xv8pz0"
          }
        },
        "DocumentDeleteResponse": {
          "title": "DocumentDeleteResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            }
          },
          "x-stoplight": {
            "id": "h9vfiduwcvvgq"
          }
        },
        "DocumentListingEntity": {
          "title": "DocumentListingEntity",
          "required": [
            "created_ts",
            "updated_ts",
            "document_id",
            "document_name"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the document."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the document."
            },
            "document_id": {
              "title": "Document Id",
              "type": "string",
              "description": "This field describes the identifier of the document."
            },
            "document_name": {
              "title": "Document Name",
              "type": "string",
              "description": "This field describes the name of the document."
            },
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "This field describes the identifier of the job."
            },
            "doc_type_id": {
              "title": "Doc Type Id",
              "type": "string",
              "description": "This field describes the identifier of the document type of the document."
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "This field describes the identifier of the workflow."
            },
            "HITL_status": {
              "title": "Hitl Status",
              "type": "string",
              "description": "This field provides a description about the HITL status."
            },
            "HITL_action": {
              "title": "Hitl Action",
              "type": "string",
              "description": "This field provides a description about the HITL action."
            },
            "no_of_pages": {
              "title": "No Of Pages",
              "type": "integer",
              "description": "This field provides the count of no. of pages in the document."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the document.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the document.",
              "default": []
            },
            "doc_type_name": {
              "title": "Doc Type Name",
              "type": "string",
              "description": "This field describes the document type name of the document"
            },
            "batch_name": {
              "title": "Batch Name",
              "type": "string",
              "description": "This field describes about the batch name of the document."
            },
            "pages": {
              "title": "Pages",
              "type": "object",
              "description": "Dictionary containing information about document pages."
            },
            "ocr_json_path": {
              "title": "Ocr Json Path",
              "type": "string",
              "description": "This field provides the OCR JSON path for the new document."
            },
            "textract_json_path": {
              "title": "Textract Json Path",
              "type": "string",
              "description": "This field provides the Textract JSON path for the new document."
            },
            "predicted_doctype_id": {
              "title": "Predicted Doctype Id",
              "type": "string",
              "description": "This field provides the predicted doctype id for the new document by Auto classifier"
            },
            "document_embedding_path_dict": {
              "title": "Document Embedding Path Dict",
              "type": "object",
              "description": "This field provides the text embeddings path for the new document."
            },
            "is_doctype_reviewed": {
              "title": "Is Doctype Reviewed",
              "type": "boolean",
              "description": "Boolean for defining whether the doctype for the document is reviewed.",
              "default": false
            },
            "registration_document": {
              "title": "Registration Document",
              "type": "boolean",
              "description": "This field describes whether the document was uploaded for doc_type registration.",
              "default": false
            },
            "image_url": {
              "title": "Image Url",
              "type": "string",
              "description": "Cloud path of the document file",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "u30m99n8dqtgn"
          }
        },
        "DocumentListingResponse": {
          "title": "DocumentListingResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DocumentListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all documents registered and their corresponding document IDs."
            }
          },
          "x-stoplight": {
            "id": "0eakma3prpxdh"
          }
        },
        "DocumentListingResponseValidation": {
          "title": "DocumentListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of documents that have been registered."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DocumentListingEntity"
              },
              "description": "This field describes the list of documents that have been registered."
            }
          },
          "x-stoplight": {
            "id": "36zt0t71t110l"
          }
        },
        "DocumentQuery": {
          "title": "DocumentQuery",
          "required": [
            "query"
          ],
          "type": "object",
          "properties": {
            "query": {
              "title": "Query",
              "type": "string",
              "decription": "The query to be searched in the document"
            }
          },
          "x-stoplight": {
            "id": "cud0y03fw8yoj"
          }
        },
        "DocumentUpdate": {
          "title": "DocumentUpdate",
          "type": "object",
          "properties": {
            "updated_data": {
              "title": "Updated Data",
              "type": "object",
              "description": "Updated data for the document."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {},
              "description": "List of users associated with the document.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {},
              "description": "List of user groups associated with the document.",
              "default": []
            },
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "Identifier for the job associated with the document."
            },
            "HITL_status": {
              "title": "Hitl Status",
              "type": "string",
              "description": "Status for HITL processing."
            },
            "pages": {
              "title": "Pages",
              "type": "object",
              "description": "Dictionary containing information about document pages."
            },
            "HITL_action": {
              "title": "Hitl Action",
              "type": "string",
              "description": "Action related to HITL processing."
            },
            "ocr_json_path": {
              "title": "Ocr Json Path",
              "type": "string",
              "description": "Path to the OCR JSON file."
            },
            "textract_json_path": {
              "title": "Textract Json Path",
              "type": "string",
              "description": "Path to the Textract JSON file."
            },
            "doc_type_id": {
              "title": "Doc Type Id",
              "type": "string",
              "description": "Identifier for the doc_type associated with the document."
            },
            "no_of_pages": {
              "title": "No Of Pages",
              "type": "integer",
              "description": "This field provides the count of no. of pages in the document."
            },
            "predicted_doctype_id": {
              "title": "Predicted Doctype Id",
              "type": "string",
              "description": "This field provides the predicted doctype id for the new document by Auto classifier"
            },
            "document_embedding_path_dict": {
              "title": "Document Embedding Path Dict",
              "type": "object",
              "description": "This field provides the text embeddings path for the new document."
            },
            "is_doctype_reviewed": {
              "title": "Is Doctype Reviewed",
              "type": "string",
              "description": "Boolean for defined whether the doctype for the document is reviewed."
            },
            "ocr_job_id": {
              "title": "Ocr Job Id",
              "type": "string",
              "description": "Identifier for the OCR job of the document",
              "default": ""
            },
            "doc_type_name": {
              "title": "Doc Type Name",
              "type": "string",
              "description": "Name of the document type of the document",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "meovwo76to96k"
          }
        },
        "MatchingCreate": {
          "title": "MatchingCreate",
          "type": "object",
          "properties": {
            "matching_id": {
              "title": "Matching Id",
              "type": "string",
              "description": "This field provides a description about the id for the new matching job"
            },
            "matching_name": {
              "title": "Matching Name",
              "type": "string",
              "description": "This field provides a description about the name for the new matching job"
            },
            "review_status": {
              "title": "Review Status",
              "type": "string",
              "description": "This field provides the review status for the new matching job."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides the status for the new matching job."
            }
          },
          "x-stoplight": {
            "id": "mmbju9klyj63d"
          }
        },
        "MatchingDeleteResponse": {
          "title": "MatchingDeleteResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the delete API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            }
          },
          "x-stoplight": {
            "id": "aonuxz55b19hd"
          }
        },
        "MatchingListingEntity": {
          "title": "MatchingListingEntity",
          "required": [
            "created_ts",
            "updated_ts",
            "matching_id",
            "matching_name"
          ],
          "type": "object",
          "properties": {
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "This field describes the initial date of creation of the matching."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "This field describes the latest date of updation of the matching."
            },
            "matching_id": {
              "title": "Matching Id",
              "type": "string",
              "description": "This field describes the identifier of the matching."
            },
            "matching_name": {
              "title": "Matching Name",
              "type": "string",
              "description": "This field describes the name of the matching."
            },
            "review_status": {
              "title": "Review Status",
              "type": "string",
              "description": "This field provides the review status for the new matching job."
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the matching.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the matching.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field provides the status for the new matching job."
            }
          },
          "x-stoplight": {
            "id": "ezypz8al10fhx"
          }
        },
        "MatchingListingResponse": {
          "title": "MatchingListingResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MatchingListingResponseValidation"
                }
              ],
              "description": "This field describes the response data of the list API. The output contains data about all matchings done and their matching IDs."
            }
          },
          "x-stoplight": {
            "id": "akwn19scyf5a3"
          }
        },
        "MatchingListingResponseValidation": {
          "title": "MatchingListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of matching jobs that have been done."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MatchingListingEntity"
              },
              "description": "This field describes the list of matchings that have been done."
            }
          },
          "x-stoplight": {
            "id": "e7hrgv1wb3xho"
          }
        },
        "MatchingUpdate": {
          "title": "MatchingUpdate",
          "type": "object",
          "properties": {},
          "x-stoplight": {
            "id": "ko04cfc9afprk"
          }
        },
        "UpdateDatatype": {
          "title": "UpdateDatatype",
          "required": [
            "datatype_config",
            "datatype_name"
          ],
          "type": "object",
          "properties": {
            "datatype_config": {
              "title": "Datatype Config",
              "type": "array",
              "items": {}
            },
            "datatype_name": {
              "title": "Datatype Name",
              "type": "string"
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "2ncxeukmz41zo"
          }
        },
        "UpdatePresetDocType": {
          "title": "UpdatePresetDocType",
          "required": [
            "config_type",
            "preset_doc_type_name"
          ],
          "type": "object",
          "properties": {
            "config_type": {
              "title": "Config Type",
              "type": "array",
              "items": {}
            },
            "preset_doc_type_name": {
              "title": "Preset Doc Type Name",
              "type": "string"
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "bi4eep8gptyt8"
          }
        },
        "app__schemas__doc_types__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "doc_type_id",
            "doc_type_name",
            "created_ts",
            "updated_ts",
            "taxonomy",
            "doc_type",
            "taxonomy_id",
            "workflow_id",
            "status",
            "users",
            "user_groups",
            "report_id",
            "metrics_dataset",
            "file_path",
            "preset_workflow_id",
            "preset_job_id",
            "preset_document_id",
            "preset_dataset_id",
            "bg_job_id",
            "workflow_status",
            "no_of_documents",
            "auto_classifier_job_id",
            "learning_job_id"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "xet6c7iol1qco"
          }
        },
        "schemas__documents__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "doc_type_id",
            "workflow_id",
            "created_ts",
            "updated_ts",
            "no_of_pages",
            "job_id",
            "HITL_action",
            "HITL_status",
            "document_id",
            "users",
            "user_groups",
            "batch_name",
            "doc_type_name",
            "document_name",
            "pages",
            "image_url",
            "ocr_job_id",
            "ocr_json_path",
            "textract_json_path",
            "document_embedding_path_dict",
            "predicted_doc_type_id",
            "is_doctype_reviewed",
            "registration_document"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "4uowplp0625lp"
          }
        },
        "Connector": {
          "title": "Connector",
          "required": [
            "name",
            "sourceId",
            "destinationId",
            "connectionId",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "schedule": {
              "$ref": "#/components/schemas/Schedule"
            },
            "scheduleType": {
              "$ref": "#/components/schemas/scheduleType"
            },
            "scheduleData": {
              "$ref": "#/components/schemas/ScheduleData"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "default": false
            },
            "sourceId": {
              "title": "Sourceid",
              "type": "string"
            },
            "destinationId": {
              "title": "Destinationid",
              "type": "string"
            },
            "streamsToSync": {
              "title": "Streamstosync",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/baseStreamConfig"
              }
            },
            "resourceRequirements": {
              "$ref": "#/components/schemas/ResourceRequirements"
            },
            "status": {
              "$ref": "#/components/schemas/ConnectorStatus"
            },
            "consistency_sync": {
              "title": "Consistency Sync",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            },
            "connectionId": {
              "title": "Connectionid",
              "type": "string"
            },
            "source_name": {
              "title": "Source Name",
              "type": "string"
            },
            "source_type": {
              "title": "Source Type",
              "type": "string"
            },
            "destination_name": {
              "title": "Destination Name",
              "type": "string"
            },
            "destination_type": {
              "title": "Destination Type",
              "type": "string"
            },
            "source_type_id": {
              "title": "Source Type Id",
              "type": "string"
            },
            "destination_type_id": {
              "title": "Destination Type Id",
              "type": "string"
            },
            "last_triggered_at": {
              "title": "Last Triggered At",
              "type": "string"
            },
            "last_attempt_status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            }
          },
          "description": "Connector Model\n\nAttributes:\n- connectionId: str\n- source_name: Optional[str]\n- source_type: Optional[str]\n- destination_name: Optional[str]\n- destination_type: Optional[str]\n- source_type_id: Optional[str]\n- destination_type_id: Optional[str]\n- last_triggered_at: Optional[str]\n- created_ts: str\n- updated_ts: str",
          "x-stoplight": {
            "id": "wvnwihhd4d93f"
          }
        },
        "ConnectorRun": {
          "title": "ConnectorRun",
          "required": [
            "run_id",
            "connection_id",
            "status"
          ],
          "type": "object",
          "properties": {
            "run_id": {
              "title": "Run Id",
              "type": "string"
            },
            "connection_id": {
              "title": "Connection Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            },
            "start_time": {
              "title": "Start Time",
              "type": "string"
            },
            "end_time": {
              "title": "End Time",
              "type": "string"
            },
            "time_taken": {
              "title": "Time Taken",
              "type": "string"
            }
          },
          "description": "Connector Run Model\n\nAttributes:\n- run_id: str\n- connection_id: str\n- status: ConnectorRunStatus\n- start_time: Optional[str]\n- end_time: Optional[str]\n- time_taken: Optional[str]",
          "x-stoplight": {
            "id": "y0a1m4w4brohd"
          }
        },
        "ConnectorRunDetail": {
          "title": "ConnectorRunDetail",
          "required": [
            "run_id",
            "connection_id",
            "status"
          ],
          "type": "object",
          "properties": {
            "run_id": {
              "title": "Run Id",
              "type": "string"
            },
            "connection_id": {
              "title": "Connection Id",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            },
            "start_time": {
              "title": "Start Time",
              "type": "string"
            },
            "end_time": {
              "title": "End Time",
              "type": "string"
            },
            "time_taken": {
              "title": "Time Taken",
              "type": "string"
            },
            "run_metrics": {
              "title": "Run Metrics",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RunMetrics"
              }
            }
          },
          "description": "Connector Run Detail Model\n\nAttributes:\n- run_metrics: Optional[List[RunMetrics]]",
          "x-stoplight": {
            "id": "g5uls83eccmg0"
          }
        },
        "ConnectorRunStatus": {
          "title": "ConnectorRunStatus",
          "enum": [
            "PENDING",
            "RUNNING",
            "COMPLETED",
            "FAILED",
            "CANCELLING",
            "CANCELLED"
          ],
          "type": "string",
          "description": "Enum for Connector Run Status\n\nAttributes:\n- pending: str\n- running: str\n- completed: str\n- failed: str\n- cancelling: str\n- cancelled: str",
          "x-stoplight": {
            "id": "8kqqpu9uw42ok"
          }
        },
        "ConnectorStatus": {
          "title": "ConnectorStatus",
          "enum": [
            "active",
            "inactive",
            "deprecated"
          ],
          "type": "string",
          "description": "Enum for Connector Status\n\nAttributes:\n- active: str\n- inactive: str\n- deprecated: str",
          "x-stoplight": {
            "id": "ly9e7elnnosxt"
          }
        },
        "CreateConnector": {
          "title": "CreateConnector",
          "required": [
            "name",
            "sourceId",
            "destinationId"
          ],
          "type": "object",
          "properties": {
            "schedule": {
              "$ref": "#/components/schemas/Schedule"
            },
            "scheduleType": {
              "$ref": "#/components/schemas/scheduleType"
            },
            "scheduleData": {
              "$ref": "#/components/schemas/ScheduleData"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "default": false
            },
            "sourceId": {
              "title": "Sourceid",
              "type": "string"
            },
            "destinationId": {
              "title": "Destinationid",
              "type": "string"
            },
            "streamsToSync": {
              "title": "Streamstosync",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/streamConfig"
              }
            },
            "resourceRequirements": {
              "$ref": "#/components/schemas/ResourceRequirements"
            },
            "status": {
              "$ref": "#/components/schemas/ConnectorStatus"
            },
            "consistency_sync": {
              "title": "Consistency Sync",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            }
          },
          "description": "Create Connector Model\n\nAttributes:\n- name: str\n- is_internal: bool\n- preset: bool\n- sourceId: str\n- destinationId: str\n- streamsToSync: Optional[List[streamConfig]]\n- resourceRequirements: Optional[ResourceRequirements]\n- status: Optional[ConnectorStatus]\n- consistency_sync : bool\n- description: Optional[str]",
          "x-stoplight": {
            "id": "blkjjufsnhywp"
          }
        },
        "CreateConnectorResponse": {
          "title": "CreateConnectorResponse",
          "required": [
            "connection_id"
          ],
          "type": "object",
          "properties": {
            "connection_id": {
              "title": "Connection Id",
              "type": "string"
            }
          },
          "description": "Create Connector Response Model\n\nAttributes:\n- connection_id: str",
          "x-stoplight": {
            "id": "wbndhcqt3r142"
          }
        },
        "CreateDestination": {
          "title": "CreateDestination",
          "required": [
            "destinationDefinitionId",
            "connectionConfiguration",
            "name"
          ],
          "type": "object",
          "properties": {
            "destinationDefinitionId": {
              "title": "Destinationdefinitionid",
              "type": "string"
            },
            "connectionConfiguration": {
              "title": "Connectionconfiguration",
              "type": "object"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            }
          },
          "description": "Create Destination Model\n\nAttributes:\n- destinationDefinitionId: str\n- connectionConfiguration: dict\n- name: str\n- is_internal: Optional[bool]\n- description: Optional[str]",
          "x-stoplight": {
            "id": "cgjhroyac0rld"
          }
        },
        "CreateDestinationDefinition": {
          "title": "CreateDestinationDefinition",
          "required": [
            "destinationDefinition"
          ],
          "type": "object",
          "properties": {
            "workspaceId": {
              "title": "Workspaceid",
              "type": "string"
            },
            "destinationDefinition": {
              "$ref": "#/components/schemas/DestinationDefinition"
            }
          },
          "description": "Create Destination Definition Model\n\nAttributes:\n- workspaceId: Optional[str]\n- destinationDefinition: DestinationDefinition",
          "x-stoplight": {
            "id": "dcq1ol0hlyca8"
          }
        },
        "CreateEgress": {
          "title": "CreateEgress",
          "required": [
            "name",
            "destination_id",
            "dataset_id"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "destination_id": {
              "title": "Destination Id",
              "type": "string"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "ax47l5e290m9m"
          }
        },
        "CreateEgressResponse": {
          "title": "CreateEgressResponse",
          "required": [
            "name",
            "destination_id",
            "dataset_id",
            "egress_id",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "destination_id": {
              "title": "Destination Id",
              "type": "string"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string"
            },
            "egress_id": {
              "title": "Egress Id",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            },
            "internal_config": {
              "title": "Internal Config",
              "type": "object"
            }
          },
          "x-stoplight": {
            "id": "5bvl4bz13k1oh"
          }
        },
        "CreateIngress": {
          "title": "CreateIngress",
          "required": [
            "name",
            "source_id"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "source_id": {
              "title": "Source Id",
              "type": "string"
            },
            "streams_to_sync": {
              "title": "Streams To Sync",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/streamConfig"
              }
            },
            "resource_requirements": {
              "$ref": "#/components/schemas/ResourceRequirements"
            }
          },
          "x-stoplight": {
            "id": "ctlgjelsj4h7u"
          }
        },
        "CreateIngressResponse": {
          "title": "CreateIngressResponse",
          "required": [
            "name",
            "source_id",
            "ingress_id",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "source_id": {
              "title": "Source Id",
              "type": "string"
            },
            "streams_to_sync": {
              "title": "Streams To Sync",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/streamConfig"
              }
            },
            "resource_requirements": {
              "$ref": "#/components/schemas/ResourceRequirements"
            },
            "ingress_id": {
              "title": "Ingress Id",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            },
            "internal_config": {
              "title": "Internal Config",
              "type": "object"
            }
          },
          "x-stoplight": {
            "id": "lapwivc9ief5k"
          }
        },
        "CreateSource": {
          "title": "CreateSource",
          "required": [
            "sourceDefinitionId",
            "connectionConfiguration",
            "name"
          ],
          "type": "object",
          "properties": {
            "sourceDefinitionId": {
              "title": "Sourcedefinitionid",
              "type": "string"
            },
            "connectionConfiguration": {
              "title": "Connectionconfiguration",
              "type": "object"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            }
          },
          "description": "Create Source Model\n\nAttributes:\n- sourceDefinitionId: str\n- connectionConfiguration: dict\n- name: str\n- is_internal: Optional[bool]\n- description: Optional[str]",
          "x-stoplight": {
            "id": "7rvaiqbg28thu"
          }
        },
        "CreateSourceDefinition": {
          "title": "CreateSourceDefinition",
          "required": [
            "sourceDefinition"
          ],
          "type": "object",
          "properties": {
            "workspaceId": {
              "title": "Workspaceid",
              "type": "string"
            },
            "sourceDefinition": {
              "$ref": "#/components/schemas/SourceDefinition"
            }
          },
          "description": "Create Source Definition Model\n\nAttributes:\n- workspaceId: Optional[str]\n- sourceDefinition: SourceDefinition",
          "x-stoplight": {
            "id": "ornz3jpcmek5p"
          }
        },
        "CronSchedule": {
          "title": "CronSchedule",
          "required": [
            "cronExpression",
            "cronTimeZone"
          ],
          "type": "object",
          "properties": {
            "cronExpression": {
              "title": "Cronexpression",
              "type": "string"
            },
            "cronTimeZone": {
              "title": "Crontimezone",
              "type": "string"
            }
          },
          "description": "Cron Schedule Model\n\nAttributes:\n- cronExpression: str\n- cronTimeZone: str",
          "x-stoplight": {
            "id": "r1w3z7do6uk4l"
          }
        },
        "Destination": {
          "title": "Destination",
          "required": [
            "destinationDefinitionId",
            "connectionConfiguration",
            "name",
            "destinationId",
            "destinationName",
            "workspaceId",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "destinationDefinitionId": {
              "title": "Destinationdefinitionid",
              "type": "string"
            },
            "connectionConfiguration": {
              "title": "Connectionconfiguration",
              "type": "object"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            },
            "destinationId": {
              "title": "Destinationid",
              "type": "string"
            },
            "icon": {
              "title": "Icon",
              "type": "string"
            },
            "destinationName": {
              "title": "Destinationname",
              "type": "string"
            },
            "workspaceId": {
              "title": "Workspaceid",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            },
            "test_connection_status": {
              "title": "Test Connection Status",
              "type": "string"
            },
            "test_connection_ts": {
              "title": "Test Connection Ts",
              "type": "string"
            },
            "connections": {
              "title": "Connections",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "no_of_connections": {
              "title": "No Of Connections",
              "type": "integer"
            }
          },
          "description": "Destination Model\n\nAttributes:\n- destinationId: str\n- icon: Optional[str]\n- destinationName: str\n- workspaceId: str\n- created_ts: str\n- updated_ts: str\n- test_connection_status: Optional[str]\n- test_connection_ts: Optional[str]\n- connections: Optional[List[str]]\n- no_of_connections: Optional[int]",
          "x-stoplight": {
            "id": "32pmqc6arl9oz"
          }
        },
        "DestinationDefinition": {
          "title": "DestinationDefinition",
          "required": [
            "name",
            "dockerRepository",
            "dockerImageTag",
            "documentationUrl"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "dockerRepository": {
              "title": "Dockerrepository",
              "type": "string"
            },
            "dockerImageTag": {
              "title": "Dockerimagetag",
              "type": "string"
            },
            "documentationUrl": {
              "title": "Documentationurl",
              "type": "string"
            },
            "icon": {
              "title": "Icon",
              "type": "string"
            }
          },
          "description": "Destination Definition Model\n\nAttributes:\n- name: str\n- dockerRepository: str\n- dockerImageTag: str\n- documentationUrl: str\n- icon: Optional[str]",
          "x-stoplight": {
            "id": "7fjz17huvi900"
          }
        },
        "Egress": {
          "title": "Egress",
          "required": [
            "name",
            "destination_id",
            "dataset_id",
            "egress_id",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "destination_id": {
              "title": "Destination Id",
              "type": "string"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string"
            },
            "egress_id": {
              "title": "Egress Id",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "5gis83sv9eo2l"
          }
        },
        "EgressRun": {
          "title": "EgressRun",
          "required": [
            "run_id",
            "egress_id",
            "status"
          ],
          "type": "object",
          "properties": {
            "run_id": {
              "title": "Run Id",
              "type": "string"
            },
            "egress_id": {
              "title": "Egress Id",
              "type": "string"
            },
            "status": {
              "title": "Status",
              "type": "string"
            },
            "start_time": {
              "title": "Start Time",
              "type": "string"
            },
            "end_time": {
              "title": "End Time",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "2wmxmp8jt4e06"
          }
        },
        "GetConnectorRunStatusResponse": {
          "title": "GetConnectorRunStatusResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            }
          },
          "description": "Get Connector Run Status Response Model\n\nAttributes:\n- status: ConnectorRunStatus",
          "x-stoplight": {
            "id": "tpvam88gpqj0s"
          }
        },
        "GetEgressRunStatusResponse": {
          "title": "GetEgressRunStatusResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            }
          },
          "x-stoplight": {
            "id": "m1ncxtxxudard"
          }
        },
        "GetIngressRunStatusResponse": {
          "title": "GetIngressRunStatusResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            }
          },
          "x-stoplight": {
            "id": "179mwgfc682lk"
          }
        },
        "Ingress": {
          "title": "Ingress",
          "required": [
            "name",
            "source_id",
            "ingress_id",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "source_id": {
              "title": "Source Id",
              "type": "string"
            },
            "streams_to_sync": {
              "title": "Streams To Sync",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/streamConfig"
              }
            },
            "resource_requirements": {
              "$ref": "#/components/schemas/ResourceRequirements"
            },
            "ingress_id": {
              "title": "Ingress Id",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "9oncg409qv65z"
          }
        },
        "IngressRun": {
          "title": "IngressRun",
          "required": [
            "run_id",
            "ingress_id",
            "status"
          ],
          "type": "object",
          "properties": {
            "run_id": {
              "title": "Run Id",
              "type": "string"
            },
            "ingress_id": {
              "title": "Ingress Id",
              "type": "string"
            },
            "status": {
              "title": "Status",
              "type": "string"
            },
            "start_time": {
              "title": "Start Time",
              "type": "string"
            },
            "end_time": {
              "title": "End Time",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "vqamp0d65zsqt"
          }
        },
        "ListConnectorRunsResponse": {
          "title": "ListConnectorRunsResponse",
          "required": [
            "count",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request id of the request"
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation id of the request"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ConnectorRun"
              }
            }
          },
          "description": "List Connector Runs Response Model\n\nAttributes:\n- data: List[ConnectorRun]",
          "x-stoplight": {
            "id": "f3js36tktos0x"
          }
        },
        "ListConnectorsResponse": {
          "title": "ListConnectorsResponse",
          "required": [
            "count",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request id of the request"
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation id of the request"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ListConnectorEntry"
              }
            }
          },
          "description": "List Connectors Response Model\n\nAttributes:\n- data: List[ListConnectorEntry]",
          "x-stoplight": {
            "id": "ljljgvrso85y4"
          }
        },
        "ListDestinationsResponse": {
          "title": "ListDestinationsResponse",
          "required": [
            "count",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request id of the request"
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation id of the request"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ListDestinationEntry"
              }
            }
          },
          "description": "List Destinations Response Model\n\nAttributes:\n- data: List[ListDestinationEntry]",
          "x-stoplight": {
            "id": "6ly5v1mkzxhj6"
          }
        },
        "ListEgressResponse": {
          "title": "ListEgressResponse",
          "required": [
            "count",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request id of the request"
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation id of the request"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Egress"
              }
            }
          },
          "description": "List Response Model\n\nAttributes:\n- request_id: Optional[str]\n- correlation_id: Optional[str]\n- count: int",
          "x-stoplight": {
            "id": "kv0q4p68r7o16"
          }
        },
        "ListEgressRunsResponse": {
          "title": "ListEgressRunsResponse",
          "required": [
            "count",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request id of the request"
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation id of the request"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EgressRun"
              }
            }
          },
          "description": "List Response Model\n\nAttributes:\n- request_id: Optional[str]\n- correlation_id: Optional[str]\n- count: int",
          "x-stoplight": {
            "id": "ezmxxm231vznt"
          }
        },
        "ListIngressResponse": {
          "title": "ListIngressResponse",
          "required": [
            "data",
            "count"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Ingress"
              }
            },
            "count": {
              "title": "Count",
              "type": "integer"
            }
          },
          "x-stoplight": {
            "id": "8uu3scxb14a5x"
          }
        },
        "ListIngressRunResponse": {
          "title": "ListIngressRunResponse",
          "required": [
            "count",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request id of the request"
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation id of the request"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IngressRun"
              }
            }
          },
          "description": "List Response Model\n\nAttributes:\n- request_id: Optional[str]\n- correlation_id: Optional[str]\n- count: int",
          "x-stoplight": {
            "id": "syxg07gy43f6i"
          }
        },
        "ListSourcesResponse": {
          "title": "ListSourcesResponse",
          "required": [
            "count",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request id of the request"
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation id of the request"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            },
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ListSourceEntry"
              }
            }
          },
          "description": "List Sources Response Model\n\nAttributes:\n- data: List[ListSourceEntry]",
          "x-stoplight": {
            "id": "7mccxthpammhc"
          }
        },
        "RegisterTable": {
          "title": "RegisterTable",
          "required": [
            "table_name",
            "table_path"
          ],
          "type": "object",
          "properties": {
            "table_name": {
              "title": "Table Name",
              "type": "string",
              "description": "This field describes the name of the table."
            },
            "table_path": {
              "title": "Table Path",
              "type": "string",
              "description": "This field references the path to the table"
            },
            "table_prefix": {
              "title": "Table Prefix",
              "type": "string",
              "description": "This field references the prefix of the table name",
              "default": "dataset"
            },
            "schema": {
              "title": "Schema",
              "type": "string",
              "description": "This field describes the schema under which the table should be registered"
            },
            "catalog": {
              "title": "Catalog",
              "type": "string",
              "description": "This field describes the catalog under which the table sohuld be registered"
            },
            "file_format": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__models__v2__dataset__FileFormat"
                }
              ],
              "description": "This field describes the format of the table"
            },
            "table_schema": {
              "title": "Table Schema",
              "type": "object",
              "description": "This field describes the schema of the table"
            }
          },
          "description": "Register Table Model\n\nAttributes:\n- table_name: str\n- table_path: str\n- table_prefix: Optional[str]\n- schema_name: Optional[str]\n- catalog: Optional[str]\n- file_format: Optional[FileFormat]\n- table_schema: Optional[dict]",
          "x-stoplight": {
            "id": "hfn3zzv8gyh0q"
          }
        },
        "ResourceRequirements": {
          "title": "ResourceRequirements",
          "required": [
            "cpu_request",
            "cpu_limit",
            "memory_request",
            "memory_limit"
          ],
          "type": "object",
          "properties": {
            "cpu_request": {
              "title": "Cpu Request",
              "type": "string"
            },
            "cpu_limit": {
              "title": "Cpu Limit",
              "type": "string"
            },
            "memory_request": {
              "title": "Memory Request",
              "type": "string"
            },
            "memory_limit": {
              "title": "Memory Limit",
              "type": "string"
            }
          },
          "description": "Resource Requirements Model\n\nAttributes:\n- cpu_request: str\n- cpu_limit: str\n- memory_request: str\n- memory_limit: str",
          "x-stoplight": {
            "id": "opth9ek4cytyt"
          }
        },
        "RunConnectorResponse": {
          "title": "RunConnectorResponse",
          "required": [
            "run_id"
          ],
          "type": "object",
          "properties": {
            "run_id": {
              "title": "Run Id",
              "type": "string"
            }
          },
          "description": "Run Connector Response Model\n\nAttributes:\n- run_id: str",
          "x-stoplight": {
            "id": "bhrtoyk4zrshk"
          }
        },
        "RunEgressResponse": {
          "title": "RunEgressResponse",
          "required": [
            "run_id"
          ],
          "type": "object",
          "properties": {
            "run_id": {
              "title": "Run Id",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "8kf0xqz4p7ew5"
          }
        },
        "RunIngressResponse": {
          "title": "RunIngressResponse",
          "required": [
            "run_id"
          ],
          "type": "object",
          "properties": {
            "run_id": {
              "title": "Run Id",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "m0wy2ean5xqqj"
          }
        },
        "RunMetrics": {
          "title": "RunMetrics",
          "required": [
            "attempt"
          ],
          "type": "object",
          "properties": {
            "attempt": {
              "title": "Attempt",
              "type": "integer"
            },
            "bytesSynced": {
              "title": "Bytessynced",
              "type": "integer"
            },
            "recordsSynced": {
              "title": "Recordssynced",
              "type": "integer"
            },
            "totalStats": {
              "title": "Totalstats",
              "type": "object"
            },
            "streamStats": {
              "title": "Streamstats",
              "type": "array",
              "items": {
                "type": "object"
              }
            },
            "failureSummary": {
              "title": "Failuresummary",
              "type": "object"
            }
          },
          "description": "Run Metrics Model\n\nAttributes:\n- attempt: int\n- bytesSynced: Optional[int]\n- recordsSynced: Optional[int]\n- totalStats: Optional[dict]\n- streamStats: Optional[List[dict]]\n- failureSummary: Optional[dict]",
          "x-stoplight": {
            "id": "ewz445z5b0190"
          }
        },
        "Schedule": {
          "title": "Schedule",
          "required": [
            "units",
            "timeUnit"
          ],
          "type": "object",
          "properties": {
            "units": {
              "title": "Units",
              "type": "integer"
            },
            "timeUnit": {
              "$ref": "#/components/schemas/timeUnit"
            }
          },
          "description": "Schedule Model\n\nAttributes:\n- units: int\n- timeUnit: timeUnit",
          "x-stoplight": {
            "id": "h0syi2zrwbjan"
          }
        },
        "ScheduleData": {
          "title": "ScheduleData",
          "type": "object",
          "properties": {
            "basicSchedule": {
              "$ref": "#/components/schemas/Schedule"
            },
            "cron": {
              "$ref": "#/components/schemas/CronSchedule"
            }
          },
          "description": "Schedule Data Model\n\nAttributes:\nbasicSchedule: Optional[Schedule]\ncron: Optional[CronSchedule]",
          "x-stoplight": {
            "id": "tisoh7b7nl06b"
          }
        },
        "Source": {
          "title": "Source",
          "required": [
            "sourceDefinitionId",
            "connectionConfiguration",
            "name",
            "sourceId",
            "sourceName",
            "workspaceId",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "sourceDefinitionId": {
              "title": "Sourcedefinitionid",
              "type": "string"
            },
            "connectionConfiguration": {
              "title": "Connectionconfiguration",
              "type": "object"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean",
              "default": false
            },
            "description": {
              "title": "Description",
              "type": "string"
            },
            "sourceId": {
              "title": "Sourceid",
              "type": "string"
            },
            "icon": {
              "title": "Icon",
              "type": "string"
            },
            "sourceName": {
              "title": "Sourcename",
              "type": "string"
            },
            "workspaceId": {
              "title": "Workspaceid",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            },
            "test_connection_status": {
              "title": "Test Connection Status",
              "type": "string"
            },
            "test_connection_ts": {
              "title": "Test Connection Ts",
              "type": "string"
            },
            "connections": {
              "title": "Connections",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "no_of_connections": {
              "title": "No Of Connections",
              "type": "integer"
            }
          },
          "description": "Source Model\n\nAttributes:\n- sourceId: str\n- icon: Optional[str]\n- sourceName: str\n- workspaceId: str\n- created_ts: str\n- updated_ts: str\n- test_connection_status: Optional[str]\n- test_connection_ts: Optional[str]\n- connections: Optional[List[str]]\n- no_of_connections: Optional[int]",
          "x-stoplight": {
            "id": "zw6myf5hy5w4k"
          }
        },
        "SourceDefinition": {
          "title": "SourceDefinition",
          "required": [
            "name",
            "dockerRepository",
            "dockerImageTag",
            "documentationUrl"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "dockerRepository": {
              "title": "Dockerrepository",
              "type": "string"
            },
            "dockerImageTag": {
              "title": "Dockerimagetag",
              "type": "string"
            },
            "documentationUrl": {
              "title": "Documentationurl",
              "type": "string"
            },
            "icon": {
              "title": "Icon",
              "type": "string"
            }
          },
          "description": "Source Definition Model\n\nAttributes:\n- name: str\n- dockerRepository: str\n- dockerImageTag: str\n- documentationUrl: str\n- icon: Optional[str]",
          "x-stoplight": {
            "id": "fgjhwvtxhsjli"
          }
        },
        "StreamsUpdateConfig": {
          "title": "StreamsUpdateConfig",
          "type": "object",
          "properties": {
            "add": {
              "title": "Add",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/streamConfig"
              }
            },
            "remove": {
              "title": "Remove",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/streamConfig"
              }
            },
            "update": {
              "title": "Update",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/streamConfig"
              }
            }
          },
          "description": "Streams Update Config Model\n\nAttributes:\n- add: Optional[List[streamConfig]]\n- remove: Optional[List[streamConfig]]\n- update : Optional[List[streamConfig]]",
          "x-stoplight": {
            "id": "o0xkyu7jvyxl3"
          }
        },
        "UpdateConnector": {
          "title": "UpdateConnector",
          "type": "object",
          "properties": {
            "schedule": {
              "$ref": "#/components/schemas/Schedule"
            },
            "scheduleType": {
              "$ref": "#/components/schemas/scheduleType"
            },
            "scheduleData": {
              "$ref": "#/components/schemas/ScheduleData"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "streamsUpdateConfig": {
              "$ref": "#/components/schemas/StreamsUpdateConfig"
            },
            "resourceRequirements": {
              "$ref": "#/components/schemas/ResourceRequirements"
            },
            "status": {
              "$ref": "#/components/schemas/ConnectorStatus"
            },
            "auto_sync": {
              "title": "Auto Sync",
              "type": "boolean"
            },
            "description": {
              "title": "Description",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean"
            },
            "source_name": {
              "title": "Source Name",
              "type": "string"
            },
            "destination_name": {
              "title": "Destination Name",
              "type": "string"
            },
            "last_triggered_at": {
              "title": "Last Triggered At",
              "type": "string"
            },
            "last_attempt_status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            }
          },
          "description": "Update Connector Model\n\nAttributes:\n- name: Optional[str]\n- streamsUpdateConfig: Optional[StreamsUpdateConfig]\n- resourceRequirements: Optional[ResourceRequirements]\n- status: Optional[ConnectorStatus]\n- auto_sync : Optional[bool]\n- description: Optional[str]\n- is_internal: Optional[bool]\n- source_name: Optional[str]\n- destination_name: Optional[str]\n- last_triggered_at: Optional[str]",
          "x-stoplight": {
            "id": "tuqo0hslisl7z"
          }
        },
        "UpdateDestination": {
          "title": "UpdateDestination",
          "type": "object",
          "properties": {
            "connectionConfiguration": {
              "title": "Connectionconfiguration",
              "type": "object"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean"
            },
            "description": {
              "title": "Description",
              "type": "string"
            },
            "connections": {
              "title": "Connections",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "no_of_connections": {
              "title": "No Of Connections",
              "type": "integer"
            }
          },
          "description": "Update Destination Model\n\nAttributes:\n- connectionConfiguration: Optional[dict]\n- name: Optional[str]\n- is_internal: Optional[bool]\n- description: Optional[str]",
          "x-stoplight": {
            "id": "wm86p2zsmij8r"
          }
        },
        "UpdateDestinationDefinition": {
          "title": "UpdateDestinationDefinition",
          "required": [
            "dockerImageTag"
          ],
          "type": "object",
          "properties": {
            "dockerImageTag": {
              "title": "Dockerimagetag",
              "type": "string"
            }
          },
          "description": "Update Destination Definition Model\n\nAttributes:\n- dockerImageTag: Optional[str]",
          "x-stoplight": {
            "id": "of4xpel0b1qnb"
          }
        },
        "UpdateSource": {
          "title": "UpdateSource",
          "type": "object",
          "properties": {
            "connectionConfiguration": {
              "title": "Connectionconfiguration",
              "type": "object"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "is_internal": {
              "title": "Is Internal",
              "type": "boolean"
            },
            "description": {
              "title": "Description",
              "type": "string"
            },
            "connections": {
              "title": "Connections",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "no_of_connections": {
              "title": "No Of Connections",
              "type": "integer"
            }
          },
          "description": "Update Source Model\n\nAttributes:\n- connectionConfiguration: Optional[dict]\n- name: Optional[str]\n- is_internal: Optional[bool]\n- description: Optional[str]\n- connections: Optional[List[str]]\n- no_of_connections: Optional[int",
          "x-stoplight": {
            "id": "iqazzrfm9kbg6"
          }
        },
        "UpdateSourceDefinition": {
          "title": "UpdateSourceDefinition",
          "required": [
            "dockerImageTag"
          ],
          "type": "object",
          "properties": {
            "dockerImageTag": {
              "title": "Dockerimagetag",
              "type": "string"
            }
          },
          "description": "Update Source Definition Model\n\nAttributes:\n- dockerImageTag: str",
          "x-stoplight": {
            "id": "jhszmmzm2cdpy"
          }
        },
        "Workspace": {
          "title": "Workspace",
          "required": [
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "email": {
              "title": "Email",
              "type": "string"
            }
          },
          "description": "Workspace Model\n\nAttributes:\n- name: str\n- email: Optional[str]",
          "x-stoplight": {
            "id": "ktdqarcmqkkn8"
          }
        },
        "destinationSyncModes": {
          "title": "destinationSyncModes",
          "enum": [
            "append",
            "overwrite",
            "append_dedup"
          ],
          "type": "string",
          "description": "Enum for Destination Sync Modes\n\nAttributes:\n- append: str\n- overwrite: str\n- append_dedup: str",
          "x-stoplight": {
            "id": "mlj3i6d25by29"
          }
        },
        "scheduleType": {
          "title": "scheduleType",
          "enum": [
            "manual",
            "basic",
            "cron"
          ],
          "type": "string",
          "description": "Enum for Schedule Type\n\nAttributes:\n- manual: str\n- basic: str\n- cron: str",
          "x-stoplight": {
            "id": "93cdmbnmyovnq"
          }
        },
        "streamConfig": {
          "title": "streamConfig",
          "required": [
            "streamName"
          ],
          "type": "object",
          "properties": {
            "streamName": {
              "title": "Streamname",
              "type": "string"
            },
            "syncMode": {
              "$ref": "#/components/schemas/syncModes"
            },
            "destinationSyncMode": {
              "$ref": "#/components/schemas/destinationSyncModes"
            },
            "cursorField": {
              "title": "Cursorfield",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Path to the field that will be used to determine if a record is new or modified since the last sync.",
              "depends_on": "syncMode"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "Dataset ID for the stream"
            },
            "dataset_config": {
              "title": "Dataset Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DatasetConfig"
                }
              ],
              "description": "Dataset configuration for the stream"
            }
          },
          "description": "Stream Config Model\n\nAttributes:\n- dataset_id: Optional[str]\n- dataset_config: Optional[DatasetConfig]\n+ All attributes from baseStreamConfig",
          "x-stoplight": {
            "id": "i31yar8a49fmd"
          }
        },
        "syncModes": {
          "title": "syncModes",
          "enum": [
            "full_refresh",
            "incremental"
          ],
          "type": "string",
          "description": "Enum for Sync Modes\n\nAttributes:\n- full_refresh: str\n- incremental: str",
          "x-stoplight": {
            "id": "24jhc2ou8ozgf"
          }
        },
        "timeUnit": {
          "title": "timeUnit",
          "enum": [
            "minutes",
            "hours",
            "days",
            "weeks",
            "months"
          ],
          "type": "string",
          "description": "Enum for Time Units\n\nAttributes:\n- minutes: str\n- hours: str\n- days: str\n- weeks: str\n- months: str",
          "x-stoplight": {
            "id": "dolowdfnlwy0w"
          }
        },
        "ArtifactConfig": {
          "title": "ArtifactConfig",
          "type": "object",
          "properties": {
            "model_path": {
              "title": "Model Path",
              "type": "string",
              "description": "path to the model artifact (s3 / blob / gcfs)."
            },
            "model_object": {
              "title": "Model Object",
              "type": "string",
              "description": "serialised representation of the model artifact."
            },
            "data_preprocessing_pipeline": {
              "title": "Data Preprocessing Pipeline",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PipelineSteps"
              },
              "description": "List of steps in the data preprocessing pipeline - Captures the order in which the preprocessing is performed."
            }
          },
          "description": "Configuration of model artifacts.",
          "x-stoplight": {
            "id": "rm3pajqq79tfp"
          }
        },
        "CreateExperiment": {
          "title": "CreateExperiment",
          "required": [
            "experiment_name"
          ],
          "type": "object",
          "properties": {
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "The name of the experiment."
            },
            "experiment_description": {
              "title": "Experiment Description",
              "type": "string",
              "description": "A brief description of the experiment."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional tags associated with the experiment.",
              "default": []
            }
          },
          "description": "Model for creating an experiment.",
          "x-stoplight": {
            "id": "b38spdszqvxlx"
          }
        },
        "CreateExperimentResponse": {
          "title": "CreateExperimentResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Experiment"
                }
              ],
              "description": "The configuration details of the created experiment."
            }
          },
          "description": "Response model for creating an experiment.",
          "x-stoplight": {
            "id": "7gqjih9ry3cx8"
          }
        },
        "CreateModel": {
          "title": "CreateModel",
          "required": [
            "model_name",
            "experiment_name",
            "task",
            "metrics"
          ],
          "type": "object",
          "properties": {
            "model_name": {
              "title": "Model Name",
              "type": "string",
              "description": "Name of the model."
            },
            "model_description": {
              "title": "Model Description",
              "type": "string",
              "description": "Description of the model."
            },
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "Name of the experiment associated with the model."
            },
            "is_automl": {
              "title": "Is Automl",
              "type": "boolean",
              "description": "Indicates if the model is created using AutoML.",
              "default": false
            },
            "task": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelTasks"
                }
              ],
              "description": "Task associated with the model."
            },
            "model_parameters": {
              "title": "Model Parameters",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelParameters"
                }
              ],
              "description": "Parameters related to the model."
            },
            "metrics": {
              "title": "Metrics",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelMetrics"
                }
              ],
              "description": "Metrics related to the model."
            },
            "artifact_config": {
              "title": "Artifact Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ArtifactConfig"
                }
              ],
              "description": "Configuration of model artifacts."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataConfig"
                }
              ],
              "description": "Configuration of data used for training and validation."
            },
            "model_interpretability": {
              "title": "Model Interpretability",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelInterpretabilityConfig"
                }
              ],
              "description": "Configuration for model interpretability."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Tags associated with the model."
            }
          },
          "description": "Model for creating a new model.",
          "x-stoplight": {
            "id": "nclnbxspcrze1"
          }
        },
        "CreateModelResponse": {
          "title": "CreateModelResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Model"
                }
              ],
              "description": "The configuration details of the created model."
            }
          },
          "description": "Response model for creating a model.",
          "x-stoplight": {
            "id": "u5orjaa1i6k2y"
          }
        },
        "DataConfig": {
          "title": "DataConfig",
          "type": "object",
          "properties": {
            "training_data": {
              "title": "Training Data",
              "type": "string",
              "description": "Registered training dataset ID."
            },
            "validation_data": {
              "title": "Validation Data",
              "type": "string",
              "description": "Registered validation dataset ID."
            },
            "model_data": {
              "title": "Model Data",
              "type": "string",
              "description": "Whole dataset ID - to be split into training and validation data."
            },
            "random_seed": {
              "title": "Random Seed",
              "type": "integer",
              "description": "Random seed for reproduce data splitting."
            }
          },
          "description": "Configuration of data used for training and validation.",
          "x-stoplight": {
            "id": "5si7ipe5zs24y"
          }
        },
        "DeleteExperimentResponse": {
          "title": "DeleteExperimentResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "The status of the request.",
              "default": {}
            }
          },
          "description": "Response model for deleting an experiment.",
          "x-stoplight": {
            "id": "takysy9gb8ydd"
          }
        },
        "DeleteModelResponse": {
          "title": "DeleteModelResponse",
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "Data related to the response.",
              "default": {}
            }
          },
          "description": "Response model for deleting the model.",
          "x-stoplight": {
            "id": "8odofivrjtqi9"
          }
        },
        "Experiment": {
          "title": "Experiment",
          "required": [
            "experiment_name",
            "experiment_id",
            "ml_client_expt_config"
          ],
          "type": "object",
          "properties": {
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "The name of the experiment."
            },
            "experiment_description": {
              "title": "Experiment Description",
              "type": "string",
              "description": "A brief description of the experiment."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional tags associated with the experiment.",
              "default": []
            },
            "experiment_id": {
              "title": "Experiment Id",
              "type": "string",
              "description": "The unique identifier for the experiment."
            },
            "ml_client_expt_config": {
              "title": "Ml Client Expt Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MLFlowExperimentConfig"
                }
              ],
              "description": "The MLFlow configuration for the experiment."
            },
            "models": {
              "title": "Models",
              "type": "array",
              "items": {},
              "description": "The list of models associated with the experiment."
            }
          },
          "description": "Model representing an experiment with additional details.",
          "x-stoplight": {
            "id": "3bnnytfea3mqp"
          }
        },
        "ExperimentList": {
          "title": "ExperimentList",
          "required": [
            "experiment_id",
            "experiment_name",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "experiment_id": {
              "title": "Experiment Id",
              "type": "string",
              "description": "The unique identifier for the experiment."
            },
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "The name of the experiment."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "The timestamp when the experiment was created."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "The timestamp when the experiment was last updated."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Optional tags associated with the experiment."
            },
            "ml_client_expt_config": {
              "title": "Ml Client Expt Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MLFlowExperimentConfig"
                }
              ],
              "description": "The MLFlow configuration for the experiment."
            }
          },
          "x-stoplight": {
            "id": "vjd9cydj9q55p"
          }
        },
        "ExperimentListingResponseValidation": {
          "title": "ExperimentListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "The count of experiments in the response."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExperimentList"
              },
              "description": "The list of experiments in the response."
            }
          },
          "description": "Model for validating experiment listing response.",
          "x-stoplight": {
            "id": "zqlybvc18y4y8"
          }
        },
        "GetExperimentResponse": {
          "title": "GetExperimentResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Experiment"
                }
              ],
              "description": "The details of the retrieved experiment."
            }
          },
          "description": "Response model for retrieving experiment details.",
          "x-stoplight": {
            "id": "hrhg9fboepo02"
          }
        },
        "GetModelResponse": {
          "title": "GetModelResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Model"
                }
              ],
              "description": "The configuration details of the model."
            }
          },
          "description": "Response model for retrieving model details.",
          "x-stoplight": {
            "id": "syc4h13qgm1pm"
          }
        },
        "ListExperimentsResponse": {
          "title": "ListExperimentsResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExperimentListingResponseValidation"
                }
              ],
              "description": "The data containing experiment listings."
            }
          },
          "description": "Response model for listing experiments.",
          "x-stoplight": {
            "id": "5s4wnggbv5j2y"
          }
        },
        "ListModelsResponse": {
          "title": "ListModelsResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelListingResponseValidation"
                }
              ],
              "description": "Data containing count and model results."
            }
          },
          "description": "Response model for listing models.",
          "x-stoplight": {
            "id": "g5hn7l1fkrf6w"
          }
        },
        "MLFlowExperimentConfig": {
          "title": "MLFlowExperimentConfig",
          "required": [
            "experiment_id",
            "artifact_location"
          ],
          "type": "object",
          "properties": {
            "experiment_id": {
              "title": "Experiment Id",
              "type": "string",
              "description": "The unique identifier for the experiment."
            },
            "artifact_location": {
              "title": "Artifact Location",
              "type": "string",
              "description": "The location where artifacts are stored."
            }
          },
          "description": "Configuration details for MLFlow experiments.",
          "x-stoplight": {
            "id": "66rj82ssn0nee"
          }
        },
        "MLFlowModelConfig": {
          "title": "MLFlowModelConfig",
          "required": [
            "artifact_uri",
            "experiment_id",
            "run_id"
          ],
          "type": "object",
          "properties": {
            "artifact_uri": {
              "title": "Artifact Uri",
              "type": "string",
              "description": "URI of the artifact."
            },
            "experiment_id": {
              "title": "Experiment Id",
              "type": "string",
              "description": "ID of the experiment."
            },
            "run_id": {
              "title": "Run Id",
              "type": "string",
              "description": "ID of the run."
            }
          },
          "description": "Configuration details for MLFlow models.",
          "x-stoplight": {
            "id": "nia09zyqf6ixy"
          }
        },
        "Model": {
          "title": "Model",
          "required": [
            "model_name",
            "experiment_name",
            "task",
            "metrics",
            "model_id",
            "ml_client_model_config"
          ],
          "type": "object",
          "properties": {
            "model_name": {
              "title": "Model Name",
              "type": "string",
              "description": "Name of the model."
            },
            "model_description": {
              "title": "Model Description",
              "type": "string",
              "description": "Description of the model."
            },
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "Name of the experiment associated with the model."
            },
            "is_automl": {
              "title": "Is Automl",
              "type": "boolean",
              "description": "Indicates if the model is created using AutoML.",
              "default": false
            },
            "task": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelTasks"
                }
              ],
              "description": "Task associated with the model."
            },
            "model_parameters": {
              "title": "Model Parameters",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelParameters"
                }
              ],
              "description": "Parameters related to the model."
            },
            "metrics": {
              "title": "Metrics",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelMetrics"
                }
              ],
              "description": "Metrics related to the model."
            },
            "artifact_config": {
              "title": "Artifact Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ArtifactConfig"
                }
              ],
              "description": "Configuration of model artifacts."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataConfig"
                }
              ],
              "description": "Configuration of data used for training and validation."
            },
            "model_interpretability": {
              "title": "Model Interpretability",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelInterpretabilityConfig"
                }
              ],
              "description": "Configuration for model interpretability."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Tags associated with the model."
            },
            "model_id": {
              "title": "Model Id",
              "type": "string",
              "description": "Unique identifier for the model."
            },
            "ml_client_model_config": {
              "title": "Ml Client Model Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MLFlowModelConfig"
                }
              ],
              "description": "MLFlow configuration for the model."
            }
          },
          "description": "Model representing a model with additional details.",
          "x-stoplight": {
            "id": "b1dhjaj4wsz91"
          }
        },
        "ModelEntity": {
          "title": "ModelEntity",
          "required": [
            "model_id",
            "model_name"
          ],
          "type": "object",
          "properties": {
            "model_id": {
              "title": "Model Id",
              "type": "string",
              "description": "The unique identifier for the model."
            },
            "model_name": {
              "title": "Model Name",
              "type": "string",
              "description": "The name of the model."
            }
          },
          "description": "Model entity details.",
          "x-stoplight": {
            "id": "ti246nuk5pgtb"
          }
        },
        "ModelInterpretabilityConfig": {
          "title": "ModelInterpretabilityConfig",
          "type": "object",
          "properties": {
            "shap_scores": {
              "title": "Shap Scores",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Representation"
                }
              ],
              "description": "Dictionary of representations for SHAP scores."
            },
            "feature_scores": {
              "title": "Feature Scores",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Representation"
                }
              ],
              "description": "Dictionary of representations for Feature scores."
            }
          },
          "description": "Configuration for model interpretability.",
          "x-stoplight": {
            "id": "nvnweitmid8qy"
          }
        },
        "ModelList": {
          "title": "ModelList",
          "required": [
            "model_name",
            "model_id",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "model_name": {
              "title": "Model Name",
              "type": "string",
              "description": "Name of the model."
            },
            "model_id": {
              "title": "Model Id",
              "type": "string",
              "description": "Unique identifier for the model."
            },
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "Name of the experiment associated with the model."
            },
            "task": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelTasks"
                }
              ],
              "description": "Task associated with the model."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "The timestamp when the experiment was created."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "The timestamp when the experiment was last updated."
            },
            "model_description": {
              "title": "Model Description",
              "type": "string",
              "description": "Description of the model."
            },
            "is_automl": {
              "title": "Is Automl",
              "type": "boolean",
              "description": "Indicates if the model is created using AutoML.",
              "default": false
            },
            "model_parameters": {
              "title": "Model Parameters",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelParameters"
                }
              ],
              "description": "Parameters related to the model."
            },
            "metrics": {
              "title": "Metrics",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelMetrics"
                }
              ],
              "description": "Metrics related to the model."
            },
            "artifact_config": {
              "title": "Artifact Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ArtifactConfig"
                }
              ],
              "description": "Configuration of model artifacts."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Tags associated with the model."
            }
          },
          "x-stoplight": {
            "id": "1frjqeqb4qdl7"
          }
        },
        "ModelListingResponseValidation": {
          "title": "ModelListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "The count of models in the response."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModelList"
              },
              "description": "The list of models in the response as free-form dictionaries."
            }
          },
          "description": "Model for validating experiment listing response.",
          "x-stoplight": {
            "id": "z14yx4mn74e1e"
          }
        },
        "ModelMetrics": {
          "title": "ModelMetrics",
          "type": "object",
          "properties": {
            "training_metrics": {
              "title": "Training Metrics",
              "type": "object",
              "additionalProperties": {
                "type": "number"
              },
              "description": "Metrics from the training process."
            },
            "validation_metrics": {
              "title": "Validation Metrics",
              "type": "object",
              "additionalProperties": {
                "type": "number"
              },
              "description": "Metrics from the validation process."
            }
          },
          "description": "Metrics related to model training and validation.",
          "x-stoplight": {
            "id": "mulc3mus78g6w"
          }
        },
        "ModelParameters": {
          "title": "ModelParameters",
          "type": "object",
          "properties": {
            "model_architecture": {
              "title": "Model Architecture",
              "type": "string",
              "description": "Architecture of the model."
            },
            "library": {
              "title": "Library",
              "type": "string",
              "description": "Library used for the model."
            },
            "library_version": {
              "title": "Library Version",
              "type": "string",
              "description": "Version of the library used for the model."
            },
            "model_args": {
              "title": "Model Args",
              "type": "object",
              "description": "Arguments for the model."
            }
          },
          "description": "Parameters related to the model.",
          "x-stoplight": {
            "id": "0fzpjwb6jeycy"
          }
        },
        "ModelTasks": {
          "title": "ModelTasks",
          "enum": [
            "Classification",
            "Regression",
            "Forecasting"
          ],
          "type": "string",
          "description": "Enumeration of tasks for models.",
          "x-stoplight": {
            "id": "5mdr46bhmahv4"
          }
        },
        "PartialUpdateExperiment": {
          "title": "PartialUpdateExperiment",
          "type": "object",
          "properties": {
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "The new name for the experiment."
            },
            "experiment_description": {
              "title": "Experiment Description",
              "type": "string",
              "description": "The new description for the experiment."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The new tags for the experiment."
            },
            "models": {
              "title": "Models",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UpdateExperimentEntity"
                }
              ],
              "description": "The models to be added or removed."
            }
          },
          "description": "Model for partially updating an experiment.",
          "x-stoplight": {
            "id": "ax7n52jb5wkf5"
          }
        },
        "PipelineSteps": {
          "title": "PipelineSteps",
          "required": [
            "step_name"
          ],
          "type": "object",
          "properties": {
            "step_name": {
              "title": "Step Name",
              "type": "string",
              "description": "Preprocessing step, eg: label_encoder, scaler, one_hot_encoder"
            },
            "object_path": {
              "title": "Object Path",
              "type": "string",
              "description": "Path to the object used in the step - s3 / blob / gcfs path (supports joblib, pickle files)"
            },
            "preproc_object": {
              "title": "Preproc Object",
              "type": "string",
              "description": "Serialised representation of the preproc object"
            },
            "encoding_fields": {
              "title": "Encoding Fields",
              "type": "array",
              "items": {},
              "description": "Fields used for encoding - list of fields relevant for this preprocessor"
            }
          },
          "description": "Steps in the data preprocessing pipeline.",
          "x-stoplight": {
            "id": "7epqyhbw18de8"
          }
        },
        "Representation": {
          "title": "Representation",
          "type": "object",
          "properties": {
            "visual_representation_path": {
              "title": "Visual Representation Path",
              "type": "string",
              "description": "Visual representation (supports png / jpg files uploaded to remote storage)"
            },
            "tabular_representation_path": {
              "title": "Tabular Representation Path",
              "type": "string",
              "description": "Tabular representation (csv uploaded to remote storage)"
            },
            "visual_representation_object": {
              "title": "Visual Representation Object",
              "type": "string",
              "description": "Encoded representation of feature importance plot"
            },
            "tabular_representation_object": {
              "title": "Tabular Representation Object",
              "type": "string",
              "description": "Encoded representation of the feature importance table"
            }
          },
          "description": "Visual and tabular representation of the model.",
          "x-stoplight": {
            "id": "nx7unzzyu7h8p"
          }
        },
        "UpdateExperimentEntity": {
          "title": "UpdateExperimentEntity",
          "type": "object",
          "properties": {
            "add": {
              "title": "Add",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModelEntity"
              },
              "description": "List of models to be added.",
              "default": []
            },
            "remove": {
              "title": "Remove",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ModelEntity"
              },
              "description": "List of models to be removed.",
              "default": []
            }
          },
          "description": "Model for updating experiment entities (add/remove models).",
          "x-stoplight": {
            "id": "tu3sbntkssyz0"
          }
        },
        "UpdateExperimentResponse": {
          "title": "UpdateExperimentResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Experiment"
                }
              ],
              "description": "The updated configuration details of the experiment."
            }
          },
          "description": "Response model for updating an experiment.",
          "x-stoplight": {
            "id": "pcte0envt4z6t"
          }
        },
        "UpdateModel": {
          "title": "UpdateModel",
          "type": "object",
          "properties": {
            "model_name": {
              "title": "Model Name",
              "type": "string",
              "description": "New name for the model."
            },
            "model_description": {
              "title": "Model Description",
              "type": "string",
              "description": "New description for the model."
            },
            "experiment_name": {
              "title": "Experiment Name",
              "type": "string",
              "description": "New ID of the experiment associated with the model."
            },
            "is_automl": {
              "title": "Is Automl",
              "type": "boolean",
              "description": "Indicates if the model is created using AutoML."
            },
            "task": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelTasks"
                }
              ],
              "description": "New task associated with the model."
            },
            "model_parameters": {
              "title": "Model Parameters",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelParameters"
                }
              ],
              "description": "New parameters for the model."
            },
            "metrics": {
              "title": "Metrics",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelMetrics"
                }
              ],
              "description": "New metrics for the model."
            },
            "artifact_config": {
              "title": "Artifact Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ArtifactConfig"
                }
              ],
              "description": "New artifact configuration for the model."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "New tags for the model."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataConfig"
                }
              ],
              "description": "Configuration of data used for training and validation."
            },
            "model_interpretability": {
              "title": "Model Interpretability",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ModelInterpretabilityConfig"
                }
              ],
              "description": "Configuration for model interpretability."
            },
            "ml_client_model_config": {
              "title": "Ml Client Model Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/MLFlowModelConfig"
                }
              ],
              "description": "MLFlow configuration for the model."
            }
          },
          "description": "Model for updating an existing model.",
          "x-stoplight": {
            "id": "8gjigs3eho2ku"
          }
        },
        "UpdateModelResponse": {
          "title": "UpdateModelResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Model"
                }
              ],
              "description": "The updated configuration details of the model."
            }
          },
          "description": "Response model for updating a model ",
          "x-stoplight": {
            "id": "c6cszzrfr0jzn"
          }
        },
        "app__schemas__experiments__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "experiment_name",
            "experiment_id",
            "ml_client_expt_config",
            "tags",
            "created_ts",
            "updated_ts"
          ],
          "type": "string",
          "description": "Enumeration of fields available for listing experiments.",
          "x-stoplight": {
            "id": "vrfxhpcp4etz0"
          }
        },
        "app__schemas__models__ListingFields": {
          "title": "ListingFields",
          "enum": [
            "model_name",
            "model_id",
            "model_description",
            "experiment_name",
            "is_automl",
            "task",
            "tags",
            "model_parameters",
            "metrics",
            "artifact_config",
            "created_ts",
            "updated_ts"
          ],
          "type": "string",
          "description": "Enumeration of fields available for listing models.",
          "x-stoplight": {
            "id": "dlvrltnecqo68"
          }
        },
        "ListConnectorEntry": {
          "title": "ListConnectorEntry",
          "required": [
            "connectionId",
            "name",
            "sourceId",
            "destinationId",
            "workspaceId",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "connectionId": {
              "title": "Connectionid",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "status": {
              "$ref": "#/components/schemas/ConnectorStatus"
            },
            "sourceId": {
              "title": "Sourceid",
              "type": "string"
            },
            "destinationId": {
              "title": "Destinationid",
              "type": "string"
            },
            "source_name": {
              "title": "Source Name",
              "type": "string"
            },
            "destination_name": {
              "title": "Destination Name",
              "type": "string"
            },
            "scheduleType": {
              "$ref": "#/components/schemas/scheduleType"
            },
            "source_type": {
              "title": "Source Type",
              "type": "string"
            },
            "source_type_id": {
              "title": "Source Type Id",
              "type": "string"
            },
            "destination_type": {
              "title": "Destination Type",
              "type": "string"
            },
            "destination_type_id": {
              "title": "Destination Type Id",
              "type": "string"
            },
            "last_triggered_at": {
              "title": "Last Triggered At",
              "type": "string"
            },
            "last_attempt_status": {
              "$ref": "#/components/schemas/ConnectorRunStatus"
            },
            "workspaceId": {
              "title": "Workspaceid",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            }
          },
          "description": "List Connector Entry Model\n\nAttributes:\n- connectionId: str\n- name: str\n- status: Optional[ConnectorStatus]\n- sourceId: str\n- destinationId: str\n- source_name: Optional[str]\n- destination_name: Optional[str]\n- scheduleType: Optional[scheduleType]\n- source_type: Optional[str]\n- source_type_id: Optional[str]\n- destination_type: Optional[str]\n- destination_type_id: Optional[str]\n- last_triggered_at: Optional[str]\n- workspaceId: str\n- created_ts: str\n- updated_ts: str",
          "x-stoplight": {
            "id": "naaib67cq75o8"
          }
        },
        "ListDestinationEntry": {
          "title": "ListDestinationEntry",
          "required": [
            "destinationId",
            "name",
            "destinationName",
            "workspaceId",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "destinationId": {
              "title": "Destinationid",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "destinationName": {
              "title": "Destinationname",
              "type": "string"
            },
            "no_of_connections": {
              "title": "No Of Connections",
              "type": "integer"
            },
            "connections": {
              "title": "Connections",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "test_connection_status": {
              "title": "Test Connection Status",
              "type": "string"
            },
            "test_connection_ts": {
              "title": "Test Connection Ts",
              "type": "string"
            },
            "icon": {
              "title": "Icon",
              "type": "string"
            },
            "workspaceId": {
              "title": "Workspaceid",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            }
          },
          "description": "List Destination Entry Model\n\nAttributes:\n- destinationId: str\n- name: str\n- destinationName: str\n- no_of_connections: Optional[int]\n- connections: Optional[List[str]]\n- test_connection_status: Optional[str]\n- test_connection_ts: Optional[str]\n- icon: Optional[str]\n- workspaceId: str\n- created_ts: str\n- updated_ts: str",
          "x-stoplight": {
            "id": "o02afs3ml817q"
          }
        },
        "ListSourceEntry": {
          "title": "ListSourceEntry",
          "required": [
            "sourceId",
            "name",
            "sourceName",
            "workspaceId",
            "created_ts",
            "updated_ts"
          ],
          "type": "object",
          "properties": {
            "sourceId": {
              "title": "Sourceid",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "sourceName": {
              "title": "Sourcename",
              "type": "string"
            },
            "no_of_connections": {
              "title": "No Of Connections",
              "type": "integer"
            },
            "connections": {
              "title": "Connections",
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": []
            },
            "test_connection_status": {
              "title": "Test Connection Status",
              "type": "string"
            },
            "test_connection_ts": {
              "title": "Test Connection Ts",
              "type": "string"
            },
            "icon": {
              "title": "Icon",
              "type": "string"
            },
            "workspaceId": {
              "title": "Workspaceid",
              "type": "string"
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string"
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string"
            }
          },
          "description": "List Source Entry Model\n\nAttributes:\n- sourceId: str\n- name: str\n- sourceName: str\n- no_of_connections: Optional[int]\n- connections: Optional[List[str]]\n- test_connection_status: Optional[str]\n- test_connection_ts: Optional[str]\n- icon: Optional[str]\n- workspaceId: str\n- created_ts: str\n- updated_ts: str",
          "x-stoplight": {
            "id": "vgm7kzppbsyj4"
          }
        },
        "DocumentPatch": {
          "title": "DocumentPatch",
          "type": "object",
          "properties": {
            "document_name": {
              "title": "Document Name",
              "type": "string",
              "description": "Name of the document"
            },
            "batch_name": {
              "title": "Batch Name",
              "type": "string",
              "description": "Name of the batch to which the document belongs to"
            },
            "doc_type_id": {
              "title": "Doc Type Id",
              "type": "string",
              "description": "Identifier for the document type of the document"
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "Identifier for the workflow associated with the document type of the document"
            },
            "image_url": {
              "title": "Image Url",
              "type": "string",
              "description": "Cloud path of the document file"
            },
            "no_of_pages": {
              "title": "No Of Pages",
              "type": "integer",
              "description": "Number of pages of the document"
            },
            "doc_type_name": {
              "title": "Doc Type Name",
              "type": "string",
              "description": "Name of the document type of the document"
            },
            "registration_document": {
              "title": "Registration Document",
              "type": "boolean",
              "description": "This field describes whether the document was uplaoded for doc_type registration"
            },
            "job_id": {
              "title": "Job Id",
              "type": "string",
              "description": "Identifier for the job of the document"
            },
            "ocr_job_id": {
              "title": "Ocr Job Id",
              "type": "string",
              "description": "Identifier for the OCR job of the document"
            },
            "pages": {
              "title": "Pages",
              "type": "object",
              "description": "Page details and extraction data of the document"
            },
            "meta": {
              "title": "Meta",
              "type": "object",
              "description": "Additional meta data of the document"
            },
            "ocr_json_path": {
              "title": "Ocr Json Path",
              "type": "string",
              "description": "OCR json cloud path of the document"
            },
            "textract_json_path": {
              "title": "Textract Json Path",
              "type": "string",
              "description": "Textract JSON cloud path of the document"
            },
            "HITL_status": {
              "title": "Hitl Status",
              "type": "string",
              "description": "HITL status of the document"
            },
            "HITL_action": {
              "title": "Hitl Action",
              "type": "string",
              "description": "HITL action of the document"
            },
            "document_embedding_path_dict": {
              "title": "Document Embedding Path Dict",
              "type": "object",
              "description": "Document embeddings cloud path of the document"
            },
            "predicted_doc_type_id": {
              "title": "Predicted Doc Type Id",
              "type": "string",
              "description": "Predicted doc_type_id for the document"
            },
            "is_doctype_reviewed": {
              "title": "Is Doctype Reviewed",
              "type": "boolean",
              "description": "Review status of document type of the document"
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {},
              "description": "List of users assigned to the document"
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {},
              "description": "List of user groups assigned to the document"
            }
          },
          "x-stoplight": {
            "id": "rzddbw4vn1b9r"
          }
        },
        "AsyncDocumentResultsResponse": {
          "properties": {
            "status": {
              "type": "string",
              "title": "Status",
              "description": "This field describes the status of the response."
            },
            "message": {
              "type": "string",
              "title": "Message",
              "description": "This field describes the message of the response."
            },
            "request_id": {
              "type": "string",
              "title": "Request Id",
              "description": "This field describes the request ID for the request"
            },
            "metadata": {
              "type": "object",
              "title": "Metadata",
              "description": "This field contains the client input metadata",
              "default": {}
            },
            "data": {
              "$ref": "#/components/schemas/DocumentResponseData",
              "description": "This field describes about the data"
            }
          },
          "type": "object",
          "required": [
            "status",
            "message",
            "request_id",
            "data"
          ],
          "title": "AsyncDocumentResultsResponse",
          "x-stoplight": {
            "id": "d85n7wfsllzht"
          }
        },
        "Body_hdfc_sync_inference_api_v2_documents_hdfc_post": {
          "properties": {
            "input_file": {
              "type": "string",
              "format": "binary",
              "title": "Input File"
            },
            "metadata": {
              "type": "string",
              "title": "Metadata"
            },
            "debug": {
              "type": "string",
              "title": "Debug",
              "default": "false"
            }
          },
          "type": "object",
          "title": "Body_hdfc_sync_inference_api_v2_documents_hdfc_post",
          "x-stoplight": {
            "id": "f3j7ai5z5xl01"
          }
        },
        "DocumentInferAsyncRequest": {
          "properties": {
            "inputs": {
              "items": {
                "$ref": "#/components/schemas/DocumentInput"
              },
              "type": "array",
              "title": "Inputs",
              "description": "This field describes the List of dicts representing each input document.",
              "default": []
            },
            "doc_type_id": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Doc Type Id",
              "description": "This field describes the ID of the document type for inference.",
              "default": ""
            }
          },
          "type": "object",
          "title": "DocumentInferAsyncRequest",
          "x-stoplight": {
            "id": "8hqs0xx1m7m97"
          }
        },
        "DocumentInput": {
          "properties": {
            "name": {
              "type": "string",
              "title": "Name"
            },
            "input_type": {
              "$ref": "#/components/schemas/InputTypeOptions"
            },
            "file_extension": {
              "$ref": "#/components/schemas/FileExtensionOptions"
            },
            "files": {
              "items": {},
              "type": "array",
              "title": "Files"
            },
            "metadata": {
              "type": "object",
              "title": "Metadata"
            }
          },
          "type": "object",
          "required": [
            "name",
            "input_type",
            "file_extension",
            "files",
            "metadata"
          ],
          "title": "DocumentInput",
          "x-stoplight": {
            "id": "k7gbfev93hkqc"
          }
        },
        "DocumentResponseData": {
          "properties": {
            "document_name": {
              "type": "string",
              "title": "Document Name",
              "description": "This field describes the document name."
            },
            "document_id": {
              "type": "string",
              "title": "Document Id",
              "description": "This field describes the document id."
            },
            "doc_type_id": {
              "type": "string",
              "title": "Doc Type Id",
              "description": "This field describes the document type id.",
              "default": ""
            },
            "doc_type_name": {
              "type": "string",
              "title": "Doc Type Name",
              "description": "This field describes the document type name.",
              "default": ""
            },
            "state": {
              "type": "string",
              "title": "State",
              "description": "This field describes the state of the document.",
              "default": ""
            },
            "extraction_results": {
              "items": {},
              "type": "array",
              "title": "Extraction Results",
              "description": "Contains the extracted attribute results",
              "default": []
            },
            "validation_results": {
              "items": {},
              "type": "array",
              "title": "Validation Results",
              "description": "Contains the validation results for attributes",
              "default": []
            },
            "pages_info": {
              "type": "object",
              "title": "Pages Info",
              "description": "Contains the processed pages info",
              "default": {}
            }
          },
          "type": "object",
          "required": [
            "document_name",
            "document_id"
          ],
          "title": "DocumentResponseData",
          "x-stoplight": {
            "id": "to25hvlqnbzh6"
          }
        },
        "FileExtensionOptions": {
          "type": "string",
          "enum": [
            "pdf",
            "jpg",
            "tiff",
            "png"
          ],
          "title": "FileExtensionOptions",
          "x-stoplight": {
            "id": "8a6yvu16bzzkc"
          }
        },
        "InputTypeOptions": {
          "type": "string",
          "enum": [
            "base64",
            "url",
            "binary"
          ],
          "title": "InputTypeOptions",
          "x-stoplight": {
            "id": "6jqjeigzmu7bv"
          }
        },
        "SyncDocumentRequest": {
          "properties": {
            "input": {
              "items": {},
              "type": "array",
              "title": "Input",
              "decription": "This contains the list of input images for the document as per the input_type"
            },
            "input_type": {
              "type": "string",
              "title": "Input Type",
              "decription": "This describes the type of file uploaded in the input image list."
            },
            "doc_type_id": {
              "type": "string",
              "title": "Doc Type Id",
              "decription": "Doc type ID of the document"
            },
            "document_name": {
              "type": "string",
              "title": "Document Name",
              "decription": "Document name of the document to be uploaded"
            },
            "file_extension": {
              "type": "string",
              "title": "File Extension",
              "decription": "File extension of each input file present in input list"
            },
            "metadata": {
              "type": "object",
              "title": "Metadata",
              "decription": "Metadata associated with the file upload"
            }
          },
          "type": "object",
          "required": [
            "input",
            "input_type",
            "doc_type_id",
            "document_name",
            "file_extension",
            "metadata"
          ],
          "title": "SyncDocumentRequest",
          "x-stoplight": {
            "id": "ksxu655s1rqw8"
          }
        },
        "SyncDocumentResponse": {
          "properties": {
            "status": {
              "type": "string",
              "title": "Status",
              "description": "The status of the document extraction process."
            },
            "message": {
              "type": "string",
              "title": "Message",
              "description": "A message providing additional information about the extraction process."
            },
            "request_id": {
              "type": "string",
              "title": "Request Id",
              "description": "A unique identifier for the request."
            },
            "correlation_id": {
              "type": "string",
              "title": "Correlation Id",
              "description": "A unique identifier used to correlate the request with other related processes."
            },
            "metadata": {
              "type": "object",
              "title": "Metadata",
              "description": "A dictionary containing metadata associated with the document."
            },
            "document_name": {
              "type": "string",
              "title": "Document Name",
              "description": "The name of the document being extracted."
            },
            "document_id": {
              "type": "string",
              "title": "Document Id",
              "description": "A unique identifier for the document."
            },
            "doc_type_id": {
              "type": "string",
              "title": "Doc Type Id",
              "description": "A unique identifier for the document type."
            },
            "extraction_results": {
              "items": {},
              "type": "array",
              "title": "Extraction Results",
              "description": "A list of results from the document extraction process."
            },
            "matching_results": {
              "items": {},
              "type": "array",
              "title": "Matching Results",
              "description": "A list of results from the document matching process."
            },
            "validation_results": {
              "items": {},
              "type": "array",
              "title": "Validation Results",
              "description": "A list of results from the document validation process."
            },
            "pages_info": {
              "type": "object",
              "title": "Pages Info",
              "decription": "This contains each page of the document and their metadata."
            },
            "data": {
              "anyOf": [
                {
                  "items": {},
                  "type": "array"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Data",
              "description": "Will be populated only in case of multiple documents uploaded to the sync endpoint.",
              "default": []
            }
          },
          "type": "object",
          "required": [
            "status",
            "message",
            "request_id",
            "correlation_id",
            "metadata",
            "document_name",
            "document_id",
            "doc_type_id",
            "extraction_results",
            "matching_results",
            "validation_results",
            "pages_info"
          ],
          "title": "SyncDocumentResponse",
          "x-stoplight": {
            "id": "oosh1ykmt00ky"
          }
        },
        "FieldUnivariateSummary": {
          "title": "FieldUnivariateSummary",
          "required": [
            "name",
            "type"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "description": "This field describes the name of the column in the dataset."
            },
            "type": {
              "title": "Type",
              "type": "string",
              "description": "This field describes the data type of the column in the dataset."
            },
            "zeroes": {
              "title": "Zeroes",
              "type": "integer",
              "description": "This field describes the number of zeroes for that column in the dataset.",
              "default": 0
            },
            "zeroes_percentage": {
              "title": "Zeroes Percentage",
              "type": "string",
              "description": "This field describes the percentage of zeroes for that column in the dataset."
            },
            "missing": {
              "title": "Missing",
              "type": "integer",
              "description": "This field describes the number of missing values for that column in the dataset.",
              "default": 0
            },
            "missing_percentage": {
              "title": "Missing Percentage",
              "type": "string",
              "description": "This field describes the percentage of missing values for that column in the dataset."
            },
            "size": {
              "title": "Size",
              "type": "string",
              "description": "This field describes the size of the column in the dataset."
            },
            "distinct": {
              "title": "Distinct",
              "type": "integer",
              "description": "This field describes the number of distinct values for that column in the dataset.",
              "default": 0
            },
            "distinct_percentage": {
              "title": "Distinct Percentage",
              "type": "string",
              "description": "This field describes the percentage of distinct values for that column in the dataset."
            }
          },
          "x-stoplight": {
            "id": "1mqu4ekc5mo91"
          }
        },
        "CreateNodeDefinition": {
          "title": "CreateNodeDefinition",
          "required": [
            "node_definition_name",
            "display_name",
            "node_group",
            "ui_config"
          ],
          "type": "object",
          "properties": {
            "node_definition_name": {
              "title": "Node Definition Name",
              "type": "string",
              "description": "Name of the node definition."
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "Display name of the node definition."
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "Description of the model.",
              "default": ""
            },
            "node_group": {
              "title": "Node Group",
              "type": "string",
              "description": "Group of the node definition."
            },
            "ui_config": {
              "title": "Ui Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UIConfig"
                }
              ],
              "description": "UI Config of the node definition."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Tags associated with the node definition.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "Status of the node definition.",
              "default": "inactive"
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "description": "This field describes the user id used to create node definition.",
              "default": ""
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment details of the node definition.",
              "default": {}
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field describes whether a node type is preset or not.",
              "default": false
            },
            "runtime": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinitionRuntime"
                }
              ],
              "description": " This field describes the runtime of the node definition.",
              "default": "python"
            }
          },
          "description": "Model for node definitions.",
          "x-stoplight": {
            "id": "d0jo4ygee716s"
          }
        },
        "CreateWorkflow": {
          "title": "CreateWorkflow",
          "required": [
            "workflow_name",
            "workflow_description",
            "tasks_config"
          ],
          "type": "object",
          "properties": {
            "workflow_name": {
              "title": "Workflow Name",
              "type": "string",
              "description": "This field describes the name of the workflow."
            },
            "workflow_description": {
              "title": "Workflow Description",
              "type": "string",
              "description": "This field provides a description about the workflow."
            },
            "owner": {
              "title": "Owner",
              "type": "string",
              "description": "This field describes the service that owns / is responsible for this workflow.",
              "default": "starfire"
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "This field describes any set of tags that can be associated to the workflow.",
              "default": []
            },
            "workflow_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__schemas__workflows__WorkflowTypes"
                }
              ],
              "description": "This field describes the type or the use case of the workflow.",
              "default": "analytics"
            },
            "tasks_config": {
              "title": "Tasks Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WorkflowCreationConfig"
                }
              ],
              "description": "This field desribes the config that will be used by the spark or pandas deployments for a given task."
            },
            "internal": {
              "title": "Internal",
              "type": "boolean",
              "description": "This field tracks whether the given workflow is an internal workflow or not.",
              "default": false
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field is a boolean that is used to describe if a workflow is a preset workflow or not.",
              "default": false
            },
            "draft": {
              "title": "Draft",
              "type": "boolean",
              "description": "This field describes whether the workflow is in draft state or not.",
              "default": false
            },
            "schedule_interval": {
              "title": "Schedule Interval",
              "type": "string",
              "description": "This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment."
            },
            "graph_id": {
              "title": "Graph Id",
              "type": "string",
              "description": "This field describes the unique identifier for the generated DAG (post deployment)."
            },
            "datasets": {
              "title": "Datasets",
              "type": "object",
              "description": "This field describes the datasets that are created by the workflow.",
              "default": {}
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment configuration for the workflow.",
              "default": {}
            },
            "users": {
              "title": "Users",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUser"
              },
              "description": "This field describes the list of users that can be associated to the workflow.",
              "default": []
            },
            "user_groups": {
              "title": "User Groups",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EntityUserGroup"
              },
              "description": "This field describes the list of user groups that can be associated to the workflow.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the current status of the workflow",
              "default": "DRAFT"
            },
            "metrics_dataset": {
              "title": "Metrics Dataset",
              "type": "object",
              "description": "This field describes about the metrics datasets",
              "default": {}
            },
            "client": {
              "title": "Client",
              "type": "string",
              "description": "This field describes the client details required for the data. This information will be needed to access any client-specific data."
            },
            "deploy_params": {
              "title": "Deploy Params",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeployParams"
                }
              ],
              "description": "Parameters that were used for deploying the workflow.",
              "default": {}
            },
            "job_list": {
              "title": "Job List",
              "type": "array",
              "items": {},
              "description": "This field describes the list of job runs that are associated to the workflow.",
              "default": []
            }
          },
          "x-stoplight": {
            "id": "56fk6b2ckpuq8"
          }
        },
        "NodeDefinitionListingResponse": {
          "title": "NodeDefinitionListingResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinitionListingResponseValidation"
                }
              ],
              "description": "Data containing count and node definition results."
            }
          },
          "description": "Response model for listing models.",
          "x-stoplight": {
            "id": "us6leb0plx92t"
          }
        },
        "NodeDefinitionListingResponseValidation": {
          "title": "NodeDefinitionListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "The count of node definitions in the response."
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/NodeDefinitionsList"
              },
              "description": "The list of node definitions in the response."
            }
          },
          "description": "Model for validating experiment listing response.",
          "x-stoplight": {
            "id": "2dgfnob0bhqvq"
          }
        },
        "NodeDefinitionReadResponse": {
          "title": "NodeDefinitionReadResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinition"
                }
              ],
              "description": "The node definition that was read."
            }
          },
          "description": "Response model for reading a node definition.",
          "x-stoplight": {
            "id": "33k0pcgj8k8d8"
          }
        },
        "NodeDefinitionRegisterResponse": {
          "title": "NodeDefinitionRegisterResponse",
          "required": [
            "status",
            "data"
          ],
          "type": "object",
          "properties": {
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "The unique identifier for the request."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "The unique identifier for the correlation."
            },
            "status": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RequestStatus"
                }
              ],
              "description": "The status of the request."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "The message for the response."
            },
            "data": {
              "title": "Data",
              "type": "object",
              "description": "The response for node definition that was registered."
            }
          },
          "description": "Response model for registering a node definition.",
          "x-stoplight": {
            "id": "ayjy5tcivkoa4"
          }
        },
        "NodeDefinitionRuntime": {
          "title": "NodeDefinitionRuntime",
          "enum": [
            "python",
            "spark"
          ],
          "type": "string",
          "description": "This class enumerates the different runtimes that are supported for a Node Type.",
          "x-stoplight": {
            "id": "g35uiygg0n5z5"
          }
        },
        "NodeDefinitionsList": {
          "title": "NodeDefinitionsList",
          "required": [
            "node_definition_id",
            "node_definition_name",
            "display_name",
            "node_group",
            "status",
            "created_ts",
            "updated_ts",
            "preset",
            "runtime"
          ],
          "type": "object",
          "properties": {
            "node_definition_id": {
              "title": "Node Definition Id",
              "type": "string",
              "description": "ID of the node definition."
            },
            "node_definition_name": {
              "title": "Node Definition Name",
              "type": "string",
              "description": "Name of the node definition."
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "Display name of the node definition."
            },
            "node_group": {
              "title": "Node Group",
              "type": "string",
              "description": "Group of the node definition."
            },
            "ui_config": {
              "title": "Ui Config",
              "type": "object",
              "description": "Ui Config of node definition",
              "default": {}
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "Status of the node definition."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "The timestamp when the node definition was created."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "The timestamp when the node definition was last updated."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "Whether the node definition is preset or not."
            },
            "runtime": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinitionRuntime"
                }
              ],
              "description": "The runtime of the node definition."
            }
          },
          "description": "Model for listing node definitions.\n# TODO: Add more fields in ListingFields as required and make them optional here.",
          "x-stoplight": {
            "id": "5r1cot92vzifs"
          }
        },
        "PatchNodeDefinition": {
          "title": "PatchNodeDefinition",
          "type": "object",
          "properties": {
            "node_definition_name": {
              "title": "Node Definition Name",
              "type": "string",
              "description": "Name of the node definition."
            },
            "display_name": {
              "title": "Display Name",
              "type": "string",
              "description": "Display name of the node definition."
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "Description of the model."
            },
            "node_group": {
              "title": "Node Group",
              "type": "string",
              "description": "Group of the node definition."
            },
            "ui_config": {
              "title": "Ui Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UIConfig"
                }
              ],
              "description": "UI Config of the node definition."
            },
            "tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Tags associated with the node definition.",
              "default": []
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "Status of the node definition."
            },
            "user_id": {
              "title": "User Id",
              "type": "string",
              "description": "This field describes the user id used to create node definition."
            },
            "deployment": {
              "title": "Deployment",
              "type": "object",
              "description": "This field describes the deployment details of the node definition."
            },
            "preset": {
              "title": "Preset",
              "type": "boolean",
              "description": "This field describes whether a node type is preset or not."
            },
            "runtime": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NodeDefinitionRuntime"
                }
              ],
              "description": " This field describes the runtime of the node definition."
            }
          },
          "description": "Model for patching node definitions.",
          "x-stoplight": {
            "id": "3d3qyxh9qag82"
          }
        },
        "UIConfig": {
          "title": "UIConfig",
          "type": "object",
          "properties": {
            "icon": {
              "title": "Icon",
              "type": "string",
              "description": "Icon of the node.",
              "default": "get-code"
            },
            "form_schema": {
              "title": "Form Schema",
              "type": "object",
              "description": "Form Schema of the node."
            },
            "ui_schema": {
              "title": "Ui Schema",
              "type": "object",
              "description": "UI Schema of the node."
            },
            "allowed_sources": {
              "title": "Allowed Sources",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Allowed sources for the node.",
              "default": []
            }
          },
          "description": "Model for UI Config.",
          "x-stoplight": {
            "id": "dri28zxcw978s"
          }
        },
        "DatasetGroupSummarization": {
          "title": "DatasetGroupSummarization",
          "type": "object",
          "properties": {
            "profile_datasets": {
              "title": "Profile Datasets",
              "type": "boolean",
              "description": "This field indicates whether to profile datasets or skip it. Profiling is skipped only if the dataset has been previously profiled.",
              "default": false
            }
          },
          "x-stoplight": {
            "id": "1d3g0elsn6w9j"
          }
        },
        "DistanceFunction": {
          "title": "DistanceFunction",
          "enum": [
            "cosine",
            "euclidean",
            "dotproduct"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "qsbj2aq6qeig2"
          }
        },
        "IndexParams": {
          "title": "IndexParams",
          "type": "object",
          "properties": {
            "distance_function": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DistanceFunction"
                }
              ],
              "description": "This field describes the distance function for vector similarity in the dataset."
            },
            "dimensions": {
              "title": "Dimensions",
              "type": "integer",
              "description": "This field describes the dimensionality of the vector in the dataset."
            }
          },
          "x-stoplight": {
            "id": "l4dpnfym1oti3"
          }
        },
        "IndexPolicy": {
          "title": "IndexPolicy",
          "enum": [
            "flat",
            "quantizedFlat",
            "diskANN"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "yypqs7tn2azim"
          }
        },
        "AccessConfig": {
          "title": "AccessConfig",
          "required": [
            "file_format"
          ],
          "type": "object",
          "properties": {
            "file_format": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__models__v2__connector__FileFormat"
                }
              ],
              "description": "File format for the dataset"
            }
          },
          "description": "Access Config Model\n\nAttributes:\n- file_format: FileFormat",
          "x-stoplight": {
            "id": "eddp75mj2c6hu"
          }
        },
        "DatasetAccessMode": {
          "title": "DatasetAccessMode",
          "required": [
            "storage_type"
          ],
          "type": "object",
          "properties": {
            "storage_type": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StorageType"
                }
              ],
              "description": "Type of storage for the dataset"
            },
            "access_config": {
              "title": "Access Config",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AccessConfig"
                }
              ],
              "description": "Access configuration for the dataset"
            }
          },
          "description": "Dataset Access Mode Model\n\nAttributes:\n- storage_type: StorageType\n- access_config: Optional[AccessConfig]",
          "x-stoplight": {
            "id": "g3wrycebtf4pb"
          }
        },
        "DatasetConfig": {
          "title": "DatasetConfig",
          "required": [
            "dataset_name"
          ],
          "type": "object",
          "properties": {
            "dataset_name": {
              "title": "Dataset Name",
              "type": "string",
              "description": "Name of the dataset"
            },
            "access_modes": {
              "title": "Access Modes",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasetAccessMode"
              },
              "description": "List of access modes for the dataset",
              "default": [
                {
                  "storage_type": "file",
                  "access_config": {
                    "file_format": "delta"
                  }
                }
              ]
            },
            "dataset_description": {
              "title": "Dataset Description",
              "type": "string"
            },
            "dataset_schema": {
              "$ref": "#/components/schemas/DatasetField"
            },
            "dataset_group": {
              "title": "Dataset Group",
              "type": "string"
            }
          },
          "description": "Dataset Config Model\n\nAttributes:\n- dataset_name: str\n- access_modes: List[DatasetAccessMode]\n- dataset_description: Optional[str]\n- dataset_schema: Optional[DatasetField]\n- dataset_group: Optional[str]",
          "x-stoplight": {
            "id": "vfa1lmh3gayzj"
          }
        },
        "app__models__v2__connector__FileFormat": {
          "title": "FileFormat",
          "enum": [
            "csv",
            "parquet",
            "json",
            "delta"
          ],
          "type": "string",
          "description": "Enum for File Format\n\nAttributes:\n- csv: str\n- parquet: str\n- json: str\n- delta: str",
          "x-stoplight": {
            "id": "9f7pwtqb1ax5w"
          }
        },
        "app__models__v2__dataset__FileFormat": {
          "title": "FileFormat",
          "enum": [
            "parquet",
            "csv",
            "json"
          ],
          "type": "string",
          "description": "Enum for File Format\n\nAttributes:\n- parquet: str\n- csv: str\n- json: str",
          "x-stoplight": {
            "id": "2o9edv5e5ix4b"
          }
        },
        "AcknowledgeNotification": {
          "title": "AcknowledgeNotification",
          "required": [
            "notification_id"
          ],
          "type": "object",
          "properties": {
            "notification_id": {
              "title": "Notification Id",
              "type": "string",
              "description": "The unique identifier of the notification."
            }
          },
          "description": "AcknowledgeNotification model",
          "x-stoplight": {
            "id": "rod4oz4uxtoov"
          }
        },
        "DetailedNotification": {
          "title": "DetailedNotification",
          "required": [
            "notification_id",
            "message",
            "created_ts",
            "updated_ts",
            "status"
          ],
          "type": "object",
          "properties": {
            "notification_id": {
              "title": "Notification Id",
              "type": "string",
              "description": "The unique identifier of the notification."
            },
            "message": {
              "title": "Message",
              "type": "object",
              "description": "The message that had produced."
            },
            "created_ts": {
              "title": "Created Ts",
              "type": "string",
              "description": "The timestamp when the notification was created."
            },
            "updated_ts": {
              "title": "Updated Ts",
              "type": "string",
              "description": "The timestamp when the notification was updated."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "The status of the notification."
            }
          },
          "description": "DetailedNotification model",
          "x-stoplight": {
            "id": "47gpcotnmb2ok"
          }
        },
        "ListSubscriptions": {
          "title": "ListSubscriptions",
          "required": [
            "topic"
          ],
          "type": "object",
          "properties": {
            "topic": {
              "title": "Topic",
              "type": "string",
              "description": "The topic the subscriber is subscribed to."
            }
          },
          "description": "ListSubscriber model",
          "x-stoplight": {
            "id": "uesujt9bhkkpo"
          }
        },
        "ListSubscriptionsResponse": {
          "title": "ListSubscriptionsResponse",
          "required": [
            "subscriptions"
          ],
          "type": "object",
          "properties": {
            "subscriptions": {
              "title": "Subscriptions",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ListSubscriptions"
              },
              "description": "A List of dictionary of all registered subscriber details."
            }
          },
          "description": "ListSubscriberResponse model",
          "x-stoplight": {
            "id": "muwm6f25xxtz8"
          }
        },
        "NotficationsResponse": {
          "title": "NotficationsResponse",
          "required": [
            "notifications",
            "count"
          ],
          "type": "object",
          "properties": {
            "notifications": {
              "title": "Notifications",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DetailedNotification"
              },
              "description": "A List of dictionary of all registered notification details."
            },
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "The count of notifications."
            }
          },
          "description": "NotificationsResponse model",
          "x-stoplight": {
            "id": "3ikk7jbhaco7n"
          }
        },
        "Notification": {
          "title": "Notification",
          "required": [
            "notification_id"
          ],
          "type": "object",
          "properties": {
            "notification_id": {
              "title": "Notification Id",
              "type": "string",
              "description": "The notification id."
            }
          },
          "description": "Publisher model",
          "x-stoplight": {
            "id": "dw9082yglhp5m"
          }
        },
        "Publisher": {
          "title": "Publisher",
          "required": [
            "topic",
            "message"
          ],
          "type": "object",
          "properties": {
            "topic": {
              "title": "Topic",
              "maxLength": 236,
              "type": "string",
              "description": "The topic the subscriber is subscribed to."
            },
            "message": {
              "title": "Message",
              "type": "object",
              "description": "The message that had to be published."
            }
          },
          "description": "Publisher model",
          "x-stoplight": {
            "id": "bbpxqnt638ay3"
          }
        },
        "PublisherResponse": {
          "title": "PublisherResponse",
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Notification"
                }
              ],
              "description": "A dictionary of producer details."
            }
          },
          "description": "ProducerResponse model",
          "x-stoplight": {
            "id": "u7ro0vezdydv4"
          }
        },
        "Subscribe": {
          "title": "Subscribe",
          "required": [
            "topic"
          ],
          "type": "object",
          "properties": {
            "topic": {
              "title": "Topic",
              "type": "string",
              "description": "The topic the subscriber is subscribed to."
            }
          },
          "description": "Subscriber model",
          "x-stoplight": {
            "id": "y081tk23t54ib"
          }
        },
        "SubscribeConfig": {
          "title": "SubscribeConfig",
          "required": [
            "consumer_group_id",
            "topic"
          ],
          "type": "object",
          "properties": {
            "consumer_group_id": {
              "title": "Consumer Group Id",
              "type": "string",
              "description": "The unique identifier of the subscriber."
            },
            "topic": {
              "title": "Topic",
              "type": "string",
              "description": "The topic the subscriber is subscribed to."
            }
          },
          "description": "SubscriberConfig model",
          "x-stoplight": {
            "id": "f155jjyrw1dgz"
          }
        },
        "SubscribeResponse": {
          "title": "SubscribeResponse",
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SubscribeConfig"
                }
              ],
              "description": "A dictionary of subscriber details."
            }
          },
          "description": "SubscriberResponse model",
          "x-stoplight": {
            "id": "f0jktl9s39dga"
          }
        },
        "UnSubscribe": {
          "title": "UnSubscribe",
          "required": [
            "consumer_group_id"
          ],
          "type": "object",
          "properties": {
            "consumer_group_id": {
              "title": "Consumer Group Id",
              "type": "string",
              "description": "The unique identifier of the subscriber."
            }
          },
          "description": "UnSubscriber model",
          "x-stoplight": {
            "id": "tvlmwah7uqj6p"
          }
        },
        "UnSubscribeResponse": {
          "title": "UnSubscribeResponse",
          "required": [
            "data"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/UnSubscribe"
                }
              ],
              "description": "A dictionary of subscriber details."
            }
          },
          "description": "UnSubscriberResponse model",
          "x-stoplight": {
            "id": "36zlk6xag77n9"
          }
        },
        "ActionCreateRequest": {
          "title": "ActionCreateRequest",
          "required": [
            "name",
            "description",
            "parameters",
            "workflow_id"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "minLength": 1,
              "type": "string",
              "description": "Field is required"
            },
            "description": {
              "title": "Description",
              "minLength": 1,
              "type": "string",
              "description": "Field is required"
            },
            "parameters": {
              "title": "Parameters",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ParametersModel"
                }
              ],
              "description": "Field is required"
            },
            "workflow_id": {
              "title": "Workflow Id",
              "minLength": 1,
              "type": "string",
              "description": "Field is required"
            },
            "created_at": {
              "title": "Created At",
              "type": "string",
              "description": "Timestamp when the action is created",
              "default": "NOW()"
            },
            "updated_at": {
              "title": "Updated At",
              "type": "string",
              "description": "Timestamp when the action is last updated",
              "default": "NOW()"
            }
          },
          
          "x-stoplight": {
            "id": "ovegvh1w1dwm9"
          }
        },
        "AddMessagesResponse": {
          "title": "AddMessagesResponse",
          "required": [
            "data",
            "request_id",
            "correlation_id",
            "status"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AddMessagesResponseValidation"
                }
              ],
              "description": "This field describes the data of messages."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            }
          },
          "x-stoplight": {
            "id": "gql4ln4x37tb2"
          }
        },
        "AddMessagesResponseValidation": {
          "title": "AddMessagesResponseValidation",
          "required": [
            "job_id"
          ],
          "type": "object",
          "properties": {
            "job_id": {
              "title": "Job Id",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "ty5cahcgx8x87"
          }
        },
        "AgentBase": {
          "title": "AgentBase",
          "required": [
            "name",
            "model_config"
          ],
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "description": "Name of the agent"
            },
            "instructions": {
              "title": "Instructions",
              "type": "string",
              "description": "Instructions of the agent"
            },
            "workflow_id": {
              "title": "Workflow Id",
              "type": "string",
              "description": "workflow id of the agent"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "dataset id of the agent"
            },
            "model_config": {
              "title": "Model Config",
              "type": "object",
              "description": "LLM model config to be used by the agent"
            },
            "actions": {
              "title": "Actions",
              "type": "array",
              "items": {},
              "description": "Actions of the agent"
            },
            "files": {
              "title": "Files",
              "type": "array",
              "items": {},
              "description": "Files of the agent"
            }
          },
          "x-stoplight": {
            "id": "5fpv6r54785b3"
          }
        },
        "AgentUpdate": {
          "title": "AgentUpdate",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string"
            },
            "instructions": {
              "title": "Instructions",
              "type": "string"
            },
            "model_config": {
              "title": "Model Config",
              "type": "object"
            },
            "hasSearchContext": {
              "title": "Hassearchcontext",
              "type": "boolean"
            },
            "actions": {
              "title": "Actions",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "files": {
              "title": "Files",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "x-stoplight": {
            "id": "ya1ht6g7cuhcn"
          }
        },
        "ChatBase": {
          "title": "ChatBase",
          "type": "object",
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "default": "New Chat"
            }
          },
          "x-stoplight": {
            "id": "fk8nxjigim95b"
          }
        },
        "ChatCreateResponse": {
          "title": "ChatCreateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ChatCreateResponseValidation"
                }
              ],
              "description": "This field describes the list of chats."
            }
          },
          "x-stoplight": {
            "id": "a9rczs07zx8ns"
          }
        },
        "ChatCreateResponseValidation": {
          "title": "ChatCreateResponseValidation",
          "required": [
            "chatId",
            "name"
          ],
          "type": "object",
          "properties": {
            "chatId": {
              "title": "Chatid",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "message": {
              "title": "Message",
              "type": "string",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "wu73h4se93ity"
          }
        },
        "ChatDeleteResponse": {
          "title": "ChatDeleteResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "message"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "This field describes the message for API response."
            }
          },
          "x-stoplight": {
            "id": "uwpxj3o2cooc3"
          }
        },
        "ChatListResponse": {
          "title": "ChatListResponse",
          "required": [
            "id",
            "name",
            "userId",
            "accountId",
            "created_at",
            "updated_at"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "string"
            },
            "name": {
              "title": "Name",
              "type": "string"
            },
            "userId": {
              "title": "Userid",
              "type": "string"
            },
            "accountId": {
              "title": "Accountid",
              "type": "string"
            },
            "created_at": {
              "title": "Created At",
              "type": "string",
              "description": "This field describes the created date of chat."
            },
            "updated_at": {
              "title": "Updated At",
              "type": "string",
              "description": "This field describes the latest date of updation of the chat."
            }
          },
          "x-stoplight": {
            "id": "q9b4sskwg6vum"
          }
        },
        "ChatListingResponse": {
          "title": "ChatListingResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ChatListingResponseValidation"
                }
              ],
              "description": "This field describes the list of chats."
            }
          },
          "x-stoplight": {
            "id": "tdphnh3tkch2p"
          }
        },
        "ChatListingResponseValidation": {
          "title": "ChatListingResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of chats"
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChatListResponse"
              },
              "description": "This field describes the list of chats"
            }
          },
          "x-stoplight": {
            "id": "g73koei0ye99t"
          }
        },
        "ChatMessage": {
          "title": "ChatMessage",
          "required": [
            "content",
            "sender"
          ],
          "type": "object",
          "properties": {
            "content": {
              "title": "Content",
              "type": "string"
            },
            "sender": {
              "title": "Sender",
              "type": "string"
            },
            "ui_context": {
              "title": "Ui Context",
              "type": "object"
            }
          },
          "x-stoplight": {
            "id": "n8nge3huoblc0"
          }
        },
        "ChatMessagesResponse": {
          "title": "ChatMessagesResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ChatMessagesResponseValidation"
                }
              ],
              "description": "This field describes the list of messages."
            }
          },
          "x-stoplight": {
            "id": "184v6rarsw427"
          }
        },
        "ChatMessagesResponseValidation": {
          "title": "ChatMessagesResponseValidation",
          "required": [
            "count",
            "results"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "This field describes the total number of messages"
            },
            "results": {
              "title": "Results",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MessagesResponse"
              },
              "description": "This field describes the list of messages"
            }
          },
          "x-stoplight": {
            "id": "ntblsz7y2j4uo"
          }
        },
        "MessagesResponse": {
          "title": "MessagesResponse",
          "required": [
            "id",
            "chat_id",
            "role",
            "message",
            "timestamp"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Id",
              "type": "string"
            },
            "chat_id": {
              "title": "Chat Id",
              "type": "string",
              "description": "This field describes the chatId the message."
            },
            "role": {
              "title": "Role",
              "type": "string",
              "description": "This field describes the senderId the message."
            },
            "message": {
              "title": "Message",
              "type": "string",
              "description": "This field describes the content the message."
            },
            "timestamp": {
              "title": "Timestamp",
              "type": "integer",
              "description": "This field describes the timestamp of message."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status.",
              "default": "Complete"
            }
          },
          "x-stoplight": {
            "id": "3mn97mdd611sa"
          }
        },
        "NotificationBase": {
          "title": "NotificationBase",
          "required": [
            "title",
            "body",
            "priority",
            "chatId"
          ],
          "type": "object",
          "properties": {
            "title": {
              "title": "Title",
              "type": "string"
            },
            "body": {
              "title": "Body",
              "type": "string"
            },
            "icon": {
              "title": "Icon",
              "type": "string",
              "default": ""
            },
            "url": {
              "title": "Url",
              "type": "string",
              "default": ""
            },
            "priority": {
              "title": "Priority",
              "type": "string"
            },
            "chatId": {
              "title": "Chatid",
              "type": "string"
            },
            "messageId": {
              "title": "Messageid",
              "type": "string",
              "default": ""
            }
          },
          "x-stoplight": {
            "id": "qbwvbt8w5vtv7"
          }
        },
        "NotificationCreateResponse": {
          "title": "NotificationCreateResponse",
          "required": [
            "status",
            "request_id",
            "correlation_id",
            "data"
          ],
          "type": "object",
          "properties": {
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "data": {
              "title": "Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotificationCreateResponseValidation"
                }
              ],
              "description": "This field describes the list of notifications."
            }
          },
          "x-stoplight": {
            "id": "c0xtqsttd6coy"
          }
        },
        "NotificationCreateResponseValidation": {
          "title": "NotificationCreateResponseValidation",
          "required": [
            "notification_id"
          ],
          "type": "object",
          "properties": {
            "notification_id": {
              "title": "Notification Id",
              "type": "string"
            }
          },
          "x-stoplight": {
            "id": "u4vurxjlzq2yx"
          }
        },
        "ParametersModel": {
          "title": "ParametersModel",
          "required": [
            "properties"
          ],
          "type": "object",
          "properties": {
            "type": {
              "title": "Type",
              "minLength": 1,
              "type": "string",
              "description": "Field is required",
              "default": "object"
            },
            "properties": {
              "title": "Properties",
              "type": "object",
              "description": "Field is required"
            }
          },
          "x-stoplight": {
            "id": "a7goxhsdqmy6j"
          }
        },
        "app__schemas__agents__CompletionsMessagesResponse": {
          "title": "CompletionsMessagesResponse",
          "required": [
            "data",
            "status"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "type": "array",
              "items": {},
              "description": "This field describes the list of messages."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            }
          },
          "x-stoplight": {
            "id": "zh24iaamtgz2t"
          }
        },
        "app__schemas__chat__CompletionsMessagesResponse": {
          "title": "CompletionsMessagesResponse",
          "required": [
            "data",
            "request_id",
            "correlation_id",
            "status"
          ],
          "type": "object",
          "properties": {
            "data": {
              "title": "Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MessagesResponse"
              },
              "description": "This field describes the list of messages."
            },
            "request_id": {
              "title": "Request Id",
              "type": "string",
              "description": "This field describes the request ID of input payload."
            },
            "correlation_id": {
              "title": "Correlation Id",
              "type": "string",
              "description": "This field describes the correlation ID of input payload."
            },
            "status": {
              "title": "Status",
              "type": "string",
              "description": "This field describes the list API response status."
            }
          },
          "x-stoplight": {
            "id": "gk2q3w649cvva"
          }
        },
        "DatasetSynchronizeStatus": {
          "title": "DatasetSynchronizeStatus",
          "enum": [
            "IN_PROGRESS",
            "SYNC_FAILED",
            "SYNC_COMPLETED"
          ],
          "type": "string",
          "description": "An enumeration.",
          "x-stoplight": {
            "id": "bermmdohnsipl"
          }
        },
        "baseStreamConfig": {
          "title": "baseStreamConfig",
          "required": [
            "streamName"
          ],
          "type": "object",
          "properties": {
            "streamName": {
              "title": "Streamname",
              "type": "string"
            },
            "syncMode": {
              "$ref": "#/components/schemas/syncModes"
            },
            "destinationSyncMode": {
              "$ref": "#/components/schemas/destinationSyncModes"
            },
            "cursorField": {
              "title": "Cursorfield",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Path to the field that will be used to determine if a record is new or modified since the last sync.",
              "depends_on": "syncMode"
            },
            "dataset_id": {
              "title": "Dataset Id",
              "type": "string",
              "description": "Dataset ID for the stream"
            }
          },
          "description": "Stream Config Model\n\nAttributes:\n- streamName: str\n- syncMode: Optional[syncModes]\n- destinationSyncMode: Optional[destinationSyncModes]\n- cursorField: Optional[List[str]]\n- dataset_id: Optional[str]",
          "x-stoplight": {
            "id": "zs0z2r8b63l2u"
          }
        }
      },
      "securitySchemes": {
        "HTTPBasic": {
          "type": "http",
          "scheme": "basic"
        }
      }
    }
  }
