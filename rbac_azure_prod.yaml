openapi: 3.0.2
info:
  version: 2.0.0
  title: The VUE Platform Core API
  description: The VUE Platform Core API
paths:
  /api/v2/admin/accounts:
    get:
      tags:
        - Admin
        - v2
      summary: List Accounts
      description: |-
        Get a list of all accounts.

        keyword arguments:
        skip -- skip the first n accounts (default 0, int)
        limit -- limit the number of accounts returned (default 100, int)
        details -- return account details (default False, bool)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        AccountResponse -- AccountResponse object
                            message -- message (str)
                            data -- Account object or list of Account objects
      operationId: list_accounts_api_v2_admin_accounts_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 150
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create Account
      description: |-
        Creates a new account and creates the admin user for this account with admin role.

        keyword arguments:
        request -- request object (Request)
        details -- AccountCreate object
                    name -- account name (str)
                    email -- admin email (str)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        AccountResponse -- AccountResponse object
                            message -- message (str)
                            data -- AccountCreateResponse object
                                        account -- Account object
                                        users -- list of User objects
                                        api_keys -- list of api keys
      operationId: create_account_api_v2_admin_accounts_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: emailenabled
          in: query
          required: false
          schema:
            type: boolean
            title: Emailenabled
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get Account
      description: |-
        Get a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        AccountResponse -- AccountResponse object
                            message -- message (str)
                            data -- Account object
      operationId: get_account_api_v2_admin_accounts__account_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Admin
        - v2
      summary: Update Account
      description: |-
        Update a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        account_update -- AccountUpdate object
                            name -- account name (str)
                            license -- account license (str)
                            active -- account active (bool)
                            add_users -- list of users to add to this account (list)
                            remove_users -- list of users to remove from this account (list)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        AccountResponse -- AccountResponse object
                            message -- message (str)
                            data -- Account object
      operationId: update_account_api_v2_admin_accounts__account_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: emailenabled
          in: query
          required: false
          schema:
            type: boolean
            title: Emailenabled
            default: true
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete Account
      description: |-
        Delete a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        AccountResponse -- AccountResponse object
                            message -- message (str)
                            data -- Account object
      operationId: delete_account_api_v2_admin_accounts__account_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/users':
    get:
      tags:
        - Admin
        - v2
      summary: List Users
      description: |-
        Get a list of all users for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        details -- return user details (default True, bool)
        email -- user email (default None, str)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- list of User objects or list of user ids
      operationId: list_users_api_v2_admin_accounts__account_id__users_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
        - name: email
          in: query
          required: false
          schema:
            type: string
            title: Email
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create User
      description: |-
        Create a new user for a specific account.

        keyword arguments:
        details -- UserCreate object
                    name -- user name (str)
                    email -- user email (str)
                    roles -- list of role ids(list)
                    permissions -- list of permission ids(list)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- UserCreateResponse object
      operationId: create_user_api_v2_admin_accounts__account_id__users_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: emailenabled
          in: query
          required: false
          schema:
            type: boolean
            title: Emailenabled
            default: true
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/admin/users:
    get:
      tags:
        - Admin
        - v2
      summary: List Users
      description: |-
        Get a list of all users for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        details -- return user details (default True, bool)
        email -- user email (default None, str)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- list of User objects or list of user ids
      operationId: list_users_api_v2_admin_users_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
        - name: account_id
          in: query
          required: false
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
        - name: email
          in: query
          required: false
          schema:
            type: string
            title: Email
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create User
      description: |-
        Create a new user for a specific account.

        keyword arguments:
        details -- UserCreate object
                    name -- user name (str)
                    email -- user email (str)
                    roles -- list of role ids(list)
                    permissions -- list of permission ids(list)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- UserCreateResponse object
      operationId: create_user_api_v2_admin_users_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: query
          required: false
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: emailenabled
          in: query
          required: false
          schema:
            type: boolean
            title: Emailenabled
            default: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/users/{user_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get User
      description: |-
        Get a specific user for a specific account.

        keyword arguments:
        user_id -- user id (uuid.UUID)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- UserGetResponse object
      operationId: get_user_api_v2_admin_accounts__account_id__users__user_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Admin
        - v2
      summary: Update User
      description: |-
        Update a specific user for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        user_id -- user id (uuid.UUID)
        user_update -- UserUpdate object
                        name -- user name (str)
                        email -- user email (str)
                        active -- user active (bool)
                        add_roles -- list of roles to add to this user (list)
                        remove_roles -- list of roles to remove from this user (list)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- UserUpdateResponse object
      operationId: update_user_api_v2_admin_accounts__account_id__users__user_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete User
      description: |-
        Delete a specific user for a specific account.

        keyword arguments:
        user_id -- user id (uuid.UUID)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- User object
      operationId: delete_user_api_v2_admin_accounts__account_id__users__user_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/users/{user_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get User
      description: |-
        Get a specific user for a specific account.

        keyword arguments:
        user_id -- user id (uuid.UUID)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- UserGetResponse object
      operationId: get_user_api_v2_admin_users__user_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: query
          required: false
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete User
      description: |-
        Delete a specific user for a specific account.

        keyword arguments:
        user_id -- user id (uuid.UUID)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        UserResponse -- UserResponse object
                            message -- message (str)
                            data -- User object
      operationId: delete_user_api_v2_admin_users__user_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: query
          required: false
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/users/{user_id}/api_keys':
    get:
      tags:
        - Admin
        - v2
      summary: List Api Keys
      description: |-
        List all the API key ID associated with an user.

        keyword arguments:
        details -- return roles and permission details (default False)

        returns:
        List of API key IDs
      operationId: list_api_keys_api_v2_admin_accounts__account_id__users__user_id__api_keys_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiKeyResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create Api Key
      description: |-
        Create and map it to an user under an account.
        Within an account, an user can have atmost 10 live API keys.
        Roles assignable to an API is a subset of the roles from the user
        invoking this API.

        keyword arguments:

        returns:
        ApiKeyResponse -- The API key itself
        ApiError -- Error message if the API key creation failed
      operationId: create_api_key_api_v2_admin_accounts__account_id__users__user_id__api_keys_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/users/{user_id}/api_keys/{api_key_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get Api Key Details
      description: |-
        Get the attached roles & permissions, user, account of the API Key ID.

        keyword arguments:

        returns:
      operationId: get_api_key_details_api_v2_admin_accounts__account_id__users__user_id__api_keys__api_key_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: api_key_id
          in: path
          required: true
          schema:
            type: string
            title: Api Key Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete Api Key
      description: |-
        Delete the API key and unlinks from attached roles & permissions, and roles.

        keyword arguments:

        returns:
      operationId: delete_api_key_api_v2_admin_accounts__account_id__users__user_id__api_keys__api_key_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: api_key_id
          in: path
          required: true
          schema:
            type: string
            title: Api Key Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Admin
        - v2
      summary: Update Api Key Details
      description: |-
        Add or remove roles and permissions from an API key ID.

        keyword arguments:

        returns:
      operationId: update_api_key_details_api_v2_admin_accounts__account_id__users__user_id__api_keys__api_key_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: api_key_id
          in: path
          required: true
          schema:
            type: string
            title: Api Key Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateApiKeyResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/usergroups':
    get:
      tags:
        - Admin
        - v2
      summary: List User Groups
      description: |-
        Get a list of all user groups for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        details -- return user group details (default True, bool)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- list of user group objects or list of user group ids
      operationId: list_user_groups_api_v2_admin_accounts__account_id__usergroups_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: name
          in: query
          required: false
          schema:
            type: string
            title: Name
        - name: user_ids
          in: query
          required: false
          schema:
            type: string
            title: User Ids
        - name: role_ids
          in: query
          required: false
          schema:
            type: string
            title: Role Ids
        - name: permission_ids
          in: query
          required: false
          schema:
            type: string
            title: Permission Ids
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create User Group
      description: |-
        Create a new user group for a specific account.

        keyword arguments:
        details -- UserGroupCreate object
                    name -- user group name (str)
                    roles -- list of roles (list)
                    user_ids -- list of user ids (list)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- UserGroupCreateResponse object
      operationId: create_user_group_api_v2_admin_accounts__account_id__usergroups_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/usergroups/{user_group_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get User Group
      description: |-
        Get a specific user group for a specific account.

        keyword arguments:
        user_group_id -- user group id (uuid.UUID)
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- UserGroup object
      operationId: get_user_group_api_v2_admin_accounts__account_id__usergroups__user_group_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: user_group_id
          in: path
          required: true
          schema:
            type: string
            title: User Group Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Admin
        - v2
      summary: Update User Group
      description: |-
        Update a specific user group for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        user_group_id -- user group id (uuid.UUID)
        user_group_update -- UserGroupUpdate object
                                name -- user group name (str)
                                add_roles -- list of roles to add to this user group (list)
                                remove_roles -- list of roles to remove from this user group (list)
                                add_users -- list of users to add to this user group (list)
                                remove_users -- list of users to remove from this user group (list)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- UserGroup object
      operationId: update_user_group_api_v2_admin_accounts__account_id__usergroups__user_group_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: user_group_id
          in: path
          required: true
          schema:
            type: string
            title: User Group Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserGroupUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete User Group
      description: |-
        Delete a specific user group for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        user_group_id -- user group id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- UserGroup object
      operationId: delete_user_group_api_v2_admin_accounts__account_id__usergroups__user_group_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: user_group_id
          in: path
          required: true
          schema:
            type: string
            title: User Group Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/roles':
    get:
      tags:
        - Admin
        - v2
      summary: List Roles
      description: |-
        Get a list of all roles for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        RoleResponse -- RoleResponse object
                            message -- message (str)
                            data -- list of roles
      operationId: list_roles_api_v2_admin_accounts__account_id__roles_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
        - name: user_ids
          in: query
          required: false
          schema:
            type: string
            title: User Ids
        - name: user_group_ids
          in: query
          required: false
          schema:
            type: string
            title: User Group Ids
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create Role
      description: |-
        Create a new role for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        role -- Role object
                name -- role name (str)
                permissions -- list of permissions (list)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- message -- message (str)
                data -- Role object
      operationId: create_role_api_v2_admin_accounts__account_id__roles_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreateModel'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/roles/{role_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get Role
      description: Get a specific role for a specific account.
      operationId: get_role_api_v2_admin_accounts__account_id__roles__role_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: role_id
          in: path
          required: true
          schema:
            type: string
            title: Role Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Admin
        - v2
      summary: Update Role
      description: |-
        Update a specific role for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        role_id -- role id (uuid.UUID)
        role_update -- RoleUpdate object
                        name -- role name (str)
                        permissions -- list of permissions (list)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- Role object
      operationId: update_role_api_v2_admin_accounts__account_id__roles__role_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: role_id
          in: path
          required: true
          schema:
            type: string
            title: Role Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleUpdateModel'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete Role
      description: |-
        Delete a specific role for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        role_id -- role id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- Role object
      operationId: delete_role_api_v2_admin_accounts__account_id__roles__role_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: role_id
          in: path
          required: true
          schema:
            type: string
            title: Role Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/permissions':
    get:
      tags:
        - Admin
        - v2
      summary: List Permissions
      description: |-
        Get a list of all permissions for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        PermissionResponse -- PermissionResponse object
                            message -- message (str)
                            data -- list of permissions
      operationId: list_permissions_api_v2_admin_accounts__account_id__permissions_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
        - name: name
          in: query
          required: false
          schema:
            type: string
            title: Name
        - name: role_ids
          in: query
          required: false
          schema:
            type: string
            title: Role Ids
        - name: user_ids
          in: query
          required: false
          schema:
            type: string
            title: User Ids
        - name: user_group_ids
          in: query
          required: false
          schema:
            type: string
            title: User Group Ids
        - name: group
          in: query
          required: false
          schema:
            type: string
            title: Group
        - name: entity
          in: query
          required: false
          schema:
            type: string
            title: Entity
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create Permission
      description: |-
        Create a new permission for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        permission -- Permission object
                        route -- route (str)
                        name -- permission name (str)
                        methods -- list of methods (list)
                        group -- group (str)
                        entity -- entity (str)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- message -- message (str)
            data -- Permission object
      operationId: create_permission_api_v2_admin_accounts__account_id__permissions_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/permissions/{permission_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get Permission
      description: Get a specific permission for a specific account.
      operationId: get_permission_api_v2_admin_accounts__account_id__permissions__permission_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: permission_id
          in: path
          required: true
          schema:
            type: string
            title: Permission Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Admin
        - v2
      summary: Update Permission
      description: |-
        Update a specific permission for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        permission_id -- permission id (uuid.UUID)
        permission_update -- PermissionUpdate object
                        name -- permission name (str)
                        permissions -- list of permissions (list)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- Permission object
      operationId: update_permission_api_v2_admin_accounts__account_id__permissions__permission_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: permission_id
          in: path
          required: true
          schema:
            type: string
            title: Permission Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete Permission
      description: |-
        Delete a specific permission for a specific account.

        keyword arguments:
        account_id -- account id (uuid.UUID)
        permission_id -- permission id (uuid.UUID)
        db -- database session (default Depends(get_db), Session)
        access_token -- access token (default None, str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        returns:
        dict -- dict with message and data keys
                message -- message (str)
                data -- Permission object
      operationId: delete_permission_api_v2_admin_accounts__account_id__permissions__permission_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: permission_id
          in: path
          required: true
          schema:
            type: string
            title: Permission Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/resource_allocation':
    get:
      tags:
        - Admin
        - v2
      summary: List Resource Allocations
      description: |-
        List all resource allocations

        keyword arguments:
        skip -- skip the first n resource_allocations (default 0, int)
        limit -- limit the number of resource_allocations returned (default 100, int)
        details -- include resource_allocation details (default False, bool)
        db -- database connection (Session)
        access_token -- access token (str)
        x_api_key -- api-key (str)
        accounts_id -- accounts-id (str)
        dataset_id -- dataset-id (str)
        name -- name of resource_allocation (str)
        user_ids -- user-ids (str)
        user_group_ids -- user-group-ids (str)

        returns:
        response -- response (dict)
            message -- message (dict)
            data -- resource_allocations (dict)
      operationId: list_resource_allocations_api_v2_admin_accounts__account_id__resource_allocation_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
        - name: details
          in: query
          required: false
          schema:
            type: boolean
            title: Details
            default: false
        - name: name
          in: query
          required: false
          schema:
            type: string
            title: Name
        - name: dataset_id
          in: query
          required: false
          schema:
            type: string
            title: Dataset Id
        - name: user_ids
          in: query
          required: false
          schema:
            type: string
            title: User Ids
        - name: user_group_ids
          in: query
          required: false
          schema:
            type: string
            title: User Group Ids
        - name: role_ids
          in: query
          required: false
          schema:
            type: string
            title: Role Ids
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create Resource Allocation
      description: |-
        Create resource_allocation

        keyword arguments:
        resource_allocation -- resource_allocation object
        db -- database connection (Session)
        access_token -- access token (str)
        x_api_key -- api-key (str)
        accounts_id -- accounts-id (str)

        returns:
        response -- response (dict)
            message -- message (dict)
            data -- resource_allocation (dict)
      operationId: create_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceAllocationCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/resource_allocation/{resource_allocation_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get Resource Allocation
      description: |-
        Get resource_allocation

        keyword arguments:
        resource_allocation_id -- resource_allocation-id (uuid)
        db -- database connection (Session)
        access_token -- access token (str)
        x_api_key -- api-key (str)
        accounts_id -- accounts-id (str)

        returns:
        response -- response (dict)
            message -- message (dict)
            data -- resource_allocation (dict)
      operationId: get_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: resource_allocation_id
          in: path
          required: true
          schema:
            type: string
            title: Resource Allocation Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Admin
        - v2
      summary: Update Resource Allocation Overwrite
      description: |-
        Update resource_allocation

        keyword arguments:
        resource_allocation_id -- resource_allocation-id (uuid)
        resource_allocation -- resource_allocation object
        db -- database connection (Session)
        access_token -- access token (str)
        x_api_key -- api-key (str)
        accounts_id -- accounts-id (str)

        returns:
        response -- response (dict)
            message -- message (dict)
            data -- resource_allocation (dict)
      operationId: update_resource_allocation_overwrite_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: resource_allocation_id
          in: path
          required: true
          schema:
            type: string
            title: Resource Allocation Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceAllocationUpdateOverwrite'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete Resource Allocation
      description: |-
        Delete resource_allocation

        keyword arguments:
        resource_allocation_id -- resource_allocation-id (uuid)
        db -- database connection (Session)
        access_token -- access token (str)
        x_api_key -- api-key (str)
        accounts_id -- accounts-id (str)

        returns:
        response -- response (dict)
            message -- message (dict)
      operationId: delete_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: resource_allocation_id
          in: path
          required: true
          schema:
            type: string
            title: Resource Allocation Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Admin
        - v2
      summary: Update Resource Allocation
      description: |-
        Update resource_allocation

        keyword arguments:
        resource_allocation_id -- resource_allocation-id (uuid)
        resource_allocation -- resource_allocation object
        db -- database connection (Session)
        access_token -- access token (str)
        x_api_key -- api-key (str)
        accounts_id -- accounts-id (str)

        returns:
        response -- response (dict)
            message -- message (dict)
            data -- resource_allocation (dict)
      operationId: update_resource_allocation_api_v2_admin_accounts__account_id__resource_allocation__resource_allocation_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: resource_allocation_id
          in: path
          required: true
          schema:
            type: string
            title: Resource Allocation Id
            format: uuid
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceAllocationUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/admin/trino_rbac_rules:
    get:
      tags:
        - Admin
        - v2
      summary: Get Rules
      operationId: get_rules_api_v2_admin_trino_rbac_rules_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v2/admin/rbac_status:
    get:
      tags:
        - Admin
        - v2
      summary: Get Rbac Status
      operationId: get_rbac_status_api_v2_admin_rbac_status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: skip
          in: query
          required: false
          schema:
            type: integer
            title: Skip
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 100
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create Rbac Status
      operationId: create_rbac_status_api_v2_admin_rbac_status_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RbacStatusCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/rbac_status/{rbac_status_id}':
    get:
      tags:
        - Admin
        - v2
      summary: Get Rbac Status By Id
      operationId: get_rbac_status_by_id_api_v2_admin_rbac_status__rbac_status_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: rbac_status_id
          in: path
          required: true
          schema:
            type: string
            title: Rbac Status Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete Rbac Status
      operationId: delete_rbac_status_api_v2_admin_rbac_status__rbac_status_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: rbac_status_id
          in: path
          required: true
          schema:
            type: string
            title: Rbac Status Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
        - Admin
        - v2
      summary: Modify Rbac Status
      operationId: modify_rbac_status_api_v2_admin_rbac_status__rbac_status_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: rbac_status_id
          in: path
          required: true
          schema:
            type: string
            title: Rbac Status Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RbacStatusUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/list_identity_providers:
    get:
      tags:
        - Authentication
        - v2
      summary: List Idp
      description: |-
        Get a list of all suppported identity providers.

        keyworkd arguments:
        request -- request object (Request)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        return:
        dict -- dict with message and data keys
                message -- list of identity providers (str)
                data -- idp_login_urls
      operationId: list_idp_api_v2_authentication_list_identity_providers_get
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: is_custom
          in: query
          required: false
          schema:
            type: boolean
            title: Is Custom
            default: false
        - name: name
          in: query
          required: false
          schema:
            type: string
            title: Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/authentication/sign_up_token_callback/{idp}/organization/{organization}':
    get:
      tags:
        - Authentication
        - v2
      summary: Sign Up Token Callback
      operationId: sign_up_token_callback_api_v2_authentication_sign_up_token_callback__idp__organization__organization__get
      parameters:
        - name: code
          in: query
          required: true
          schema:
            title: Code
        - name: idp
          in: path
          required: true
          schema:
            type: string
            title: Idp
        - name: organization
          in: path
          required: true
          schema:
            type: string
            title: Organization
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/authentication/sign_in_token_callback/{idp}/organization/{organization}':
    get:
      tags:
        - Authentication
        - v2
      summary: Sign In Token Callback
      description: |-
        Gets authorization code from keycloak and exchanges it for access token.
        Fetch the list of accounts to which the user is linked to

        keyword arguments:
        code -- authorization code
        idp -- identity provider (str)
        request -- request object (Request)
        db -- database session (default Depends(get_db), Session)

        return:
        redirect -- redirect to redirect page
      operationId: sign_in_token_callback_api_v2_authentication_sign_in_token_callback__idp__organization__organization__get
      parameters:
        - name: code
          in: query
          required: true
          schema:
            title: Code
        - name: idp
          in: path
          required: true
          schema:
            type: string
            title: Idp
        - name: organization
          in: path
          required: true
          schema:
            type: string
            title: Organization
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/authentication/signup/custom-token-callback/{idp}/organization/{organization}':
    get:
      tags:
        - Authentication
        - v2
      summary: Custom Token Signup Callback
      operationId: custom_token_signup_callback_api_v2_authentication_signup_custom_token_callback__idp__organization__organization__get
      parameters:
        - name: code
          in: query
          required: true
          schema:
            title: Code
        - name: idp
          in: path
          required: true
          schema:
            type: string
            title: Idp
        - name: organization
          in: path
          required: true
          schema:
            type: string
            title: Organization
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/authentication/signin/custom-token-callback/{idp}/organization/{organization}':
    get:
      tags:
        - Authentication
        - v2
      summary: Custom Token Signin Callback
      operationId: custom_token_signin_callback_api_v2_authentication_signin_custom_token_callback__idp__organization__organization__get
      parameters:
        - name: code
          in: query
          required: true
          schema:
            title: Code
        - name: idp
          in: path
          required: true
          schema:
            type: string
            title: Idp
        - name: organization
          in: path
          required: true
          schema:
            type: string
            title: Organization
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/authentication/signin/callback/saml/idp/{idp}/organization/{organization}':
    post:
      tags:
        - Authentication
        - v2
      summary: Saml Callback
      operationId: saml_callback_api_v2_authentication_signin_callback_saml_idp__idp__organization__organization__post
      parameters:
        - name: idp
          in: path
          required: true
          schema:
            type: string
            title: Idp
        - name: organization
          in: path
          required: true
          schema:
            type: string
            title: Organization
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/signup/password:
    post:
      tags:
        - Authentication
        - v2
      summary: Sign Up Via Password
      operationId: sign_up_via_password_api_v2_authentication_signup_password_post
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreds'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/sign_in_via_password:
    post:
      tags:
        - Authentication
        - v2
      summary: Sign In Via Password
      operationId: sign_in_via_password_api_v2_authentication_sign_in_via_password_post
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreds'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/signin/password:
    post:
      tags:
        - Authentication
        - v2
      summary: Sign In Via Password
      operationId: sign_in_via_password_api_v2_authentication_signin_password_post
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreds'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/signout:
    post:
      tags:
        - Authentication
        - v2
      summary: Sign Out
      operationId: sign_out_api_v2_authentication_signout_post
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutCreds'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/identity-provider:
    post:
      tags:
        - Authentication
        - v2
      summary: Add Identity Provider
      description: |-
        Add a new identity provider
        1.Get the keycloak admin token
        2.Create the identity provider
        3.Create the browser authentication flow
        4.Create the clients for singup and signin
        5.Update the clients with the browser authentication flow (this is to surpass the keycloak login page)
        https://stackoverflow.com/questions/46390571/how-to-bypass-keycloak-login-form-and-jump-directly-to-the-idp-login
        6.Update config in stephanie with the created idp info
        7.return the redirect url that needs to be used in the identity provider

        keyword arguments:
        request -- request object (Request)
        idp_name -- identity provider name (str)
        idp_client_id -- identity provider client id (str)
        idp_client_secret -- identity provider client secret (str)
        discovery_endpoint -- discovery endpoint (str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        return:
        dict -- dict with message and data keys
                    message -- success or failure (str)
                    data -- url to to be used in the identity provider (str)
      operationId: add_identity_provider_api_v2_authentication_identity_provider_post
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIdentityProvider'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Authentication
        - v2
      summary: Remove Identity Provider
      description: |-
        Remove an identity provider
        1.Get the keycloak admin token
        2.Delete the clients for singup and signin
        3.Delete the browser authentication flow
        4.Delete the identity provider
        5.Delete config in stephanie with the created idp info

        keyword arguments:
        request -- request object (Request)
        idp_name -- identity provider name (str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        return:
        dict -- dict with message and data keys
                    message -- success or failure (str)
                    data -- url to to be used in the identity provider (str)
      operationId: remove_identity_provider_api_v2_authentication_identity_provider_delete
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: idp_name
          in: query
          required: true
          schema:
            type: string
            title: Idp Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/authentication/token/decode/{token}':
    get:
      tags:
        - Authentication
        - v2
      summary: Decode Token
      operationId: decode_token_api_v2_authentication_token_decode__token__get
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: token
          in: path
          required: true
          schema:
            type: string
            title: Token
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/refresh_tokens:
    get:
      tags:
        - Authentication
        - v2
      summary: Refresh Tokens
      description: |-
        Takes refresh token as an input and returns new access token and refresh token

        keyword arguments:
        refresh_token -- refresh token (str)
        idp -- identity provider (str)
        request -- request object (Request)
        flow -- flow (str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        return:
        dict -- dict with message and data keys
                message -- success or failure (str)
                token -- new tokens (dict)
                flow -- signup/signin flow/password_signin (str)
      operationId: refresh_tokens_api_v2_authentication_refresh_tokens_get
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: refresh_token
          in: query
          required: true
          schema:
            type: string
            title: Refresh Token
        - name: idp
          in: query
          required: false
          schema:
            type: string
            title: Idp
        - name: flow
          in: query
          required: false
          schema:
            type: string
            title: Flow
            default: signin
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/refresh-tokens:
    get:
      tags:
        - Authentication
        - v2
      summary: Refresh Tokens
      description: |-
        Takes refresh token as an input and returns new access token and refresh token

        keyword arguments:
        refresh_token -- refresh token (str)
        idp -- identity provider (str)
        request -- request object (Request)
        flow -- flow (str)
        x_api_key -- api key (default None, str)
        accounts_id -- account id (default None, str)

        return:
        dict -- dict with message and data keys
                message -- success or failure (str)
                token -- new tokens (dict)
                flow -- signup/signin flow/password_signin (str)
      operationId: refresh_tokens_api_v2_authentication_refresh_tokens_get
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: refresh_token
          in: query
          required: true
          schema:
            type: string
            title: Refresh Token
        - name: idp
          in: query
          required: false
          schema:
            type: string
            title: Idp
        - name: flow
          in: query
          required: false
          schema:
            type: string
            title: Flow
            default: signin
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/authentication/email-verification:
    get:
      tags:
        - Authentication
        - v2
      summary: Email Verification
      description: |-
        Verify the email of the user

        keyword arguments:
        account_id -- account id (str)
        user_id -- user id (str)
        request -- request object (Request)
        db -- database session (default Depends(get_db), Session)

        return:
        redirect -- redirect to redirect page
      operationId: email_verification_api_v2_authentication_email_verification_get
      parameters:
        - name: code
          in: query
          required: false
          schema:
            title: Code
        - name: admin
          in: query
          required: false
          schema:
            title: Admin
            default: false
        - name: organization
          in: query
          required: false
          schema:
            type: string
            title: Organization
        - name: user_id
          in: query
          required: false
          schema:
            type: string
            title: User Id
        - name: account_id
          in: query
          required: false
          schema:
            type: string
            title: Account Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/authentication/forgot-password:
    put:
      tags:
        - Authentication
        - v2
      summary: Forgot Password
      operationId: forgot_password_api_v2_authentication_forgot_password_put
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPassword'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Forgot Password Api V2 Authentication Forgot Password Put
                anyOf:
                  - $ref: '#/components/schemas/SuccessResponseStructure'
                  - $ref: '#/components/schemas/FailureResponseStructure'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/authentication/reset-password:
    post:
      tags:
        - Authentication
        - v2
      summary: Reset Password
      operationId: reset_password_api_v2_authentication_reset_password_post
      parameters:
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassword'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                title: Response Reset Password Api V2 Authentication Reset Password Post
                anyOf:
                  - $ref: '#/components/schemas/SuccessResponseStructure'
                  - $ref: '#/components/schemas/FailureResponseStructure'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/authentication/code-server/{identity_provider}':
    get:
      tags:
        - Authentication
        - v2
      summary: Code Server Url Map
      operationId: code_server_url_map_api_v2_authentication_code_server__identity_provider__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: identity_provider
          in: path
          required: true
          schema:
            type: string
            title: Identity Provider
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/api-sets:
    get:
      tags:
        - ApiSet
        - v2
      summary: List Api Sets
      description: |-
        List all api-sets

        keyword arguments:
        request -- request object
        access_token -- access token(str)
        x_api_key -- x-api-key(str)
        accounts_id -- accounts-id(str)

        returns:
        api-sets -- response(dict)
            message -- message(dict)    
            data -- api-sets(dict)
      operationId: list_api_sets_api_v2_api_sets_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - ApiSet
        - v2
      summary: Create Api Set
      description: |-
        Create api-set
        1.

        keyword arguments:
        request -- request object
        api_set -- api-set object
        access_token -- access token(str)
        x_api_key -- x-api-key(str)
        accounts_id -- accounts-id(str)

        returns:
        api-set -- response(dict)
            message -- message(dict)
            data -- api-set(dict)
      operationId: create_api_set_api_v2_api_sets_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSet'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/api-sets/{api_set_name}':
    get:
      tags:
        - ApiSet
        - v2
      summary: Get Api Set
      description: |-
        Get api-set by name

        keyword arguments:
        request -- request object
        api_set_name -- name of api-set(str)
        access_token -- access token(str)
        x_api_key -- x-api-key(str)
        accounts_id -- accounts-id(str)

        returns:
        api-set -- response(dict)
            message -- message(dict)
            data -- api-set(dict)
      operationId: get_api_set_api_v2_api_sets__api_set_name__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: api_set_name
          in: path
          required: true
          schema:
            type: string
            title: Api Set Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - ApiSet
        - v2
      summary: Update Api Set
      description: |-
        Update api-set 

        keyword arguments:
        request -- request object
        api_set_name -- name of api-set(str)
        updated_api_set -- updated api-set object
        access_token -- access token(str)
        x_api_key -- x-api-key(str)
        accounts_id -- accounts-id(str)

        returns:
        api-set -- response(dict)
            message -- message(dict)
            data -- api-set(dict)
      operationId: update_api_set_api_v2_api_sets__api_set_name__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: api_set_name
          in: path
          required: true
          schema:
            type: string
            title: Api Set Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiSet'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - ApiSet
        - v2
      summary: Delete Api Set
      description: |-
        Delete api-set by name

        keyword arguments:
        request -- request object
        api_set_name -- name of api-set(str)
        access_token -- access token(str)
        x_api_key -- x-api-key(str)
        accounts_id -- accounts-id(str)

        returns:
        api-set -- response(dict)
            message -- message(dict)
            data -- api-set(dict)
      operationId: delete_api_set_api_v2_api_sets__api_set_name__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: api_set_name
          in: path
          required: true
          schema:
            type: string
            title: Api Set Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/secrets':
    get:
      tags:
        - Admin
        - v2
      summary: List Account Secrets
      description: |-
        Create a secret with the provided secret values

        keyword arguments:

        returns:
        SecretResponse -- The Secret itself
        ApiError -- Error message if the Secret creation failed
      operationId: list_account_secrets_api_v2_admin_accounts__account_id__secrets_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            title: Offset
            default: 0
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
            default: 150
        - name: search
          in: query
          required: false
          schema:
            type: string
            title: Search
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSecretResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Admin
        - v2
      summary: Create Secret
      description: |-
        Create a secret with the provided secret values

        keyword arguments:

        returns:
        SecretResponse -- The Secret itself
        ApiError -- Error message if the Secret creation failed
      operationId: create_secret_api_v2_admin_accounts__account_id__secrets_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSecretResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/api/v2/admin/accounts/{account_id}/secrets/{secret_name}':
    get:
      tags:
        - Admin
        - v2
      summary: Get Secret Details
      description: |-
        Get the secret details of the Secret Name.

        keyword arguments:

        returns:
      operationId: get_secret_details_api_v2_admin_accounts__account_id__secrets__secret_name__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: secret_name
          in: path
          required: true
          schema:
            type: string
            title: Secret Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSecretResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Admin
        - v2
      summary: Update Secret Details
      description: |-
        Update the secret values of a secret name.

        keyword arguments:

        returns:
      operationId: update_secret_details_api_v2_admin_accounts__account_id__secrets__secret_name__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: secret_name
          in: path
          required: true
          schema:
            type: string
            title: Secret Name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSecretRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSecretResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Admin
        - v2
      summary: Delete Secret Details
      description: |-
        Delete the secret values of a secret name.

        keyword arguments:

        returns:
      operationId: delete_secret_details_api_v2_admin_accounts__account_id__secrets__secret_name__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: path
          required: true
          schema:
            type: string
            title: Account Id
            format: uuid
        - name: secret_name
          in: path
          required: true
          schema:
            type: string
            title: Secret Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSecretResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/v2/logging/event_logs:
    get:
      tags:
        - Observability
        - v2
        - Observability
      summary: Get Logs
      operationId: get_logs_api_v2_logging_event_logs_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: account_id
          in: query
          description: Account ID filter
          required: true
          schema:
            type: string
            title: Account Id
            description: Account ID filter
        - name: user_id
          in: query
          description: User ID filter
          required: false
          schema:
            type: string
            title: User Id
            description: User ID filter
        - name: days
          in: query
          description: Number of days to filter logs
          required: false
          schema:
            type: integer
            title: Days
            description: Number of days to filter logs
        - name: hours
          in: query
          description: Number of hours to filter logs
          required: false
          schema:
            type: integer
            title: Hours
            description: Number of hours to filter logs
        - name: limit
          in: query
          description: Number of log entries
          required: false
          schema:
            type: integer
            title: Limit
            description: Number of log entries
            default: 10
        - name: log_level
          in: query
          description: Log level filter
          required: false
          schema:
            type: string
            title: Log Level
            description: Log level filter
        - name: start_time
          in: query
          description: Start time filter in UTC (datetime format)
          required: false
          schema:
            type: string
            title: Start Time
            description: Start time filter in UTC (datetime format)
            format: date-time
        - name: end_time
          in: query
          description: End time filter in UTC (datetime format)
          required: false
          schema:
            type: string
            title: End Time
            description: End time filter in UTC (datetime format)
            format: date-time
        - name: methods
          in: query
          description: Methods filter (comma separated values)
          required: false
          schema:
            type: string
            title: Methods
            description: Methods filter (comma separated values)
        - name: entities
          in: query
          description: Entities filter (comma separated values)
          required: false
          schema:
            type: string
            title: Entities
            description: Entities filter (comma separated values)
        - name: path
          in: query
          description: Path filter
          required: false
          schema:
            type: string
            title: Path
            description: Path filter
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/logging/logs:
    get:
      tags:
        - Observability
        - v2
        - Observability
      summary: Fetch Logs
      description: Fetch logs from Loki
      operationId: fetch_logs_api_v2_logging_logs_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: usecase
          in: query
          required: true
          schema:
            type: string
            title: Usecase
        - name: limit
          in: query
          description: Number of log entries
          required: false
          schema:
            type: integer
            title: Limit
            description: Number of log entries
            default: 10
        - name: start_time
          in: query
          description: Start time filter in UTC (datetime format)
          required: false
          schema:
            type: string
            title: Start Time
            description: Start time filter in UTC (datetime format)
            format: date-time
        - name: end_time
          in: query
          description: End time filter in UTC (datetime format)
          required: false
          schema:
            type: string
            title: End Time
            description: End time filter in UTC (datetime format)
            format: date-time
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Observability
        - v2
        - Observability
      summary: Push Logs
      description: Push logs to Loki
      operationId: push_logs_api_v2_logging_logs_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: usecase
          in: query
          required: true
          schema:
            type: string
            title: Usecase
        - name: Timestamp
          in: query
          description: Timestamp in nanoseconds
          required: true
          schema:
            type: string
            title: Timestamp
            description: Timestamp in nanoseconds
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: Data
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/logging/logs_schemas:
    get:
      tags:
        - Observability
        - v2
        - Observability
      summary: List Logs Schema
      operationId: list_logs_schema_api_v2_logging_logs_schemas_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/logging/logs_schema:
    get:
      tags:
        - Observability
        - v2
        - Observability
      summary: Fetch Logs Schema
      operationId: fetch_logs_schema_api_v2_logging_logs_schema_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: usecase
          in: query
          required: true
          schema:
            type: string
            title: Usecase
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - Observability
        - v2
        - Observability
      summary: Update Logs Schema
      operationId: update_logs_schema_api_v2_logging_logs_schema_put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: usecase
          in: query
          required: true
          schema:
            type: string
            title: Usecase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLogFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - Observability
        - v2
        - Observability
      summary: Create Logs Schema
      operationId: create_logs_schema_api_v2_logging_logs_schema_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: usecase
          in: query
          required: true
          schema:
            type: string
            title: Usecase
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLogFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Observability
        - v2
        - Observability
      summary: Delete Logs Schema
      operationId: delete_logs_schema_api_v2_logging_logs_schema_delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: usecase
          in: query
          required: true
          schema:
            type: string
            title: Usecase
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /ping:
    get:
      tags:
        - Public
      summary: Ping
      operationId: ping_ping_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /docs:
    get:
      summary: Get Docs
      operationId: get_docs_docs_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - HTTPBasic: []
  /openapi.json:
    get:
      tags:
        - Public
      summary: Get Openapi Schema
      operationId: get_openapi_schema_openapi_json_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
      security:
        - HTTPBasic: []
  /readiness-probe:
    get:
      tags:
        - Public
      summary: Startup Check
      description: |-
        This is a startup check endpoint. It can be used to check if the application is up and running.
        Returns:
        - StartupSuccessResponse: If the application is up and running
        - StartupErrorResponse: If the application is not ready to serve requests
      operationId: startup_check_readiness_probe_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /startup-check:
    get:
      tags:
        - Public
      summary: Startup Check
      description: |-
        This is a startup check endpoint. It can be used to check if the application is up and running.
        Returns:
        - StartupSuccessResponse: If the application is up and running
        - StartupErrorResponse: If the application is not ready to serve requests
      operationId: startup_check_startup_check_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/marketplace/asset_types/:
    get:
      tags:
        - marketplace
      summary: List Asset Types
      description: |-
        This API lists the total number of asset_types that have been registered in the asset_type registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered asset_types in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of asset_types in the dataset and a list of all these asset_types in the form of a dictionary - the key of the dictionary being the asset_type identifier .
      operationId: list_asset_types_api_v1_marketplace_asset_types__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: enabled
          in: query
          description: This query parameter enables the user to search for asset_types that are enabled for the marketplace.
          required: false
          schema:
            type: boolean
            title: Enabled
            description: This query parameter enables the user to search for asset_types that are enabled for the marketplace.
            default: true
        - name: entity_name
          in: query
          description: This query parameter enables the user to search for asset_types using their entity name.
          required: false
          schema:
            type: string
            title: Entity Name
            description: This query parameter enables the user to search for asset_types using their entity name.
        - name: asset_type_name
          in: query
          description: This query parameter enables the user to search for asset_types using their display name.
          required: false
          schema:
            type: string
            title: Asset Type Name
            description: This query parameter enables the user to search for asset_types using their display name.
        - name: search
          in: query
          description: This query parameter enables the user to search for asset_type in the asset_type registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for asset_type in the asset_type registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: fields
          in: query
          description: This query parameter allows you to define the fields that must be returned from the listing query.
          required: false
          schema:
            type: array
            description: This query parameter allows you to define the fields that must be returned from the listing query.
            items:
              $ref: '#/components/schemas/app__schemas__asset_types__ListingFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - marketplace
      summary: Create Asset Type
      operationId: create_asset_type_api_v1_marketplace_asset_types__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssetType'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/marketplace/asset_types/{asset_type_id}':
    get:
      tags:
        - marketplace
      summary: Get Asset Type
      operationId: get_asset_type_api_v1_marketplace_asset_types__asset_type_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_type_id
          in: path
          description: This field describes the ID of the record used to query from the asset_type registry
          required: true
          schema:
            type: string
            title: Asset Type Id
            description: This field describes the ID of the record used to query from the asset_type registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - marketplace
      summary: Delete Asset Type
      operationId: delete_asset_type_api_v1_marketplace_asset_types__asset_type_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_type_id
          in: path
          description: This field describes the ID of the record used to query from the asset_type registry
          required: true
          schema:
            type: string
            title: Asset Type Id
            description: This field describes the ID of the record used to query from the asset_type registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - marketplace
      summary: Patch Asset Type
      operationId: patch_asset_type_api_v1_marketplace_asset_types__asset_type_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_type_id
          in: path
          description: This field describes the ID of the record used to query from the asset_type registry
          required: true
          schema:
            type: string
            title: Asset Type Id
            description: This field describes the ID of the record used to query from the asset_type registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAssetType'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/marketplace/assets/:
    get:
      tags:
        - marketplace
      summary: List Assets
      description: |-
        This API lists the total number of assets that have been registered in the asset registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered assets in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of assets in the dataset and a list of all these assets in the form of a dictionary - the key of the dictionary being the asset identifier .
      operationId: list_assets_api_v1_marketplace_assets__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_type_id
          in: query
          description: This query parameter enables the user to search for assets of an asset_type in the marketplace.
          required: false
          schema:
            type: string
            title: Asset Type Id
            description: This query parameter enables the user to search for assets of an asset_type in the marketplace.
        - name: asset_type_name
          in: query
          description: This query parameter enables the user to search for assets of an asset_type in the marketplace.
          required: false
          schema:
            type: string
            title: Asset Type Name
            description: This query parameter enables the user to search for assets of an asset_type in the marketplace.
        - name: status
          in: query
          description: This query parameter enables the user to search for assets based on their status in the marketplace.
          required: false
          schema:
            type: string
            title: Status
            description: This query parameter enables the user to search for assets based on their status in the marketplace.
        - name: imported
          in: query
          description: This query parameter enables the user to search for assets imported in an account from the marketplace.
          required: false
          schema:
            type: boolean
            title: Imported
            description: This query parameter enables the user to search for assets imported in an account from the marketplace.
            default: false
        - name: search
          in: query
          description: This query parameter enables the user to search for assets in the assets registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for assets in the assets registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: fields
          in: query
          description: This query parameter allows you to define the fields that must be returned from the listing query.
          required: false
          schema:
            type: array
            description: This query parameter allows you to define the fields that must be returned from the listing query.
            items:
              $ref: '#/components/schemas/app__schemas__assets__ListingFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - marketplace
      summary: Create Asset
      operationId: create_asset_api_v1_marketplace_assets__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAsset'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/marketplace/assets/{asset_id}':
    get:
      tags:
        - marketplace
      summary: Get Asset
      operationId: get_asset_api_v1_marketplace_assets__asset_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_id
          in: path
          description: This field describes the ID of the record used to query from the asset registry
          required: true
          schema:
            type: string
            title: Asset Id
            description: This field describes the ID of the record used to query from the asset registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - marketplace
      summary: Delete Asset
      operationId: delete_asset_api_v1_marketplace_assets__asset_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_id
          in: path
          description: This field describes the ID of the record used to query from the asset registry
          required: true
          schema:
            type: string
            title: Asset Id
            description: This field describes the ID of the record used to query from the asset registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - marketplace
      summary: Patch Asset
      operationId: patch_asset_api_v1_marketplace_assets__asset_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_id
          in: path
          description: This field describes the ID of the record used to query from the asset registry
          required: true
          schema:
            type: string
            title: Asset Id
            description: This field describes the ID of the record used to query from the asset registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchAsset'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/marketplace/assets/{asset_id}/import':
    post:
      tags:
        - marketplace
      summary: Import Asset
      operationId: import_asset_api_v1_marketplace_assets__asset_id__import_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_id
          in: path
          description: This field describes the ID of the record used to query from the asset registry
          required: true
          schema:
            type: string
            title: Asset Id
            description: This field describes the ID of the record used to query from the asset registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/marketplace/assets/{asset_id}/library':
    delete:
      tags:
        - marketplace
      summary: Remove Asset From Library
      operationId: remove_asset_from_library_api_v1_marketplace_assets__asset_id__library_delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: asset_id
          in: path
          description: This field describes the ID of the record used to query from the asset registry
          required: true
          schema:
            type: string
            title: Asset Id
            description: This field describes the ID of the record used to query from the asset registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/mlops/experiments:
    get:
      tags:
        - MLOps
      summary: List Experiments
      description: |-
        This API lists the total number of experiments that have been registered in the experiment registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered experiments in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of experiments registered and a list of all these experiments in the form of a dictionary.

        Optionally, the user can list the exeriments using the following filters:
        - tags: List of tags to filter experiments 
        - search: Search string to filter experiments
        - sort_field: Field to sort the experiments
        - sort_order: Order to sort the experiments
        - page_offset: Page offset for pagination
        - page_limit: Page limit for pagination
        - fields: Fields to return in the response
      operationId: list_experiments_api_v1_mlops_experiments_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: fields
          in: query
          required: false
          schema:
            type: array
            default:
              - experiment_name
              - experiment_id
            items:
              $ref: '#/components/schemas/app__schemas__experiments__ListingFields'
        - name: page_offset
          in: query
          required: false
          schema:
            type: integer
            title: Page Offset
        - name: page_limit
          in: query
          required: false
          schema:
            type: integer
            title: Page Limit
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
        - name: search
          in: query
          required: false
          schema:
            type: string
            title: Search
        - name: tags
          in: query
          required: false
          schema:
            type: string
            title: Tags
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListExperimentsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - MLOps
      summary: Create Experiment
      description: |-
        This API is used to register any experiment pertaining to it in the experiment registry.

        The input to this API is a dictionary containing all the metadata about the experiment - name, description.
        The output is an experiment identifier which is a unique reference to this experiment in the experiment registry and the mlflow configs which helps to locate the experiment in the mlflow server.
      operationId: create_experiment_api_v1_mlops_experiments_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExperiment'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateExperimentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/mlops/experiments/{experiment_id}':
    get:
      tags:
        - MLOps
      summary: Get Experiment
      description: |-
        This API allows the user to read metadata configuration pertaining to a experiment identifier.

        The input to this API is an experiment identifier, which is mandatory.
        The output of this API is all the metadata pertaining to the corresponding experiment identifier.
      operationId: get_experiment_api_v1_mlops_experiments__experiment_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          required: false
          schema:
            type: integer
            title: Version
            default: 0
        - name: experiment_id
          in: path
          required: true
          schema:
            type: string
            title: Experiment Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetExperimentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - MLOps
      summary: Delete Experiment
      description: |-
        This API allows the deletion of any specified experiment.

        The input to the API is a experiment identifier which is a unique reference to this experiment in the experiment registry.
        The output of this API is a success message if the deletion is successful, else an error message.
      operationId: delete_experiment_api_v1_mlops_experiments__experiment_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: experiment_id
          in: path
          required: true
          schema:
            type: string
            title: Experiment Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteExperimentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - MLOps
      summary: Update Experiment
      description: |-
        This API allows metadata updation for any specified experiment and re-registers the metadata in the experiment registry.

        The input to this API is an experiment identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.
        The output of this API is the updated metadata configuration for the corresponding experiment identifier.
      operationId: update_experiment_api_v1_mlops_experiments__experiment_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: experiment_id
          in: path
          required: true
          schema:
            type: string
            title: Experiment Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUpdateExperiment'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateExperimentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/mlops/models:
    get:
      tags:
        - MLOps
      summary: List Models
      description: |-
        This API lists the total number of models that have been registered in the model registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered models in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of models registered and a list of all these models in the form of a dictionary.
      operationId: list_models_api_v1_mlops_models_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: fields
          in: query
          required: false
          schema:
            type: array
            default:
              - model_name
              - model_id
              - experiment_name
              - task
            items:
              $ref: '#/components/schemas/app__schemas__models__ListingFields'
        - name: page_offset
          in: query
          required: false
          schema:
            type: integer
            title: Page Offset
        - name: page_limit
          in: query
          required: false
          schema:
            type: integer
            title: Page Limit
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
        - name: search
          in: query
          required: false
          schema:
            type: string
            title: Search
        - name: tags
          in: query
          required: false
          schema:
            type: string
            title: Tags
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - MLOps
      summary: Create Model
      description: |-
        This API is used to register any models along with metadata configurations pertaining to it in the model registry.
        The metadata for this model holds information about the model, parameters, metrics, interpretations, artifact location, and the experiment it belongs to.

        The input to this API is a dictionary containing all the metadata about the model.
        The output is an model identifier which is a unique reference to this model in the model registry, mlflow configs which helps to locate the model in the mlflow server and the meta data.
      operationId: create_model_api_v1_mlops_models_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModel'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModelResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/mlops/models/{model_id}':
    get:
      tags:
        - MLOps
      summary: Get Model
      description: |-
        This API allows the user to read metadata configuration pertaining to a model identifier.

        The input to this API is a model identifier, which is mandatory.
        The output of this API is all the metadata pertaining to the corresponding model identifier.
      operationId: get_model_api_v1_mlops_models__model_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: model_id
          in: path
          required: true
          schema:
            type: string
            title: Model Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetModelResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - MLOps
      summary: Delete Model
      description: |-
        This API allows the deletion of any specified model.

        The input to the API is a model identifier which is a unique reference to this model in the model registry.
        The output of this API is a success message if the deletion is successful, else an error message.
      operationId: delete_model_api_v1_mlops_models__model_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: model_id
          in: path
          required: true
          schema:
            type: string
            title: Model Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - MLOps
      summary: Update Model
      description: |-
        This API allows metadata updation for any specified model and re-registers the metadata in the model registry.

        The input to this API is a model identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.
        The output of this API is the updated metadata configuration for the corresponding model identifier.
      operationId: update_model_api_v1_mlops_models__model_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: model_id
          in: path
          required: true
          schema:
            type: string
            title: Model Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateModel'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateModelResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/doc_types/:
    get:
      tags:
        - documents
      summary: List Doc Types
      operationId: list_doc_types_api_v1_doc_types__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: search
          in: query
          description: This query parameter enables the user to search for doc_types in the doc_types registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for doc_types in the doc_types registry.
        - name: preset
          in: query
          description: 'This query parameter describes whether we need to list either preset doc_types, custom doc_types or all doc_types.'
          required: false
          schema:
            type: boolean
            title: Preset
            description: 'This query parameter describes whether we need to list either preset doc_types, custom doc_types or all doc_types.'
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: doc_type
          in: query
          description: This query parameter specifies the doc type.
          required: false
          schema:
            type: string
            title: Doc Type
            description: This query parameter specifies the doc type.
        - name: status
          in: query
          description: This query parameter enables the user to search for doc types in the doc type registry based on status.
          required: false
          schema:
            type: string
            title: Status
            description: This query parameter enables the user to search for doc types in the doc type registry based on status.
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: fields
          in: query
          description: This query parameter allows you to define the fields that must be returned from the listing query.
          required: false
          schema:
            type: array
            description: This query parameter allows you to define the fields that must be returned from the listing query.
            items:
              $ref: '#/components/schemas/app__schemas__doc_types__ListingFields'
        - name: document_type_ids
          in: query
          description: This query parameter allows you to define the document type ids that must be returned from the listing query.
          required: false
          schema:
            type: string
            title: Document Type Ids
            description: This query parameter allows you to define the document type ids that must be returned from the listing query.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocTypeListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - documents
      summary: Create Doc Type
      operationId: create_doc_type_api_v1_doc_types__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocType'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/doc_types/{doctype_id}':
    get:
      tags:
        - documents
      summary: Get Doc Type
      operationId: get_doc_type_api_v1_doc_types__doctype_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - documents
      summary: Update Doctype
      description: |-
        This API allows metadata updation for any specified doctype and re-registers the metadata in the doctype registry.
        Since data lineage is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.
        It does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the doctype metadata.

        The input to this API is a doctype identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.
      operationId: update_doctype_api_v1_doc_types__doctype_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: Doctype
              description: payload sent for updating doctype
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocTypeUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - documents
      summary: Delete Doctype
      description: |-
        This API allows metadata deletion for any specified doctype identifier.
        Once invoked, this API removes this doctype entry from both the listing configuration and also deletes the corresponding metadata stored for this in the doctype registry.
        If delete API is invoked, all versions of the metadata is deleted.

        The input to this API is a doctype identifier which refers to the doctype that has to be deleted.
      operationId: delete_doctype_api_v1_doc_types__doctype_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This field describes if the document type should be deleted from stephanie.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This field describes if the document type should be deleted from stephanie.
            default: true
        - name: use_dataset_api
          in: query
          description: This field describes if the document type should be deleted from document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This field describes if the document type should be deleted from document type dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocTypeDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - documents
      summary: Patch Doctype
      operationId: patch_doctype_api_v1_doc_types__doctype_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the document type should be fetched from stephanie or document type dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the record used to query from the doctype registry
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the record used to query from the doctype registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocTypeUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocTypeUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/doc_types/{doctype_id}/export':
    get:
      tags:
        - documents
      summary: Download Doctype
      description: |-
        This API returns the dataset csv download link for the specified doctype identifier.
        Once invoked, this API fetches the dataset that stores the extraction data of the documents uploaded for the doc_type and returns the csv file download link for the dataset.

        The input to this API is a doctype identifier which is mandatory.
      operationId: download_doctype_api_v1_doc_types__doctype_id__export_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/doc_types/{doctype_id}/taxonomy/template':
    get:
      tags:
        - documents
      summary: Generate Taxonomy Template
      description: |-
        This API returns a template taxonomy for the specified doctype identifier.
        Once invoked, this API fetches the preset documents for the specified doctype and generates a taxonomy based on the extraction data of the preset documents.

        The input to this API is a doctype identifier which is mandatory.
      operationId: generate_taxonomy_template_api_v1_doc_types__doctype_id__taxonomy_template_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This field describes if the document type should be fetched from stephanie.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This field describes if the document type should be fetched from stephanie.
            default: true
        - name: use_dataset_api
          in: query
          description: This field describes if the document type should be fetched from document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This field describes if the document type should be fetched from document type dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/doc_types/{doctype_id}/status':
    get:
      tags:
        - documents
      summary: Get Doctype Status
      description: |-
        This API returns the status of the specified doctype.
        The input to this API is a doctype identifier which is mandatory.
      operationId: get_doctype_status_api_v1_doc_types__doctype_id__status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This field describes if the document type should be fetched from stephanie.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This field describes if the document type should be fetched from stephanie.
            default: true
        - name: use_dataset_api
          in: query
          description: This field describes if the document type should be fetched from document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This field describes if the document type should be fetched from document type dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/doc_types/{doctype_id}/preset-documents':
    get:
      tags:
        - documents
      summary: Get Preset Documents For Doctype
      description: |-
        This API returns the list of preset documents for the given doctype identifier.
        The input to this API is a doctype identifier which is mandatory.
      operationId: get_preset_documents_for_doctype_api_v1_doc_types__doctype_id__preset_documents_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This field describes if the document type should be fetched from stephanie.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This field describes if the document type should be fetched from stephanie.
            default: true
        - name: use_dataset_api
          in: query
          description: This field describes if the document type should be fetched from document type dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This field describes if the document type should be fetched from document type dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/doc_types/{doctype_id}/clone':
    post:
      tags:
        - documents
      summary: Clone Doc Type
      operationId: clone_doc_type_api_v1_doc_types__doctype_id__clone_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: doctype_id
          in: path
          description: This field describes the ID of the doctype used to query the doctype registry.
          required: true
          schema:
            type: string
            title: Doctype Id
            description: This field describes the ID of the doctype used to query the doctype registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/documents/:
    get:
      tags:
        - documents
      summary: List Documents
      description: |-
        This API lists the total number of documents that have been registered in the document registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered documents in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of documents in the dataset and a list of all these documents in the form of a dictionary - the key of the dictionary being the document identifier .
      operationId: list_documents_api_v1_documents__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: HITL_status
          in: query
          description: This query parameter enables the user to search for documents in the document registry based on status.
          required: false
          schema:
            type: string
            title: Hitl Status
            description: This query parameter enables the user to search for documents in the document registry based on status.
        - name: HITL_action
          in: query
          description: This query parameter enables the user to search for documents in the document registry based on action.
          required: false
          schema:
            type: string
            title: Hitl Action
            description: This query parameter enables the user to search for documents in the document registry based on action.
        - name: search
          in: query
          description: This query parameter enables the user to search for document in the document registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for document in the document registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: preset
          in: query
          description: 'This query parameter describes whether we need to list either preset documents, custom documents or all documents.'
          required: false
          schema:
            type: boolean
            title: Preset
            description: 'This query parameter describes whether we need to list either preset documents, custom documents or all documents.'
        - name: doc_type_id
          in: query
          description: This query parameter enables the user to search for documents in the document registry based on document type id.
          required: false
          schema:
            type: string
            title: Doc Type Id
            description: This query parameter enables the user to search for documents in the document registry based on document type id.
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: fields
          in: query
          description: This query parameter allows you to define the fields that must be returned from the listing query.
          required: false
          schema:
            type: array
            description: This query parameter allows you to define the fields that must be returned from the listing query.
            items:
              $ref: '#/components/schemas/schemas__documents__ListingFields'
        - name: document_ids
          in: query
          description: This query parameter allows you to define the document ids that must be returned from the listing query.
          required: false
          schema:
            type: string
            title: Document Ids
            description: This query parameter allows you to define the document ids that must be returned from the listing query.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - documents
      summary: Create Document
      operationId: create_document_api_v1_documents__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/documents/{document_id}':
    get:
      tags:
        - documents
      summary: Get Record
      operationId: get_record_api_v1_documents__document_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the document should be fetched from stephanie or documents dataset.
            default: false
        - name: document_id
          in: path
          description: This field describes the ID of the record used to query from the document registry
          required: true
          schema:
            type: string
            title: Document Id
            description: This field describes the ID of the record used to query from the document registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - documents
      summary: Update Record
      operationId: update_record_api_v1_documents__document_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: disable_cache
          in: query
          description: 'This query parameter when set to True, disables the s3 based cache '
          required: false
          schema:
            type: boolean
            title: Disable Cache
            description: 'This query parameter when set to True, disables the s3 based cache '
            default: false
        - name: document_id
          in: path
          description: This field describes the ID of the record used to query from the document registry
          required: true
          schema:
            type: string
            title: Document Id
            description: This field describes the ID of the record used to query from the document registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - documents
      summary: Delete Document
      description: |-
        This API allows metadata deletion for any specified document identifier.
        Once invoked, this API removes this document entry from both the listing configuration and also deletes the corresponding metadata stored for this in the document registry.
        If delete API is invoked, all versions of the metadata is deleted.

        The input to this API is a document identifier which refers to the document that has to be deleted.
      operationId: delete_document_api_v1_documents__document_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This field describes if the document should be deleted from stephanie.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This field describes if the document should be deleted from stephanie.
            default: true
        - name: use_dataset_api
          in: query
          description: This field describes if the document should be deleted from stephanie.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This field describes if the document should be deleted from stephanie.
            default: false
        - name: document_id
          in: path
          description: This field describes the ID of the document used to query the document registry.
          required: true
          schema:
            type: string
            title: Document Id
            description: This field describes the ID of the document used to query the document registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - documents
      summary: Patch Document
      operationId: patch_document_api_v1_documents__document_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: document_id
          in: path
          description: This field describes the ID of the record used to query from the document registry
          required: true
          schema:
            type: string
            title: Document Id
            description: This field describes the ID of the record used to query from the document registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentPatch'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/documents/live-ocr/{document_id}':
    post:
      tags:
        - documents
      summary: Live Ocr
      operationId: live_ocr_api_v1_documents_live_ocr__document_id__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This field describes whether the live ocr should use document config from stephanie
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This field describes whether the live ocr should use document config from stephanie
            default: true
        - name: use_dataset_api
          in: query
          description: This field describes whether the live ocr should use document config from stephanie
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This field describes whether the live ocr should use document config from stephanie
            default: false
        - name: document_id
          in: path
          description: This field describes the ID of the record used to query from the document registry
          required: true
          schema:
            type: string
            title: Document Id
            description: This field describes the ID of the record used to query from the document registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: Config
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/documents/query_document/{document_id}':
    post:
      tags:
        - documents
      summary: Query Document
      operationId: query_document_api_v1_documents_query_document__document_id__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: document_id
          in: path
          description: This field describes the ID of the record used to query from the document registry
          required: true
          schema:
            type: string
            title: Document Id
            description: This field describes the ID of the record used to query from the document registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentQuery'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/documents/callback:
    post:
      tags:
        - documents
      summary: Document Callback
      operationId: document_callback_api_v1_documents_callback_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
      requestBody:
        content:
          application/json:
            schema:
              title: Callback Payload
              description: Document Callback payload from nightwing
              default: {}
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/documents/fetch_cache_details/{document_id}':
    get:
      tags:
        - documents
      summary: Fetch Cache Details
      operationId: fetch_cache_details_api_v1_documents_fetch_cache_details__document_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: document_id
          in: path
          description: This field describes the ID of the record used to query from the document registry
          required: true
          schema:
            type: string
            title: Document Id
            description: This field describes the ID of the record used to query from the document registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/documents/upload_document:
    post:
      tags:
        - documents
      summary: Upload Document
      operationId: upload_document_api_v1_documents_upload_document_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              title: Documents
              description: This defines the payload which is a list of dicts of the documents uploaded.
              default: {}
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/matchings/:
    get:
      tags:
        - documents
      summary: List Matchings
      description: |-
        This API lists the total number of matchings that have been registered in the matching registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered matchings in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of matchings in the dataset and a list of all these matchings in the form of a dictionary - the key of the dictionary being the matching identifier .
      operationId: list_matchings_api_v1_matchings__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: review_status
          in: query
          description: This query parameter enables the user to search for matchings in the matching registry based on review status.
          required: false
          schema:
            type: string
            title: Review Status
            description: This query parameter enables the user to search for matchings in the matching registry based on review status.
        - name: search
          in: query
          description: This query parameter enables the user to search for matching in the matching registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for matching in the matching registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchingListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - documents
      summary: Create Matching
      operationId: create_matching_api_v1_matchings__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchingCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/matchings/{matching_id}':
    get:
      tags:
        - documents
      summary: Get Matching
      operationId: get_matching_api_v1_matchings__matching_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: matching_id
          in: path
          description: This field describes the ID of the record used to query from the matching registry
          required: true
          schema:
            type: string
            title: Matching Id
            description: This field describes the ID of the record used to query from the matching registry
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - documents
      summary: Update Matching
      operationId: update_matching_api_v1_matchings__matching_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: matching_id
          in: path
          description: This field describes the ID of the record used to query from the matching registry
          required: true
          schema:
            type: string
            title: Matching Id
            description: This field describes the ID of the record used to query from the matching registry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchingUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - documents
      summary: Delete Matching
      description: |-
        This API allows metadata deletion for any specified matching identifier.
        Once invoked, this API removes this matching entry from both the listing configuration and also deletes the corresponding metadata stored for this in the matching registry.
        If delete API is invoked, all versions of the metadata is deleted.

        The input to this API is a matching identifier which refers to the matching that has to be deleted.
      operationId: delete_matching_api_v1_matchings__matching_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: matching_id
          in: path
          description: This field describes the ID of the matching used to query the matching registry.
          required: true
          schema:
            type: string
            title: Matching Id
            description: This field describes the ID of the matching used to query the matching registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchingDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/hitlactions/:
    get:
      tags:
        - documents
      summary: List Hitl Actions
      operationId: list_hitl_actions_api_v1_hitlactions__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: search
          in: query
          description: This query parameter enables the user to search for hitl_actions in the hitl_actions registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for hitl_actions in the hitl_actions registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/metrics/:
    get:
      tags:
        - documents
      summary: Metrics
      operationId: metrics_api_v1_metrics__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: interval_start
          in: query
          description: This query parameter describes the start of the interval for fetching the document details.
          required: false
          schema:
            type: string
            title: Interval Start
            description: This query parameter describes the start of the interval for fetching the document details.
        - name: interval_end
          in: query
          description: This query parameter describes the end of the interval for fetching the document details.
          required: false
          schema:
            type: string
            title: Interval End
            description: This query parameter describes the end of the interval for fetching the document details.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/datatypes:
    get:
      tags:
        - documents
      summary: List Datatypes
      description: Lists all the created datatypes
      operationId: list_datatypes_api_v1_datatypes_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: internal
          in: query
          required: false
          schema:
            type: boolean
            title: Internal
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - documents
      summary: Create Datatype
      description: creates given datatype
      operationId: create_datatype_api_v1_datatypes_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatatype'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datatypes/{datatype_id}':
    get:
      tags:
        - documents
      summary: Get Datatype
      description: Get given datatype
      operationId: get_datatype_api_v1_datatypes__datatype_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: datatype_id
          in: path
          required: true
          schema:
            type: string
            title: Datatype Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - documents
      summary: Delete Datatype
      description: Deletes given datatype
      operationId: delete_datatype_api_v1_datatypes__datatype_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: datatype_id
          in: path
          required: true
          schema:
            type: string
            title: Datatype Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - documents
      summary: Update Datatype
      description: updates given datatype
      operationId: update_datatype_api_v1_datatypes__datatype_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: datatype_id
          in: path
          required: true
          schema:
            type: string
            title: Datatype Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDatatype'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/preset-doc-types:
    get:
      tags:
        - documents
      summary: List Preset Doc Types
      description: Lists all the created preset_doc_types
      operationId: list_preset_doc_types_api_v1_preset_doc_types_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: internal
          in: query
          required: false
          schema:
            type: boolean
            title: Internal
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - documents
      summary: Create Preset Doc Type
      description: creates given preset_doc_type
      operationId: create_preset_doc_type_api_v1_preset_doc_types_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePresetDocType'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/preset-doc-types/{preset_doc_type_id}':
    get:
      tags:
        - documents
      summary: Get Preset Doc Type
      description: Get given preset_doc_type
      operationId: get_preset_doc_type_api_v1_preset_doc_types__preset_doc_type_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: preset_doc_type_id
          in: path
          required: true
          schema:
            type: string
            title: Preset Doc Type Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - documents
      summary: Delete Preset Doc Type
      description: Deletes given preset_doc_type
      operationId: delete_preset_doc_type_api_v1_preset_doc_types__preset_doc_type_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: preset_doc_type_id
          in: path
          required: true
          schema:
            type: string
            title: Preset Doc Type Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - documents
      summary: Update Preset Doc Type
      description: updates given preset_doc_type
      operationId: update_preset_doc_type_api_v1_preset_doc_types__preset_doc_type_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: preset_doc_type_id
          in: path
          required: true
          schema:
            type: string
            title: Preset Doc Type Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePresetDocType'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/documents/hdfc:
    post:
      tags:
        - idp-delivery
      summary: Hdfc Sync Inference
      operationId: hdfc_sync_inference_api_v2_documents_hdfc_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_hdfc_sync_inference_api_v2_documents_hdfc_post'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/documents/async:
    post:
      tags:
        - idp-delivery
      summary: Async Document Inference
      operationId: async_document_inference_api_v2_documents_async_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentInferAsyncRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/documents/{document_id}':
    get:
      tags:
        - idp-delivery
      summary: Get Document Results
      operationId: get_document_results_api_v2_documents__document_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: document_id
          in: path
          required: true
          schema:
            type: string
            title: Document Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncDocumentResultsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/documents:
    post:
      tags:
        - idp-delivery
      summary: Sync Document Inference
      description: This API endpoint allows you to perform document inference synchronously.
      operationId: sync_document_inference_api_v2_documents_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncDocumentRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncDocumentResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/batch/{batch_id}':
    get:
      tags:
        - idp-delivery
      summary: Get Batch Details
      operationId: get_batch_details_api_v2_batch__batch_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: offset
          in: query
          description: This field allows you to define the number of records that must be skipped before selection.
          required: false
          schema:
            type: integer
            title: Offset
            description: This field allows you to define the number of records that must be skipped before selection.
            default: 0
        - name: limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the query.
          required: false
          schema:
            type: integer
            title: Limit
            description: This query parameter allows you to limit the number of records returned from the query.
            default: 50
        - name: batch_id
          in: path
          description: This field describes the ID of the batch used to query from the registry.
          required: true
          schema:
            type: string
            title: Batch Id
            description: This field describes the ID of the batch used to query from the registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/batch/{batch_id}/progress':
    get:
      tags:
        - idp-delivery
      summary: Get Batch Progress
      operationId: get_batch_progress_api_v2_batch__batch_id__progress_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: batch_id
          in: path
          description: This field describes the ID of the batch used to query from the registry.
          required: true
          schema:
            type: string
            title: Batch Id
            description: This field describes the ID of the batch used to query from the registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/batch/async/download:
    post:
      tags:
        - idp-delivery
      summary: Download Batch
      operationId: download_batch_api_v2_batch_async_download_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        content:
          application/json:
            schema:
              title: Callback Payload
              description: Batch Callback payload from nightwing
              default: {}
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/job/{job_id}':
    get:
      tags:
        - idp-delivery
      summary: Get Job
      operationId: get_job_api_v2_job__job_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the mlaas registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the mlaas registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/workflow/{workflow_id}/batch_run':
    post:
      tags:
        - idp-delivery
      summary: Workflow Batch Run
      operationId: workflow_batch_run_api_v2_workflow__workflow_id__batch_run_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      requestBody:
        content:
          application/json:
            schema:
              title: Payload
              description: Graph payload to be sent to nightwing
              default: {}
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/health:
    get:
      tags:
        - workflows
      summary: Startup Check
      description: |-
        This is a startup check endpoint. It can be used to check if the application is up and running.

        Returns:
        - StartupSuccessResponse: If the application is up and running
        - StartupErrorResponse: If the application is not ready to serve requests
      operationId: startup_check_api_v1_workflow_health_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/nodes/definitions/:
    get:
      tags:
        - workflows
      summary: List Node Definitions
      description: |-
        List all node definitions.

        This API is used to list all node definitions in the node types registry.

        Args:
            request: Request object.
            listquery: EntityListQuery object.
            fields: List of fields to be included in the response.
            node_group: Filter for node definitions in the node types registry based on group_name.
            status: Filter for node definitions in the node types registry based on status.
            preset: Filter for node definitions in the node types registry based on preset.
            node_definition_ids: Filter for node definitions in the node types registry based on node_definition_ids.

        Returns:
            JSONResponse: JSON response containing the list of node definitions.
      operationId: list_node_definitions_api_v1_nodes_definitions__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: fields
          in: query
          required: false
          schema:
            type: array
            default:
              - node_definition_id
              - node_definition_name
              - display_name
              - node_group
              - status
              - created_ts
              - updated_ts
              - preset
              - runtime
            items:
              $ref: '#/components/schemas/ListingFields'
        - name: node_group
          in: query
          required: false
          schema:
            type: string
            title: Node Group
        - name: status
          in: query
          required: false
          schema:
            type: string
            title: Status
        - name: preset
          in: query
          required: false
          schema:
            type: string
            title: Preset
        - name: node_definition_ids
          in: query
          required: false
          schema:
            type: string
            title: Node Definition Ids
        - name: page_offset
          in: query
          required: false
          schema:
            type: integer
            title: Page Offset
        - name: page_limit
          in: query
          required: false
          schema:
            type: integer
            title: Page Limit
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
        - name: search
          in: query
          required: false
          schema:
            type: string
            title: Search
        - name: tags
          in: query
          required: false
          schema:
            type: string
            title: Tags
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDefinitionListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - workflows
      summary: Create Node Definition
      description: |-
        Create a new node definition.
        This API is used to create a new node definition in the node definition registry.

        Args:
            request: Request object.
            node_definition: NodeDefinition object.
            is_clone: This query parameter describes whether we need to clone the node definition.
            clone_node_definition_id: This query parameter is the id of node definition that needs to be cloned.
      operationId: create_node_definition_api_v1_nodes_definitions__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: is_clone
          in: query
          description: This query parameter describes whether we need to clone the node definition.
          required: false
          schema:
            type: boolean
            title: Is Clone
            description: This query parameter describes whether we need to clone the node definition.
        - name: clone_node_definition_id
          in: query
          description: This query parameter is the id of node definition that needs to be cloned
          required: false
          schema:
            type: string
            title: Clone Node Definition Id
            description: This query parameter is the id of node definition that needs to be cloned
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeDefinition'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDefinitionCreateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/nodes/definitions/{node_definition_id}':
    get:
      tags:
        - workflows
      summary: Get Node Definition
      description: |-
        Get a node definition.
        This API is used to get a node definition from the node definition registry.

        Args:
            request: Request object.
            node_definition_id: The ID of the node definition.

        Returns:
            JSONResponse: JSON response containing the node definition.
      operationId: get_node_definition_api_v1_nodes_definitions__node_definition_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: node_definition_id
          in: path
          description: The ID of the node definition.
          required: true
          schema:
            type: string
            title: Node Definition Id
            description: The ID of the node definition.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDefinitionReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - workflows
      summary: Update Node Definition
      description: |-
        Update a node definition.
        This API is used to update a node definition in the node definition registry.

        Args:
            request: Request object.
            node_definition: NodeDefinition object.
            node_definition_id: The ID of the node definition.

        Returns:
            JSONResponse: JSON response containing the status of the update and the updated node definition.
      operationId: update_node_definition_api_v1_nodes_definitions__node_definition_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: node_definition_id
          in: path
          description: This field describes the ID of the node definition used to query the node_definition registry.
          required: true
          schema:
            type: string
            title: Node Definition Id
            description: This field describes the ID of the node definition used to query the node_definition registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeDefinition'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDefinitionUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - workflows
      summary: Delete Node Definition
      description: |-
        Delete a node definition.
        This API is used to delete a node definition from the node definition registry.

        Args:
            request: Request object.
            node_definition_id: The ID of the node definition.

        Returns:
            JSONResponse: JSON response containing the status of the deletion.
      operationId: delete_node_definition_api_v1_nodes_definitions__node_definition_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: node_definition_id
          in: path
          description: This field describes the ID of the node definition that needs to be deleted.
          required: true
          schema:
            type: string
            title: Node Definition Id
            description: This field describes the ID of the node definition that needs to be deleted.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDefinitionDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - workflows
      summary: Patch Node Definition
      description: |-
        Patch a node definition.
        This API is used to patch a node definition in the node definition registry.

        Args:
            request: Request object.
            patch_config: PatchNodeDefinition object.
            node_definition_id: The ID of the node definition.

        Returns:
            JSONResponse: JSON response containing the status of the patch and the patched node definition.
      operationId: patch_node_definition_api_v1_nodes_definitions__node_definition_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: node_definition_id
          in: path
          description: This field describes the ID of the node definition used to query the node_definition registry.
          required: true
          schema:
            type: string
            title: Node Definition Id
            description: This field describes the ID of the node definition used to query the node_definition registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchNodeDefinition'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDefinitionUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/nodes/definitions/register:
    post:
      tags:
        - workflows
      summary: Register Node Definition
      description: |-
        Register a node definition.
        This API is used to register a node definition with deployment details in the node definition registry.

        Args:
            request: Request object.
            node_registration: NodeRegistration object.

        Returns:
            JSONResponse: JSON response containing the status of the registration and the registered node definition.
      operationId: register_node_definition_api_v1_nodes_definitions_register_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeRegistration'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDefinitionRegisterResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/nodes/definitions/create_preset_node_definitions:
    post:
      tags:
        - workflows
      summary: Create Node Definition Presets
      description: This API is triggered for creating Preset Node Definitions for a client/account upon creation.
      operationId: create_node_definition_presets_api_v1_nodes_definitions_create_preset_node_definitions_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/nodes/:
    get:
      tags:
        - workflows
      summary: List Nodes
      description: |-
        This API lists the total number of nodes that have been registered in the node registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered nodes in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of nodes registered and a list of all these nodes in the form of a dictionary - the key of the dictionary being the n identifier and the value being the name of the node.
      operationId: list_nodes_api_v1_nodes__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: internal
          in: query
          description: 'This query parameter describes whether we need to list either internal nodes, external nodes or all nodes.'
          required: false
          schema:
            type: boolean
            title: Internal
            description: 'This query parameter describes whether we need to list either internal nodes, external nodes or all nodes.'
        - name: preset
          in: query
          description: 'This query parameter describes whether we need to list either preset nodes, custom nodes or all nodes.'
          required: false
          schema:
            type: boolean
            title: Preset
            description: 'This query parameter describes whether we need to list either preset nodes, custom nodes or all nodes.'
        - name: tags
          in: query
          description: This query parameter enables the user to search for nodes in the node registry based on tags.
          required: false
          schema:
            type: string
            title: Tags
            description: This query parameter enables the user to search for nodes in the node registry based on tags.
        - name: search
          in: query
          description: This query parameter allows you to search for nodes in the node registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter allows you to search for nodes in the node registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: fields
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: array
            title: Fields
            description: This query parameter allows you to limit the number of records returned from the listing query.
            default: []
            items:
              type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - workflows
      summary: Create Node
      description: |-
        This API is used to register any node along with metadata configurations pertaining to it in the node registry.
        The metadata for this node holds information about the node and its functionality in the workflow it is a part of.
        The node registry also helps in isolating and composing nodes as entities that can be used to build and orchestrate workflows.
        While a node is created, the API also allows implicit referencing to the workflow of which it is a part of

        The input to this API is:
            1. a dictionary containing all the metadata about the node - name, description, and any other configurations that drives its functionality.
            2. a dictionary containing all the metadata about the workflow that the node is a part of which is required to be updated with the new node metadata configuration.
        The output is a node identifier which is a unique reference to this node in the node registry, and a config which is the same as the input along with the generated identifier.
      operationId: create_node_api_v1_nodes__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_create_node_api_v1_nodes__post'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeCreateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/nodes/{node_id}':
    get:
      tags:
        - workflows
      summary: Get Node
      description: |-
        This API allows the user to read metadata configuration pertaining to a node identifier.
        By default, the API provides the latest metadata configuration which is present in the node registry.
        The API also helps capture the end-to-end journey of this metadata by providing versioning, and hence captures data lineage in the metadata layer.
        Using the version parameter (which by default points to the latest version of the node), we can obtain different versions of this metadata configuration.

        The input to this API is a node identifier, which is mandatory. We can pass an optional version parameter as well - if not passed, it will point to the latest version of the data.
        The output of this API is all the metadata pertaining to the corresponding node identifier.
      operationId: get_node_api_v1_nodes__node_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          description: This field describes the version of the node that will be parsed from the node metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the node that will be parsed from the node metadata lineage.
            default: 0
        - name: node_id
          in: path
          description: This field describes the ID of the node used to query the node registry.
          required: true
          schema:
            type: string
            title: Node Id
            description: This field describes the ID of the node used to query the node registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - workflows
      summary: Update Node
      description: |-
        This API allows metadata updation for any specified node and re-registers the metadata in the node registry.
        Since data lineage is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.
        It does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the node metadata.

        The input to this API is:
            1. a dictionary containing all the metadata about the node - name, description, and any other configurations that drives its functionality.
            2. a dictionary containing all the metadata about the workflow that the node is a part of which is required to be updated with the corresponding node metadata configuration.
      operationId: update_node_api_v1_nodes__node_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: node_id
          in: path
          description: This field describes the ID of the node used to query the node registry.
          required: true
          schema:
            type: string
            title: Node Id
            description: This field describes the ID of the node used to query the node registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_update_node_api_v1_nodes__node_id__put'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - workflows
      summary: Delete Node
      description: |-
        This API allows metadata deletion for any specified node identifier.
        Once invoked, this API removes this node entry from both the listing configuration and also deletes the corresponding metadata stored for this in the node registry.
        If delete API is invoked, all versions of the metadata is deleted.

        The input to this API is a node identifier which refers to the node that has to be deleted.
      operationId: delete_node_api_v1_nodes__node_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: node_id
          in: path
          description: This field describes the ID of the node used to query the node registry.
          required: true
          schema:
            type: string
            title: Node Id
            description: This field describes the ID of the node used to query the node registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/nodes/deployment/{deployment_id}':
    get:
      tags:
        - workflows
      summary: Get Node Deployment Config
      operationId: get_node_deployment_config_api_v1_nodes_deployment__deployment_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: deployment_id
          in: path
          description: This field describes the ID of the deployment used to query the config registry.
          required: true
          schema:
            type: string
            title: Deployment Id
            description: This field describes the ID of the deployment used to query the config registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/nodes/{node_definition_id}/deployment':
    put:
      tags:
        - workflows
      summary: Update Node Deployment Config
      description: Create a new deployment config.
      operationId: update_node_deployment_config_api_v1_nodes__node_definition_id__deployment_put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: node_definition_id
          in: path
          description: This field describes the ID of the node definition.
          required: true
          schema:
            type: string
            title: Node Definition Id
            description: This field describes the ID of the node definition.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeploymentConfig'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/:
    get:
      tags:
        - workflows
      summary: List Workflows
      description: |-
        This API lists the total number of workflows that have been registered in the workflow registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered workflows in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of workflows registered and a list of all these workflows in the form of a dictionary - the key of the dictionary being the workflow identifier and the value being the name of the workflow.
      operationId: list_workflows_api_v1_workflow__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: internal
          in: query
          description: 'This query parameter describes whether we need to list either internal workflows, external workflows or all workflows.'
          required: false
          schema:
            type: boolean
            title: Internal
            description: 'This query parameter describes whether we need to list either internal workflows, external workflows or all workflows.'
        - name: preset
          in: query
          description: 'This query parameter describes whether we need to list either preset workflows, custom workflows or all workflows.'
          required: false
          schema:
            type: boolean
            title: Preset
            description: 'This query parameter describes whether we need to list either preset workflows, custom workflows or all workflows.'
        - name: tags
          in: query
          description: This query parameter enables the user to search for workflows in the workflow registry based on tags.
          required: false
          schema:
            type: string
            title: Tags
            description: This query parameter enables the user to search for workflows in the workflow registry based on tags.
        - name: search
          in: query
          description: This query parameter enables the user to search for workflows in the workflow registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for workflows in the workflow registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: status
          in: query
          description: This query parameter enables the user to search for workflows in the workflow registry based on status.
          required: false
          schema:
            type: string
            title: Status
            description: This query parameter enables the user to search for workflows in the workflow registry based on status.
        - name: workflow_ids
          in: query
          description: This query parameter allows you to define the workflow ids that must be returned from the listing query.
          required: false
          schema:
            type: string
            title: Workflow Ids
            description: This query parameter allows you to define the workflow ids that must be returned from the listing query.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - workflows
      summary: Create Workflow
      description: |-
        This API is used to register any workflow along with metadata configurations pertaining to it in the workflow registry.
        The metadata for this workflow holds information about the workflow and configurations about how to orchestrate and execute the workflow.
        The workflow registry also helps in isolating and composing workflows as entities that can be used as backbones in building features and audiences.

        The input to this API is a dictionary containing all the metadata about the workflow - name, description, and any other configurations that drives its functionality.
        The output is a workflow identifier which is a unique reference to this workflow in the workflow registry, and a config which is the same as the input along with the generated identifier.
      operationId: create_workflow_api_v1_workflow__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkflow'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowCreateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/validate:
    post:
      tags:
        - workflows
      summary: Validate Workflow
      description: |-
        This API is used to validate any workflow metadata configurations which is passed as the input payload.
        The validations are run for the configurations in which we expect metadata to be in the workflows and the nodes that belong to it.
        The API is useful to validate the entries in the workflow (and corresponding nodes) at any stage before registering and deploying them to run.

        The input to this API is a dictionary containing all the metadata about the workflow - name, description, and any other configurations that drives its functionality.
        If validated, the output will be a success. Else, the errors or failures in the validation process will be shown.
      operationId: validate_workflow_api_v1_workflow_validate_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowValidationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/internal/configs:
    get:
      tags:
        - workflows
      summary: Get Config Internal
      operationId: get_config_internal_api_v1_workflow_internal_configs_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: client
          in: query
          required: true
          schema:
            type: string
            title: Client
        - name: use_case
          in: query
          required: true
          schema:
            type: string
            title: Use Case
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/enable:
    post:
      tags:
        - workflows
      summary: Deploy Workflow
      description: |-
        This API allows the deployment of any specified workflow and make it available for execution in an operational environment on asynchronous mode.
        The  API allows reading the latest metadata configuration pertaining to the workflow and deploy it as a graph on a target system or workflow execution engine.
        This API communicates with lantern, which in turn, communicates with raven to create a directed acyclic graph (DAG).
        This DAG will be deployed on an execution framework (we currently use Airflow) - which, when triggered, executes the workflow in a Spark environment.
        This API is a precursor to the /async/run API for workflows to run in async mode.

        The input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.
        The optional use_case parameter is used in creation of the DAG.

        The output of this API will be a DAG identifier which is a unique reference to every DAG created in lantern.
      operationId: deploy_workflow_api_v1_workflow_enable_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      requestBody:
        content:
          application/json:
            schema:
              title: Deploy Request
              description: This field describes the params associated with deploying this workflow.
              default: {}
              allOf:
                - $ref: '#/components/schemas/DeployParams'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDeployResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/deploy:
    post:
      tags:
        - workflows
      summary: Deploy Workflow
      description: |-
        This API allows the deployment of any specified workflow and make it available for execution in an operational environment on asynchronous mode.
        The  API allows reading the latest metadata configuration pertaining to the workflow and deploy it as a graph on a target system or workflow execution engine.
        This API communicates with lantern, which in turn, communicates with raven to create a directed acyclic graph (DAG).
        This DAG will be deployed on an execution framework (we currently use Airflow) - which, when triggered, executes the workflow in a Spark environment.
        This API is a precursor to the /async/run API for workflows to run in async mode.

        The input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.
        The optional use_case parameter is used in creation of the DAG.

        The output of this API will be a DAG identifier which is a unique reference to every DAG created in lantern.
      operationId: deploy_workflow_api_v1_workflow_deploy_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      requestBody:
        content:
          application/json:
            schema:
              title: Deploy Request
              description: This field describes the params associated with deploying this workflow.
              default: {}
              allOf: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDeployResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/deploy_v2:
    post:
      tags:
        - workflows
      summary: Deploy Workflow V2
      operationId: deploy_workflow_v2_api_v1_workflow_deploy_v2_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: false
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
        - name: engine
          in: query
          description: This field describes the engine of the workflow used to deploy the workflow.
          required: false
          schema:
            type: string
            title: Engine
            description: This field describes the engine of the workflow used to deploy the workflow.
        - name: cron_expression
          in: query
          description: This field describes the cron_expression of the workflow used to deploy the workflow.
          required: false
          schema:
            type: string
            title: Cron Expression
            description: This field describes the cron_expression of the workflow used to deploy the workflow.
        - name: sync
          in: query
          description: This field describes the type of deployment of the workflow
          required: false
          schema:
            type: boolean
            title: Sync
            description: This field describes the type of deployment of the workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_deploy_workflow_v2_api_v1_workflow_deploy_v2_post'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDeployResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/enable/status:
    get:
      tags:
        - workflows
      summary: Deploy Workflow Status
      operationId: deploy_workflow_status_api_v1_workflow_enable_status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDeployResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/deploy/status:
    get:
      tags:
        - workflows
      summary: Deploy Workflow Status
      operationId: deploy_workflow_status_api_v1_workflow_deploy_status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDeployResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/async/run:
    post:
      tags:
        - workflows
      summary: Async Run Workflow
      operationId: async_run_workflow_api_v1_workflow_async_run_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: disable_cache
          in: query
          description: 'This query parameter when set to True, disables the s3 based cache '
          required: false
          schema:
            type: boolean
            title: Disable Cache
            description: 'This query parameter when set to True, disables the s3 based cache '
            default: false
        - name: add_callback
          in: query
          description: 'This query parameter when set to True, adds callback to the graph payload '
          required: false
          schema:
            type: boolean
            title: Add Callback
            description: 'This query parameter when set to True, adds callback to the graph payload '
            default: false
      requestBody:
        content:
          application/json:
            schema:
              title: Run Payload
              description: Graph payload to be sent to nightwing
              default: {}
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowRunResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/run:
    post:
      tags:
        - workflows
      summary: Sync Run Workflow
      description: |-
        This API is the trigger to execute the DAG in synchronous mode using pandas and not spark queries.
        This API is meant to be for running lighter workloads and the execution happens on the pandasQL framework, which is hosted on nightwing.

        The input to the API is a workflow which has a list of multiple nodes with their corresponding configurations.
        The output of the API is a dictionary of every persisted output of the workflow. It can be a dataset or a model artifact.
      operationId: sync_run_workflow_api_v1_workflow_run_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowSpeedrunRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowSpeedrunResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/runv2:
    post:
      tags:
        - workflows
      summary: Sync Run Workflow V2
      operationId: sync_run_workflow_v2_api_v1_workflow_runv2_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: Payload
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/process-packet:
    post:
      tags:
        - workflows
      summary: Process Packet Workflow
      description: |-
        This API is the trigger to execute the DAG in synchronous mode for a packet(s) of different types.
        This API is meant to be for running lighter workloads and the execution happens on the pandasQL framework, which is hosted on nightwing.

        The input to the API is a workflow which has a list of multiple nodes with their corresponding configurations.
        The output of the API is a dictionary of every persisted output of the workflow. It can be a dataset or a model artifact.
      operationId: process_packet_workflow_api_v1_workflow_process_packet_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_process_packet_workflow_api_v1_workflow_process_packet_post'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/status:
    get:
      tags:
        - workflows
      summary: Workflow Status
      description: |-
        This API can be used to view the status of the DAG run, if triggered for async runs.
        The input to the API is a workflow identifier which is a unique reference to the workflow in the workflow registry.
        Other optional parameters include those that are used to describe the DAG -  the workflow's corresponding DAG run identifier created and the use case of the created workflow.

        The output of the API is a status of the last run of the workflow.
      operationId: workflow_status_api_v1_workflow_status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStatusResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/internal/status:
    get:
      tags:
        - workflows
      summary: Workflow Status
      description: |-
        This API can be used to view the status of the DAG run, if triggered for async runs.
        The input to the API is a workflow identifier which is a unique reference to the workflow in the workflow registry.
        Other optional parameters include those that are used to describe the DAG -  the workflow's corresponding DAG run identifier created and the use case of the created workflow.

        The output of the API is a status of the last run of the workflow.
      operationId: workflow_status_api_v1_workflow_internal_status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowStatusResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/workflow/schema_changes/{workflow_id}':
    get:
      tags:
        - workflows
      summary: Get Schema Changes
      description: Updates the specified connector using the given payload
      operationId: get_schema_changes_api_v1_workflow_schema_changes__workflow_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          required: true
          schema:
            type: string
            title: Workflow Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/disable:
    post:
      tags:
        - workflows
      summary: Undeploy Workflow
      description: |-
        This API allows the un-deployment of any specified workflow that has previously been deployed on an execution engine.
        The  API releases any compute that was configured during deployment of the DAG.
        This API communicates with lantern, which in turn, communicates with raven to undeploy a directed acyclic graph (DAG).

        The input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.
        The optional use_case parameter is used as a reference for the DAG.
      operationId: undeploy_workflow_api_v1_workflow_disable_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
        - name: use_case
          in: query
          required: false
          schema:
            type: string
            title: Use Case
            default: create_workflow
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowUndeployResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/undeploy:
    post:
      tags:
        - workflows
      summary: Undeploy Workflow
      description: |-
        This API allows the un-deployment of any specified workflow that has previously been deployed on an execution engine.
        The  API releases any compute that was configured during deployment of the DAG.
        This API communicates with lantern, which in turn, communicates with raven to undeploy a directed acyclic graph (DAG).

        The input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.
        The optional use_case parameter is used as a reference for the DAG.
      operationId: undeploy_workflow_api_v1_workflow_undeploy_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: query
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
        - name: use_case
          in: query
          required: false
          schema:
            type: string
            title: Use Case
            default: create_workflow
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowUndeployResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/workflow/{workflow_id}':
    get:
      tags:
        - workflows
      summary: Get Workflow
      description: |-
        This API allows the user to read metadata configuration pertaining to a workflow identifier.
        By default, the API provides the latest metadata configuration which is present in the workflow registry.
        The API also helps capture the end-to-end journey of this metadata by providing versioning, and hence captures data lineage in the metadata layer.
        Using the version parameter (which by default points to the latest version of the workflow), we can obtain different versions of this metadata configuration.

        The input to this API is a workflow identifier, which is mandatory. We can pass an optional version parameter as well - if not passed, it will point to the latest version of the data.
        The get_dependencies option is an additional parameter (optional) that allows the understanding of the relationship of different nodes in the workflow. It is useful to understand in execution and deletion tasks.
        The output of this API is all the metadata pertaining to the corresponding workflow identifier.
      operationId: get_workflow_api_v1_workflow__workflow_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: get_dependencies
          in: query
          description: This field is a query parameter that is used to get dependencies between all the nodes in the workflow.
          required: false
          schema:
            type: string
            title: Get Dependencies
            description: This field is a query parameter that is used to get dependencies between all the nodes in the workflow.
            default: false
        - name: version
          in: query
          description: This field describes the version of the workflow that will be parsed from the workflow metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the workflow that will be parsed from the workflow metadata lineage.
            default: 0
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - workflows
      summary: Update Workflow
      description: |-
        This API allows metadata updation for any specified workflow and re-registers the metadata in the workflow registry.
        Since data lineage is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.
        It does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the workflow metadata.

        The input to this API is a workflow identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.
      operationId: update_workflow_api_v1_workflow__workflow_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - workflows
      summary: Delete Workflow
      description: |-
        This API allows the deletion of any specified workflow.
        It has two functionalities - one being the deletion of just the DAG and updation of the DAG config, and the other being deletion of the workflow metadata from the registry config.

        The input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.
        The optional confirm_delete parameter is a boolean value that is used by the tool. If set to True, it goes ahead and deletes the workflow DAG and metadata configurations. If False, it generates a prompt that the user can confirm again.
      operationId: delete_workflow_api_v1_workflow__workflow_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - workflows
      summary: Patch Workflow
      operationId: patch_workflow_api_v1_workflow__workflow_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowPatch'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/workflow/configs/{workflow_id}':
    delete:
      tags:
        - workflows
      summary: Delete Workflow
      description: |-
        This API allows the deletion of any specified workflow.
        It has two functionalities - one being the deletion of just the DAG and updation of the DAG config, and the other being deletion of the workflow metadata from the registry config.

        The input to the API is a workflow identifier which is a unique reference to this workflow in the workflow registry.
        The optional confirm_delete parameter is a boolean value that is used by the tool. If set to True, it goes ahead and deletes the workflow DAG and metadata configurations. If False, it generates a prompt that the user can confirm again.
      operationId: delete_workflow_api_v1_workflow_configs__workflow_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/workflow{workflow_id}/runs/{run_id}/status':
    get:
      tags:
        - workflows
      summary: Get Workflow Run Status
      description: |-
        This API allows the user to get the status of a particular run of a workflow.
        The input to the API is a workflow identifier and a run identifier, which are mandatory.
        The output of the API is the status of the workflow run, with the corresponding DAG run identifier, use case and the status of the DAG run.
      operationId: get_workflow_run_status_api_v1_workflow_workflow_id__runs__run_id__status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
        - name: run_id
          in: path
          description: This field describes the ID of the workflow run used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Run Id
            description: This field describes the ID of the workflow run used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/workflow/{workflow_id}/runs':
    get:
      tags:
        - workflows
      summary: List Workflow Runs
      description: |-
        This API allows the user to list all the runs of a workflow.
        The input to the API is a workflow identifier, which is mandatory.
        The output of the API is a list of all the runs of the workflow, with the corresponding DAG run identifier, use case and the status of the DAG run.
      operationId: list_workflow_runs_api_v1_workflow__workflow_id__runs_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: search
          in: query
          description: This query parameter enables the user to search for workflows in the workflow registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for workflows in the workflow registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/workflow/{workflow_id}/runs/{run_id}':
    get:
      tags:
        - workflows
      summary: Get Workflow Run
      description: |-
        This API allows the user to get the details of a particular run of a workflow.
        The input to the API is a workflow identifier and a run identifier, which are mandatory.
        The output of the API is the details of the workflow run, with the corresponding DAG run identifier, use case and the status of the DAG run.
      operationId: get_workflow_run_api_v1_workflow__workflow_id__runs__run_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workflow_id
          in: path
          description: This field describes the ID of the workflow used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Workflow Id
            description: This field describes the ID of the workflow used to query the workflow registry.
        - name: run_id
          in: path
          description: This field describes the ID of the workflow run used to query the workflow registry.
          required: true
          schema:
            type: string
            title: Run Id
            description: This field describes the ID of the workflow run used to query the workflow registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/workflow/create_preset_workflows:
    post:
      tags:
        - workflows
      summary: Create Preset Workflows
      description: This API is triggered for creating Preset Workflows for a client/account upon creation.
      operationId: create_preset_workflows_api_v1_workflow_create_preset_workflows_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/workflow/callback:
    post:
      tags:
        - workflows
      summary: Workflow Callback
      operationId: workflow_callback_api_v1_workflow_callback_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: use_stephanie
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Stephanie
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: false
        - name: use_dataset_api
          in: query
          description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
          required: false
          schema:
            type: boolean
            title: Use Dataset Api
            description: This query parameter allows you to choose if the documents should be fetched from stephanie or documents dataset.
            default: true
        - name: job_id
          in: query
          description: This query parameter allows you to provide the job config id used to represent the workflow run.
          required: false
          schema:
            type: string
            title: Job Id
            description: This query parameter allows you to provide the job config id used to represent the workflow run.
            default: ''
      requestBody:
        content:
          application/json:
            schema:
              title: Callback Payload
              description: Document Callback payload from nightwing
              default: {}
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/jobs/:
    get:
      tags:
        - workflows
      summary: List Jobs
      operationId: list_jobs_api_v1_jobs__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: search
          in: query
          description: This query parameter enables the user to search for jobs in the job registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for jobs in the job registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: workflow_id
          in: query
          description: This query parameter allows you to filter the jobs based on the workflow_id.
          required: false
          schema:
            type: string
            title: Workflow Id
            description: This query parameter allows you to filter the jobs based on the workflow_id.
        - name: status
          in: query
          description: This query parameter allows you to filter the jobs based on the status.
          required: false
          schema:
            type: string
            title: Status
            description: This query parameter allows you to filter the jobs based on the status.
        - name: job_ids
          in: query
          description: This query parameter allows you to define the job ids that must be returned from the listing query.
          required: false
          schema:
            type: string
            title: Job Ids
            description: This query parameter allows you to define the job ids that must be returned from the listing query.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - workflows
      summary: Create Job
      operationId: create_job_api_v1_jobs__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/jobs/{job_id}':
    get:
      tags:
        - workflows
      summary: Get Job
      operationId: get_job_api_v1_jobs__job_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
            default: 0
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the job registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the job registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - workflows
      summary: Delete Job
      operationId: delete_job_api_v1_jobs__job_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the job registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the job registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - workflows
      summary: Patch Job
      operationId: patch_job_api_v1_jobs__job_id__patch
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the job registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the job registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPatch'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/jobs/{job_id}/packet_status':
    get:
      tags:
        - workflows
      summary: Get Job Packet Status
      operationId: get_job_packet_status_api_v1_jobs__job_id__packet_status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: event_type
          in: query
          description: This field describes the event_type of the job used to query the job registry.
          required: false
          schema:
            type: string
            title: Event Type
            description: This field describes the event_type of the job used to query the job registry.
            default: ''
        - name: sources
          in: query
          description: This field describes the sources of the job used to query the job registry.
          required: false
          schema:
            type: string
            title: Sources
            description: This field describes the sources of the job used to query the job registry.
            default: ''
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the job registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the job registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/jobs/{job_id}/status':
    get:
      tags:
        - workflows
      summary: Get Job Status
      operationId: get_job_status_api_v1_jobs__job_id__status_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
            default: 0
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the job registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the job registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/jobs/{job_id}/payload':
    get:
      tags:
        - workflows
      summary: Get Job Payload
      operationId: get_job_payload_api_v1_jobs__job_id__payload_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
            default: 0
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the job registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the job registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPayloadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/jobs/{job_id}/node/{node_name}/payload':
    get:
      tags:
        - workflows
      summary: Get Node Output
      operationId: get_node_output_api_v1_jobs__job_id__node__node_name__payload_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
            default: 0
        - name: job_id
          in: path
          description: This field describes the ID of the job used to query the job registry.
          required: true
          schema:
            type: string
            title: Job Id
            description: This field describes the ID of the job used to query the job registry.
        - name: node_name
          in: path
          description: This field describes the ID of the node.
          required: true
          schema:
            type: string
            title: Node Name
            description: This field describes the ID of the node.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePayloadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/actions/:
    get:
      tags:
        - agents
      summary: List Actions
      operationId: list_actions_api_v1_actions__get
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: x-user-id
          in: header
          required: true
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: page
          in: query
          required: false
          schema:
            type: integer
            title: Page
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - agents
      summary: Create Action
      operationId: create_action_api_v1_actions__post
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: x-user-id
          in: header
          required: true
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionCreateRequest'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/actions/{id}':
    get:
      tags:
        - agents
      summary: Get Action By Id
      operationId: get_action_by_id_api_v1_actions__id__get
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/actions/{action_id}':
    put:
      tags:
        - agents
      summary: Update Action
      operationId: update_action_api_v1_actions__action_id__put
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: action_id
          in: path
          required: true
          schema:
            type: string
            title: Action Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: Data
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - agents
      summary: Delete Action
      description: Delete a action by ID.
      operationId: delete_action_api_v1_actions__action_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: action_id
          in: path
          required: true
          schema:
            type: string
            title: Action Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/chat/:
    post:
      tags:
        - agents
      summary: Create Chat
      operationId: create_chat_api_v1_chat__post
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: x-user-id
          in: header
          required: true
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatBase'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCreateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/chat/user/{user_id}':
    get:
      tags:
        - agents
      summary: List Chats
      operationId: list_chats_api_v1_chat_user__user_id__get
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: page
          in: query
          required: false
          schema:
            type: integer
            title: Page
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            title: User Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/chat/{chat_id}':
    get:
      tags:
        - agents
      summary: Get Chat By Id
      operationId: get_chat_by_id_api_v1_chat__chat_id__get
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
            title: Chat Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessagesResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - agents
      summary: Delete Chat
      operationId: delete_chat_api_v1_chat__chat_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: x-user-id
          in: header
          required: true
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
            title: Chat Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/chat/{chat_id}/messages':
    post:
      tags:
        - agents
      summary: Add Chat Message
      operationId: add_chat_message_api_v1_chat__chat_id__messages_post
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
            title: Chat Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessage'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddMessagesResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/chat/{message_id}/completions':
    get:
      tags:
        - agents
      summary: Get Message Response
      operationId: get_message_response_api_v1_chat__message_id__completions_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: message_id
          in: path
          required: true
          schema:
            type: string
            title: Message Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__schemas__chat__CompletionsMessagesResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/agents/:
    get:
      tags:
        - agents
      summary: List Agents
      description: List all agents with optional pagination.
      operationId: list_agents_api_v1_agents__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: page
          in: query
          required: false
          schema:
            type: integer
            title: Page
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - agents
      summary: Create Agent
      description: Create a new agent.
      operationId: create_agent_api_v1_agents__post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentBase'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/agents/{agent_id}':
    get:
      tags:
        - agents
      summary: Get Agent By Id
      description: Get a specific agent by ID.
      operationId: get_agent_by_id_api_v1_agents__agent_id__get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - agents
      summary: Update Agent
      description: Update an existing agent.
      operationId: update_agent_api_v1_agents__agent_id__put
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - agents
      summary: Delete Agent
      description: Delete an agent by ID.
      operationId: delete_agent_api_v1_agents__agent_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/agents/{agent_id}/run':
    post:
      tags:
        - agents
      summary: Run Agent
      description: Run an existing agent.
      operationId: run_agent_api_v1_agents__agent_id__run_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: Payload
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/agents/{agent_id}/{message_id}/completions':
    get:
      tags:
        - agents
      summary: Get Message Response
      operationId: get_message_response_api_v1_agents__agent_id___message_id__completions_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: agent_id
          in: path
          required: true
          schema:
            type: string
            title: Agent Id
        - name: message_id
          in: path
          required: true
          schema:
            type: string
            title: Message Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/app__schemas__agents__CompletionsMessagesResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/agents/create_account_datasets:
    post:
      tags:
        - agents
      summary: Create Account Datasets
      description: This API is triggered for creating Account Level Datasets for a client/account upon creation.
      operationId: create_account_datasets_api_v1_agents_create_account_datasets_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/chat/notify/:
    post:
      tags:
        - agents
      summary: Publish Notification
      operationId: publish_notification_api_v1_chat_notify__post
      parameters:
        - name: x-client-id
          in: header
          required: true
          schema:
            type: string
            title: X-Client-Id
        - name: x-user-id
          in: header
          required: true
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationBase'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationCreateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/ping:
    get:
      tags:
        - agents
      summary: Ping
      operationId: ping_api_v1_ping_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v2/connectors/connections:
    get:
      tags:
        - platform-connector
      summary: List Connectors
      description: List all the connectors
      operationId: list_connectors_api_v2_connectors_connections_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: search
          in: query
          required: false
          schema:
            type: string
            title: Search
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
        - name: page_limit
          in: query
          required: false
          schema:
            type: integer
            title: Page Limit
        - name: page_offset
          in: query
          required: false
          schema:
            type: integer
            title: Page Offset
        - name: status
          in: query
          required: false
          schema:
            type: string
            title: Status
        - name: scheduleType
          in: query
          required: false
          schema:
            type: string
            title: Scheduletype
        - name: source_id
          in: query
          required: false
          schema:
            type: string
            title: Source Id
        - name: destination_id
          in: query
          required: false
          schema:
            type: string
            title: Destination Id
        - name: source_type
          in: query
          required: false
          schema:
            type: string
            title: Source Type
        - name: destination_type
          in: query
          required: false
          schema:
            type: string
            title: Destination Type
        - name: last_attempt_status
          in: query
          required: false
          schema:
            type: string
            title: Last Attempt Status
        - name: is_internal
          in: query
          required: false
          schema:
            type: boolean
            title: Is Internal
            default: false
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Connector
      description: Creates a connector between given source and destination
      operationId: create_connector_api_v2_connectors_connections_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConnector'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateConnectorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}':
    get:
      tags:
        - platform-connector
      summary: Get Connector
      description: Returns connector for a given connection_id
      operationId: get_connector_api_v2_connectors_connections__connection_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: internal_config
          in: query
          required: false
          schema:
            type: boolean
            title: Internal Config
            default: false
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Connector
      description: Delete the given connector
      operationId: delete_connector_api_v2_connectors_connections__connection_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - platform-connector
      summary: Update Connector
      description: Update the given connector
      operationId: update_connector_api_v2_connectors_connections__connection_id__patch
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConnector'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/run':
    post:
      tags:
        - platform-connector
      summary: Run Connector
      description: Runs a connector between given source and destination
      operationId: run_connector_api_v2_connectors_connections__connection_id__run_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunConnectorResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/runs/{run_id}/status':
    get:
      tags:
        - platform-connector
      summary: Get Connector Run Status
      operationId: get_connector_run_status_api_v2_connectors_connections__connection_id__runs__run_id__status_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConnectorRunStatusResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/runs/{run_id}':
    get:
      tags:
        - platform-connector
      summary: Get Connector Run
      description: Gets run of the given connector
      operationId: get_connector_run_api_v2_connectors_connections__connection_id__runs__run_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorRunDetail'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/feeds/{run_id}':
    get:
      tags:
        - platform-connector
      summary: Get Connector Run
      description: Gets run of the given connector
      operationId: get_connector_run_api_v2_connectors_connections__connection_id__feeds__run_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectorRunDetail'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/runs/{run_id}/cancel':
    put:
      tags:
        - platform-connector
      summary: Cancel Run
      description: Cancel specified run of the given connector
      operationId: cancel_run_api_v2_connectors_connections__connection_id__runs__run_id__cancel_put
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/runs':
    get:
      tags:
        - platform-connector
      summary: List Connector Runs
      description: Lists runs of the given connector
      operationId: list_connector_runs_api_v2_connectors_connections__connection_id__runs_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            title: Offset
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorRunsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/feeds':
    get:
      tags:
        - platform-connector
      summary: List Connector Runs
      description: Lists runs of the given connector
      operationId: list_connector_runs_api_v2_connectors_connections__connection_id__feeds_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            title: Offset
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            title: Limit
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorRunsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/connections/{connection_id}/latest-run':
    get:
      tags:
        - platform-connector
      summary: Get Latest Run
      description: Gets latest run of the given connector
      operationId: get_latest_run_api_v2_connectors_connections__connection_id__latest_run_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: path
          required: true
          schema:
            type: string
            title: Connection Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/sources/definitions:
    get:
      tags:
        - platform-connector
      summary: List Source Definitons
      description: Lists all the supported sources
      operationId: list_source_definitons_api_v2_connectors_sources_definitions_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Source Definition
      description: Create new source definition
      operationId: create_source_definition_api_v2_connectors_sources_definitions_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSourceDefinition'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/sources/definitions/{source_definition_id}':
    get:
      tags:
        - platform-connector
      summary: Get Source Definition
      description: Returns source defintion for a given source
      operationId: get_source_definition_api_v2_connectors_sources_definitions__source_definition_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: source_definition_id
          in: path
          required: true
          schema:
            type: string
            title: Source Definition Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Source Definition
      description: Deletes given source definition
      operationId: delete_source_definition_api_v2_connectors_sources_definitions__source_definition_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: source_definition_id
          in: path
          required: true
          schema:
            type: string
            title: Source Definition Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - platform-connector
      summary: Update Source Definition
      description: updates given source definition
      operationId: update_source_definition_api_v2_connectors_sources_definitions__source_definition_id__patch
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: source_definition_id
          in: path
          required: true
          schema:
            type: string
            title: Source Definition Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSourceDefinition'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/sources:
    get:
      tags:
        - platform-connector
      summary: List Sources
      description: Lists all the created sources
      operationId: list_sources_api_v2_connectors_sources_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: is_internal
          in: query
          required: false
          schema:
            type: boolean
            title: Is Internal
            default: false
        - name: test_connection_status
          in: query
          required: false
          schema:
            type: string
            title: Test Connection Status
        - name: search
          in: query
          required: false
          schema:
            type: string
            title: Search
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
        - name: page_limit
          in: query
          required: false
          schema:
            type: integer
            title: Page Limit
        - name: page_offset
          in: query
          required: false
          schema:
            type: integer
            title: Page Offset
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSourcesResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Source
      description: creates given source
      operationId: create_source_api_v2_connectors_sources_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSource'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/sources/{source_id}':
    get:
      tags:
        - platform-connector
      summary: Get Source
      description: Get given source_id
      operationId: get_source_api_v2_connectors_sources__source_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            title: Source Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Source
      description: Deletes given source
      operationId: delete_source_api_v2_connectors_sources__source_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            title: Source Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - platform-connector
      summary: Update Source
      description: updates given source
      operationId: update_source_api_v2_connectors_sources__source_id__patch
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            title: Source Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSource'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/sources/{source_id}/test-connection':
    post:
      tags:
        - platform-connector
      summary: Test Source Connection
      description: Tests connection foe the given source_id
      operationId: test_source_connection_api_v2_connectors_sources__source_id__test_connection_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            title: Source Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/sources/{source_id}/infer-schema':
    get:
      tags:
        - platform-connector
      summary: Infer Source Schema
      description: Tests connection foe the given source_id
      operationId: infer_source_schema_api_v2_connectors_sources__source_id__infer_schema_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: connection_id
          in: query
          required: false
          schema:
            type: string
            title: Connection Id
        - name: disable_cache
          in: query
          required: false
          schema:
            type: boolean
            title: Disable Cache
            default: false
        - name: source_id
          in: path
          required: true
          schema:
            type: string
            title: Source Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/destinations/definitions:
    get:
      tags:
        - platform-connector
      summary: List Destination Definitons
      description: Lists all the supported destinations
      operationId: list_destination_definitons_api_v2_connectors_destinations_definitions_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Destination Definition
      description: Create new destination definition
      operationId: create_destination_definition_api_v2_connectors_destinations_definitions_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDestinationDefinition'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/destinations/definitions/{destination_definition_id}':
    get:
      tags:
        - platform-connector
      summary: Get Destination Definition
      description: Returns destination defintion for a given destination
      operationId: get_destination_definition_api_v2_connectors_destinations_definitions__destination_definition_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: destination_definition_id
          in: path
          required: true
          schema:
            type: string
            title: Destination Definition Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Destination Definition
      description: Delete the given destination definition
      operationId: delete_destination_definition_api_v2_connectors_destinations_definitions__destination_definition_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: destination_definition_id
          in: path
          required: true
          schema:
            type: string
            title: Destination Definition Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - platform-connector
      summary: Update Destination Definition
      description: Update the given destination definition
      operationId: update_destination_definition_api_v2_connectors_destinations_definitions__destination_definition_id__patch
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: destination_definition_id
          in: path
          required: true
          schema:
            type: string
            title: Destination Definition Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDestinationDefinition'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/destinations:
    get:
      tags:
        - platform-connector
      summary: List Destinations
      description: Lists all the created destinations
      operationId: list_destinations_api_v2_connectors_destinations_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: is_internal
          in: query
          required: false
          schema:
            type: boolean
            title: Is Internal
            default: false
        - name: test_connection_status
          in: query
          required: false
          schema:
            type: string
            title: Test Connection Status
        - name: search
          in: query
          required: false
          schema:
            type: string
            title: Search
        - name: sort_field
          in: query
          required: false
          schema:
            type: string
            title: Sort Field
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            title: Sort Order
        - name: page_limit
          in: query
          required: false
          schema:
            type: integer
            title: Page Limit
        - name: page_offset
          in: query
          required: false
          schema:
            type: integer
            title: Page Offset
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDestinationsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Destination
      description: Get given destination_id
      operationId: create_destination_api_v2_connectors_destinations_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDestination'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/destinations/{destination_id}':
    get:
      tags:
        - platform-connector
      summary: Get Destination
      description: Get given destination_id
      operationId: get_destination_api_v2_connectors_destinations__destination_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: destination_id
          in: path
          required: true
          schema:
            type: string
            title: Destination Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Destination
      description: Delete the given destination
      operationId: delete_destination_api_v2_connectors_destinations__destination_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: destination_id
          in: path
          required: true
          schema:
            type: string
            title: Destination Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - platform-connector
      summary: Update Destination
      description: Update the given destination
      operationId: update_destination_api_v2_connectors_destinations__destination_id__patch
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: destination_id
          in: path
          required: true
          schema:
            type: string
            title: Destination Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDestination'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/destinations/{destination_id}/test-connection':
    post:
      tags:
        - platform-connector
      summary: Test Destination Connection
      description: Tests connection foe the given destination_id
      operationId: test_destination_connection_api_v2_connectors_destinations__destination_id__test_connection_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: destination_id
          in: path
          required: true
          schema:
            type: string
            title: Destination Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/datasets/data/register/:
    post:
      tags:
        - platform-connector
      summary: Data Register
      operationId: data_register_api_v2_connectors_datasets_data_register__post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTable'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/feeds:
    get:
      tags:
        - platform-connector
      summary: List Feeds
      description: List feeds
      operationId: list_feeds_api_v2_connectors_feeds_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: query
          required: false
          schema:
            type: string
            title: Dataset Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/feeds/{feed_id}':
    get:
      tags:
        - platform-connector
      summary: Get Feed
      description: Get feed
      operationId: get_feed_api_v2_connectors_feeds__feed_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: feed_id
          in: path
          required: true
          schema:
            type: string
            title: Feed Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/workspaces:
    get:
      tags:
        - platform-connector
      summary: List Workspaces
      description: List workspaces
      operationId: list_workspaces_api_v2_connectors_workspaces_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Workspace
      description: Create workspace
      operationId: create_workspace_api_v2_connectors_workspaces_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/workspaces/{workspace_id}':
    get:
      tags:
        - platform-connector
      summary: Get Workspace By Id
      description: Get workspace by id
      operationId: get_workspace_by_id_api_v2_connectors_workspaces__workspace_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workspace_id
          in: path
          required: true
          schema:
            type: string
            title: Workspace Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Workspace
      description: Delete workspace by id
      operationId: delete_workspace_api_v2_connectors_workspaces__workspace_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workspace_id
          in: path
          required: true
          schema:
            type: string
            title: Workspace Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/workspaces/name/{workspace_name}':
    get:
      tags:
        - platform-connector
      summary: Get Workspace By Name
      description: Get workspace by name
      operationId: get_workspace_by_name_api_v2_connectors_workspaces_name__workspace_name__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workspace_name
          in: path
          required: true
          schema:
            type: string
            title: Workspace Name
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/workspaces/{workspace_id}/preset-connectors':
    get:
      tags:
        - platform-connector
      summary: Get Preset Connnectors
      description: Returns preset connectors created on the given workspace creation
      operationId: get_preset_connnectors_api_v2_connectors_workspaces__workspace_id__preset_connectors_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: workspace_id
          in: path
          required: true
          schema:
            type: string
            title: Workspace Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/ingress:
    get:
      tags:
        - platform-connector
      summary: List Ingresses
      description: List all ingresses
      operationId: list_ingresses_api_v2_connectors_ingress_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIngressResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Ingress
      description: Create a new ingress
      operationId: create_ingress_api_v2_connectors_ingress_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateIngress'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateIngressResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/ingress/{ingress_id}':
    get:
      tags:
        - platform-connector
      summary: Get Ingress
      description: Get a specific ingress
      operationId: get_ingress_api_v2_connectors_ingress__ingress_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: ingress_id
          in: path
          required: true
          schema:
            type: string
            title: Ingress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingress'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Ingress
      description: Delete an existing ingress
      operationId: delete_ingress_api_v2_connectors_ingress__ingress_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: ingress_id
          in: path
          required: true
          schema:
            type: string
            title: Ingress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/ingress/{ingress_id}/run':
    post:
      tags:
        - platform-connector
      summary: Run Ingress
      description: Run an existing ingress
      operationId: run_ingress_api_v2_connectors_ingress__ingress_id__run_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: ingress_id
          in: path
          required: true
          schema:
            type: string
            title: Ingress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunIngressResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/ingress/{ingress_id}/run/{run_id}/status':
    get:
      tags:
        - platform-connector
      summary: Get Ingress Run Status
      description: Get the status of a running ingress
      operationId: get_ingress_run_status_api_v2_connectors_ingress__ingress_id__run__run_id__status_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: ingress_id
          in: path
          required: true
          schema:
            type: string
            title: Ingress Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIngressRunStatusResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/ingress/{ingress_id}/runs':
    get:
      tags:
        - platform-connector
      summary: List Ingress Runs
      description: List all runs of an ingress
      operationId: list_ingress_runs_api_v2_connectors_ingress__ingress_id__runs_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: ingress_id
          in: path
          required: true
          schema:
            type: string
            title: Ingress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListIngressRunResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/ingress/{ingress_id}/runs/{run_id}':
    get:
      tags:
        - platform-connector
      summary: Get Ingress Run
      description: Get a specific run of an ingress
      operationId: get_ingress_run_api_v2_connectors_ingress__ingress_id__runs__run_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: ingress_id
          in: path
          required: true
          schema:
            type: string
            title: Ingress Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngressRun'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/egress:
    get:
      tags:
        - platform-connector
      summary: List Eggresses
      description: List all egresses
      operationId: list_eggresses_api_v2_connectors_egress_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEgressResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-connector
      summary: Create Egress
      description: Create a egress
      operationId: create_egress_api_v2_connectors_egress_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEgress'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEgressResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/egress/{egress_id}':
    get:
      tags:
        - platform-connector
      summary: Get Egress
      description: Get a egress by id
      operationId: get_egress_api_v2_connectors_egress__egress_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: egress_id
          in: path
          required: true
          schema:
            type: string
            title: Egress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Egress'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-connector
      summary: Delete Egress
      operationId: delete_egress_api_v2_connectors_egress__egress_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: egress_id
          in: path
          required: true
          schema:
            type: string
            title: Egress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/egress/{egress_id}/run':
    post:
      tags:
        - platform-connector
      summary: Run Egress
      description: Run a egress
      operationId: run_egress_api_v2_connectors_egress__egress_id__run_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: egress_id
          in: path
          required: true
          schema:
            type: string
            title: Egress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunEgressResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/egress/{egress_id}/run/{run_id}/status':
    get:
      tags:
        - platform-connector
      summary: Get Egress Run Status
      description: Get a egress run status
      operationId: get_egress_run_status_api_v2_connectors_egress__egress_id__run__run_id__status_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: egress_id
          in: path
          required: true
          schema:
            type: string
            title: Egress Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEgressRunStatusResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/egress/{egress_id}/runs':
    get:
      tags:
        - platform-connector
      summary: List Egress Runs
      description: List all egress runs
      operationId: list_egress_runs_api_v2_connectors_egress__egress_id__runs_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: egress_id
          in: path
          required: true
          schema:
            type: string
            title: Egress Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEgressRunsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/connectors/egress/{egress_id}/runs/{run_id}':
    get:
      tags:
        - platform-connector
      summary: Get Egress Run
      description: Get a egress run by id
      operationId: get_egress_run_api_v2_connectors_egress__egress_id__runs__run_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-workspace-id
          in: header
          required: false
          schema:
            type: string
            title: X-Workspace-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: egress_id
          in: path
          required: true
          schema:
            type: string
            title: Egress Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EgressRun'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/connectors/health:
    get:
      tags:
        - platform-connector
      summary: Startup Check
      description: |-
        This is a startup check endpoint. It can be used to check if the application is up and running.

        Returns:
        - StartupSuccessResponse: If the application is up and running
        - StartupErrorResponse: If the application is not ready to serve requests
      operationId: startup_check_api_v2_connectors_health_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  '/api/v2/datasets/{dataset_id}/upsert':
    post:
      tags:
        - platform-data
      summary: Upsert Record
      description: Create data for a dataset based on the dataset_id.
      operationId: upsert_record_api_v2_datasets__dataset_id__upsert_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          required: true
          schema:
            type: string
            title: Dataset Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpsertPayload'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/datasets/{dataset_id}/query':
    post:
      tags:
        - platform-data
      summary: Query Records
      description: Get the data of a dataset based on the dataset_id.
      operationId: query_records_api_v2_datasets__dataset_id__query_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          required: true
          schema:
            type: string
            title: Dataset Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryDatasetPayload'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v2/datasets/{dataset_id}/data/{data_id}':
    delete:
      tags:
        - platform-data
      summary: Delete Record
      description: Delete data for a dataset based on the dataset_id and data_id.
      operationId: delete_record_api_v2_datasets__dataset_id__data__data_id__delete
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          required: true
          schema:
            type: string
            title: Dataset Id
        - name: data_id
          in: path
          required: true
          schema:
            type: string
            title: Data Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v2/datasets/health:
    get:
      tags:
        - platform-data
      summary: Startup Check
      description: |-
        This is a startup check endpoint. It can be used to check if the application is up and running.

        Returns:
        - StartupSuccessResponse: If the application is up and running
        - StartupErrorResponse: If the application is not ready to serve requests
      operationId: startup_check_api_v2_datasets_health_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/datasets/health:
    get:
      tags:
        - platform-datasets
      summary: Startup Check
      description: |-
        This is a startup check endpoint. It can be used to check if the application is up and running.

        Returns:
        - StartupSuccessResponse: If the application is up and running
        - StartupErrorResponse: If the application is not ready to serve requests
      operationId: startup_check_api_v1_datasets_health_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/datasets/:
    get:
      tags:
        - platform-datasets
      summary: List Datasets
      description: |-
        This API lists the total number of datasets that have been registered in the dataset registry, with its corresponding name and identifiers.
        The goal of this API is to provide the registered datasets in a convenient format that allows the user to browse and discover all entries in the registry.

        There is no input required to invoke this API.
        The output of this API is a count of the total number of datasets registered and a list of all these datasets in the form of a dictionary - the key of the dictionary being the dataset identifier and the value being the name of the dataset.
      operationId: list_datasets_api_v1_datasets__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: internal
          in: query
          description: 'This query parameter describes whether we need to list either internal datasets, external datasets or all datasets.'
          required: false
          schema:
            type: boolean
            title: Internal
            description: 'This query parameter describes whether we need to list either internal datasets, external datasets or all datasets.'
        - name: preset
          in: query
          description: 'This query parameter describes whether we need to list either preset datasets, custom datasets or all datasets.'
          required: false
          schema:
            type: boolean
            title: Preset
            description: 'This query parameter describes whether we need to list either preset datasets, custom datasets or all datasets.'
        - name: tags
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on tags.
          required: false
          schema:
            type: string
            title: Tags
            description: This query parameter enables the user to search for datasets in the dataset registry based on tags.
        - name: dataset_name
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on the dataset name.
          required: false
          schema:
            type: string
            title: Dataset Name
            description: This query parameter enables the user to search for datasets in the dataset registry based on the dataset name.
        - name: dataset_group
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on the dataset group.
          required: false
          schema:
            type: string
            title: Dataset Group
            description: This query parameter enables the user to search for datasets in the dataset registry based on the dataset group.
        - name: virtual
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on the property of it being virtual or not.
          required: false
          schema:
            type: string
            title: Virtual
            description: This query parameter enables the user to search for datasets in the dataset registry based on the property of it being virtual or not.
        - name: profiling_status
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
          required: false
          schema:
            type: string
            title: Profiling Status
            description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
        - name: sampling_status
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
          required: false
          schema:
            type: string
            title: Sampling Status
            description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
        - name: sync_status
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on sync status.
          required: false
          schema:
            type: string
            title: Sync Status
            description: This query parameter enables the user to search for datasets in the dataset registry based on sync status.
        - name: list_of_access_modes
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on access modes.
          required: false
          schema:
            type: array
            title: List Of Access Modes
            description: This query parameter enables the user to search for datasets in the dataset registry based on access modes.
            items:
              type: string
        - name: created_by
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
          required: false
          schema:
            type: string
            title: Created By
            description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
        - name: updated_by
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
          required: false
          schema:
            type: string
            title: Updated By
            description: This query parameter enables the user to search for datasets in the dataset registry based on profile status.
        - name: search
          in: query
          description: This query parameter enables the user to search for datasets in the dataset registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for datasets in the dataset registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: fields
          in: query
          description: This query parameter allows you to define the fields that must be returned from the listing query.
          required: false
          schema:
            type: array
            description: This query parameter allows you to define the fields that must be returned from the listing query.
            items:
              $ref: '#/components/schemas/app__schemas__datasets__ListingFields'
        - name: dataset_ids
          in: query
          description: This query parameter allows you to define the dataset_ids that must be returned from the listing query.
          required: false
          schema:
            type: string
            title: Dataset Ids
            description: This query parameter allows you to define the dataset_ids that must be returned from the listing query.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-datasets
      summary: Create Dataset
      description: |-
        This API is used to register metadata configurations pertaining to data in the dataset registry.

        Datasets can support polyglot persistence, i.e. the same data can reside in multiple storage formats. The access pattern of the dataset is dependent on the storage and nature of how we are consuming or querying the data.
        This means that different data storage and access patterns can be correspondingly defined, and that is also part of the metadata of a dataset.

        If the raw data needs to reside in our offered cloud storage, the API also creates the corresponding resources required.
        The API also offers virtualization of datasets. Instead of storing the data in our offered cloud storage, the dataset can also be defined to point to a configuration using which we can establish connection and access the data.

        The dataset registry also helps in isolating and composing datasets as entities that can be used to build and orchestrate workflows.

        The input to this API is a payload containing all the metadata about the dataset.
        The output is a dataset identifier which is a unique reference to this dataset in the dataset registry, and a config which is the same as the input along with the generated identifier.
      operationId: create_dataset_api_v1_datasets__post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: x-user-id
          in: header
          required: false
          schema:
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataset'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetCreateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}':
    get:
      tags:
        - platform-datasets
      summary: Get Dataset
      description: |-
        This API allows the user to read metadata configuration pertaining to a dataset identifier.
        By default, the API provides the latest metadata configuration which is present in the dataset registry.
        The API also helps capture the end-to-end journey of this metadata by providing versioning, and hence captures data lineage in the metadata layer.
        Using the version parameter (which by default points to the latest version of the dataset), we can obtain different versions of this metadata configuration.

        The input to this API is a dataset identifier, which is mandatory. We can pass an optional version parameter as well - if not passed, it will point to the latest version of the data.
        The output of this API is all the metadata pertaining to the corresponding dataset identifier.
      operationId: get_dataset_api_v1_datasets__dataset_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the dataset that will be parsed from the dataset metadata lineage.
            default: 0
        - name: fields
          in: query
          description: This field describes the fields of the dataset that will be returned from the dataset metadata.
          required: false
          schema:
            type: string
            title: Fields
            description: This field describes the fields of the dataset that will be returned from the dataset metadata.
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-datasets
      summary: Delete Dataset
      description: |-
        This API allows metadata deletion for any specified dataset identifier.
        For datasets that are stored in our offered cloud storage, the resources will also be deleted.
        Once invoked, this API removes this dataset entry from both the listing configuration and also deletes the corresponding metadata stored for this in the dataset registry.
        If delete API is invoked, all versions of the metadata is deleted.

        The input to this API is a dataset identifier which refers to the dataset that has to be deleted.
      operationId: delete_dataset_api_v1_datasets__dataset_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: hard_delete
          in: query
          description: This fiield is used to decide whether the delete should be a hard(deleting metadata) or a soft delete(deleting only registry config)
          required: false
          schema:
            type: boolean
            title: Hard Delete
            description: This fiield is used to decide whether the delete should be a hard(deleting metadata) or a soft delete(deleting only registry config)
            default: false
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - platform-datasets
      summary: Partial Update Dataset
      description: |-
        This API allows metadata configuration updation for any specified dataset and updates the metadata in the dataset registry.
        Since journalling is captured in the metadata layer, this API allows the functionality to store any updated version of the metadata as the latest version.
        It does not overwrite the existing configuration, but instead captures that as an older version, thus maintaining the end-to-end journey of the dataset metadata.

        For the data that resides in our offered cloud storage, the API will also trigger the resource creation or deletion operations for any new access modes being added or deleted respectively.
        For virtual datasets, the API allows updating configurations to connect and query the raw data residing elsewhere.

        This API does not allow schema mutation for a dataset. Hence, the dataset schema is not accepted here.

        The input to this API is a dataset identifier for which the update has to be done, and a corresponding metadata configuration that should be used as the latest metadata.
      operationId: partial_update_dataset_api_v1_datasets__dataset_id__patch
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: x-user-id
          in: header
          required: false
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUpdateDataset'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/profile':
    post:
      tags:
        - platform-datasets
      summary: Profile Dataset
      description: |-
        This API allows the user to profile a dataset to obtain and aggregated summary & univariate analysis of the raw data.
        The dataset's profile is updated in the dataset metadata.
        This API is asynchronous, and profiling status is also captured. On successful invocation, the status
        The worker that does the profiling will update the profile of the raw dataset as well as the status and last profiled timestamp.

        The input to this API is a dataset identifier which refers to the dataset that has to be profiled.
      operationId: profile_dataset_api_v1_datasets__dataset_id__profile_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: x-user-id
          in: header
          required: false
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/profile/status':
    get:
      tags:
        - platform-datasets
      summary: Get Dataset Profile Status
      description: |-
        This API allows the user to get the status of the profiling of a dataset.

        The input to this API is a dataset identifier which refers to the dataset that has to be profiled.
      operationId: get_dataset_profile_status_api_v1_datasets__dataset_id__profile_status_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/sample':
    post:
      tags:
        - platform-datasets
      summary: Sample Dataset
      description: This API allows the user to sample a dataset
      operationId: sample_dataset_api_v1_datasets__dataset_id__sample_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: x-user-id
          in: header
          required: false
          schema:
            type: string
            title: X-User-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SamplingInfo'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/sample/status':
    get:
      tags:
        - platform-datasets
      summary: Get Sampling Status
      description: |-
        This API allows the user to get the status of the sampling of a dataset.

        The input to this API is a dataset identifier which refers to the dataset that has to be profiled.
      operationId: get_sampling_status_api_v1_datasets__dataset_id__sample_status_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/export':
    get:
      tags:
        - platform-datasets
      summary: Download Dataset
      description: |-
        This API allows the user to get the csv download link pertaining to a dataset identifier.
        The input to this API is a dataset identifier, which is mandatory.
        The output of this API is the download link for the dataset.
      operationId: download_dataset_api_v1_datasets__dataset_id__export_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/sync':
    post:
      tags:
        - platform-datasets
      summary: Synchronize Dataset
      description: API allows the user to manually sync the dataset with the data source. only polyglot datasets can be manually synced
      operationId: synchronize_dataset_api_v1_datasets__dataset_id__sync_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/sync/latest-status':
    get:
      tags:
        - platform-datasets
      summary: Get Latest Synchronization Status
      description: API returns the latest sync status
      operationId: get_latest_synchronization_status_api_v1_datasets__dataset_id__sync_latest_status_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/datasets/{dataset_id}/sync-runs':
    get:
      tags:
        - platform-datasets
      summary: List Dataset Synchronization Runs
      operationId: list_dataset_synchronization_runs_api_v1_datasets__dataset_id__sync_runs_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: dataset_id
          in: path
          description: This field describes the ID of the dataset used to query the dataset registry.
          required: true
          schema:
            type: string
            title: Dataset Id
            description: This field describes the ID of the dataset used to query the dataset registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/datasets/create_account_datasets:
    post:
      tags:
        - platform-datasets
      summary: Create Account Datasets
      description: This API is triggered for creating Account Level Datasets for a client/account upon creation.
      operationId: create_account_datasets_api_v1_datasets_create_account_datasets_post
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /api/v1/dataset_groups/:
    get:
      tags:
        - platform-datasets
      summary: List Dataset Groups
      operationId: list_dataset_groups_api_v1_dataset_groups__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: internal
          in: query
          description: 'This query parameter describes whether we need to list either internal dataset groups, external dataset groups or all dataset groups.'
          required: false
          schema:
            type: boolean
            title: Internal
            description: 'This query parameter describes whether we need to list either internal dataset groups, external dataset groups or all dataset groups.'
        - name: preset
          in: query
          description: 'This query parameter describes whether we need to list either preset dataset groups, custom dataset groups or all dataset groups.'
          required: false
          schema:
            type: boolean
            title: Preset
            description: 'This query parameter describes whether we need to list either preset dataset groups, custom dataset groups or all dataset groups.'
        - name: summarization_status
          in: query
          description: This query parameter enables the user to search for summarization_status in the dataset_group registry.
          required: false
          schema:
            type: string
            title: Summarization Status
            description: This query parameter enables the user to search for summarization_status in the dataset_group registry.
        - name: tags
          in: query
          description: This query parameter enables the user to search for dataset groups in the dataset group registry based on tags.
          required: false
          schema:
            type: string
            title: Tags
            description: This query parameter enables the user to search for dataset groups in the dataset group registry based on tags.
        - name: search
          in: query
          description: This query parameter enables the user to search for dataset groups in the dataset group registry.
          required: false
          schema:
            type: string
            title: Search
            description: This query parameter enables the user to search for dataset groups in the dataset group registry.
        - name: sort_field
          in: query
          description: This query parameter allows you to sort the listing query based on a particular field.
          required: false
          schema:
            type: string
            title: Sort Field
            description: This query parameter allows you to sort the listing query based on a particular field.
        - name: sort_order
          in: query
          description: This query parameter allows you to sort the listing query based on ascending or descending order.
          required: false
          schema:
            type: string
            title: Sort Order
            description: This query parameter allows you to sort the listing query based on ascending or descending order.
        - name: dataset_group_name
          in: query
          description: This query parameter enables the user to search for dataset_group_name in the dataset_group registry.
          required: false
          schema:
            type: string
            title: Dataset Group Name
            description: This query parameter enables the user to search for dataset_group_name in the dataset_group registry.
        - name: page_offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Page Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
        - name: page_limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Page Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
        - name: fields
          in: query
          description: This query parameter allows you to define the fields that must be returned from the listing query.
          required: false
          schema:
            type: array
            description: This query parameter allows you to define the fields that must be returned from the listing query.
            items:
              $ref: '#/components/schemas/app__schemas__dataset_groups__ListingFields'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupListingResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - platform-datasets
      summary: Create Dataset Group
      operationId: create_dataset_group_api_v1_dataset_groups__post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetGroup'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupCreateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/dataset_groups/{dataset_group_id}':
    get:
      tags:
        - platform-datasets
      summary: Get Dataset Group
      operationId: get_dataset_group_api_v1_dataset_groups__dataset_group_id__get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: version
          in: query
          description: This field describes the version of the dataset group that will be parsed from the dataset metadata lineage.
          required: false
          schema:
            type: integer
            title: Version
            description: This field describes the version of the dataset group that will be parsed from the dataset metadata lineage.
            default: 0
        - name: fields
          in: query
          description: This field describes the fields of the dataset that will be returned from the dataset metadata
          required: false
          schema:
            type: string
            title: Fields
            description: This field describes the fields of the dataset that will be returned from the dataset metadata
        - name: dataset_group_id
          in: path
          description: This field describes the ID of the dataset group used to query the dataset group registry.
          required: true
          schema:
            type: string
            title: Dataset Group Id
            description: This field describes the ID of the dataset group used to query the dataset group registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupReadResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - platform-datasets
      summary: Update Dataset Group
      operationId: update_dataset_group_api_v1_dataset_groups__dataset_group_id__put
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_group_id
          in: path
          description: This field describes the ID of the dataset group used to query the dataset group registry.
          required: true
          schema:
            type: string
            title: Dataset Group Id
            description: This field describes the ID of the dataset group used to query the dataset group registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatasetGroup'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - platform-datasets
      summary: Delete Dataset Group
      operationId: delete_dataset_group_api_v1_dataset_groups__dataset_group_id__delete
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_group_id
          in: path
          description: This field describes the ID of the dataset group used to query the dataset group registry.
          required: true
          schema:
            type: string
            title: Dataset Group Id
            description: This field describes the ID of the dataset group used to query the dataset group registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupDeleteResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - platform-datasets
      summary: Partial Update Dataset Group
      operationId: partial_update_dataset_group_api_v1_dataset_groups__dataset_group_id__patch
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_group_id
          in: path
          description: This field describes the ID of the dataset group used to query the dataset group registry.
          required: true
          schema:
            type: string
            title: Dataset Group Id
            description: This field describes the ID of the dataset group used to query the dataset group registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialUpdateDatasetGroup'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupUpdateResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/dataset_groups/{dataset_group_id}/summarize':
    post:
      tags:
        - platform-datasets
      summary: Summarize Dataset Group
      operationId: summarize_dataset_group_api_v1_dataset_groups__dataset_group_id__summarize_post
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_group_id
          in: path
          description: This field describes the ID of the dataset group used to query the dataset group registry.
          required: true
          schema:
            type: string
            title: Dataset Group Id
            description: This field describes the ID of the dataset group used to query the dataset group registry.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatasetGroupSummarization'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupSummarizationResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  '/api/v1/dataset_groups/{dataset_group_id}/summarize/status':
    get:
      tags:
        - platform-datasets
      summary: Get Dataset Group Summary Status
      operationId: get_dataset_group_summary_status_api_v1_dataset_groups__dataset_group_id__summarize_status_get
      parameters:
        - name: x-client-id
          in: header
          required: false
          schema:
            type: string
            title: X-Client-Id
        - name: x-request-id
          in: header
          required: false
          schema:
            type: string
            title: X-Request-Id
        - name: x-correlation-id
          in: header
          required: false
          schema:
            type: string
            title: X-Correlation-Id
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: dataset_group_id
          in: path
          description: This field describes the ID of the dataset group used to query the dataset group registry.
          required: true
          schema:
            type: string
            title: Dataset Group Id
            description: This field describes the ID of the dataset group used to query the dataset group registry.
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetGroupSummarizationStatusResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/notification/publish:
    post:
      tags:
        - platform-notification
      summary: Publish
      description: Publish a message to a subscriber
      operationId: publish_api_v1_notification_publish_post
      parameters:
        - name: x-client-id
          in: header
          description: Client ID
          required: true
          schema:
            type: string
            title: X-Client-Id
            description: Client ID
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/notifications:
    get:
      tags:
        - platform-notification
      summary: Get Notifications
      description: Function to get notifications
      operationId: get_notifications_api_v1_notifications_get
      parameters:
        - name: x-client-id
          in: header
          description: Client ID
          required: true
          schema:
            type: string
            title: X-Client-Id
            description: Client ID
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: topic
          in: query
          description: The topic the subscriber is subscribed to
          required: true
          schema:
            type: string
            title: Topic
            description: The topic the subscriber is subscribed to
        - name: status
          in: query
          description: The status of the notification
          required: false
          schema:
            type: string
            title: Status
            description: The status of the notification
        - name: offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
            default: 0
        - name: limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
            default: 5
        - name: sort_by
          in: query
          description: This query parameter allows you to sort the records returned from the listing query.
          required: false
          schema:
            type: string
            title: Sort By
            description: This query parameter allows you to sort the records returned from the listing query.
            default: desc
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotficationsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/notifications/acknowledge:
    post:
      tags:
        - platform-notification
      summary: Acknowledge Notification
      description: Function to acknowledge a notification
      operationId: acknowledge_notification_api_v1_notifications_acknowledge_post
      parameters:
        - name: x-client-id
          in: header
          description: Client ID
          required: true
          schema:
            type: string
            title: X-Client-Id
            description: Client ID
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: topic
          in: query
          description: The topic the subscriber is subscribed to
          required: true
          schema:
            type: string
            title: Topic
            description: The topic the subscriber is subscribed to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AcknowledgeNotification'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/subscribe:
    post:
      tags:
        - platform-notification
      summary: Subscribe
      description: Function to subscribe to a topic
      operationId: subscribe_api_v1_subscribe_post
      parameters:
        - name: x-client-id
          in: header
          description: Client ID
          required: true
          schema:
            type: string
            title: X-Client-Id
            description: Client ID
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscribe'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/subscriptions:
    get:
      tags:
        - platform-notification
      summary: List Subscriptions
      description: Function to list all subscriptions
      operationId: list_subscriptions_api_v1_subscriptions_get
      parameters:
        - name: x-client-id
          in: header
          description: Client ID
          required: true
          schema:
            type: string
            title: X-Client-Id
            description: Client ID
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
        - name: topic
          in: query
          description: The topic the subscriber is subscribed to
          required: false
          schema:
            type: string
            title: Topic
            description: The topic the subscriber is subscribed to
        - name: offset
          in: query
          description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
          required: false
          schema:
            type: integer
            title: Offset
            description: This query parameter allows you to define the number of records that must be skipped before selection for the listing query.
            default: 0
        - name: limit
          in: query
          description: This query parameter allows you to limit the number of records returned from the listing query.
          required: false
          schema:
            type: integer
            title: Limit
            description: This query parameter allows you to limit the number of records returned from the listing query.
            default: 5
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSubscriptionsResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/unsubscribe:
    post:
      tags:
        - platform-notification
      summary: Unsubscribe
      description: Function to unsubscribe from a topic
      operationId: unsubscribe_api_v1_unsubscribe_post
      parameters:
        - name: x-client-id
          in: header
          description: Client ID
          required: true
          schema:
            type: string
            title: X-Client-Id
            description: Client ID
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnSubscribe'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnSubscribeResponse'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /api/v1/notification/health:
    get:
      tags:
        - platform-notification
      summary: Startup Check
      description: |-
        This is a startup check endpoint. It can be used to check if the application is up and running.

        Returns:
        - StartupSuccessResponse: If the application is up and running
        - StartupErrorResponse: If the application is not ready to serve requests
      operationId: startup_check_api_v1_notification_health_get
      parameters:
        - name: access-token
          in: header
          required: false
          schema:
            type: string
            title: Access-Token
        - name: x-api-key
          in: header
          required: false
          schema:
            type: string
            title: X-Api-Key
        - name: account-id
          in: header
          required: false
          schema:
            type: string
            title: Account-Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
components:
  securitySchemes:
    HTTPBasic:
      type: http
      scheme: basic
  schemas:
    HTTPValidationError:
      type: object
      title: HTTPValidationError
      properties:
        detail:
          type: array
          title: Detail
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      title: ValidationError
      properties:
        loc:
          type: array
          title: Location
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      required:
        - loc
        - msg
        - type
    ErrorResponse:
      type: object
      title: ErrorResponse
      description: Error response model.
      properties:
        detail:
          $ref: '#/components/schemas/ErrorDetail'
      required:
        - detail
    ErrorDetail:
      type: string
      enum:
        - Bad request
        - Invalid API key/token
        - Resource not found
        - Method not allowed
        - Internal server error
        - Invalid Namespace
        - Unprocessable Entity
      title: ErrorDetail
      description: An enumeration.
    AccountCreate:
      type: object
      title: AccountCreate
      description: Account create model
      properties:
        name:
          type: string
          title: Name
        email:
          type: string
          title: Email
        id:
          type: string
          title: Id
          format: uuid
      required:
        - name
        - email
    AccountUpdate:
      type: object
      title: AccountUpdate
      description: Account update model.
      properties:
        name:
          type: string
          title: Name
        license:
          type: string
          title: License
        active:
          type: boolean
          title: Active
        add_users:
          type: array
          title: Add Users
          items:
            type: string
        remove_users:
          type: array
          title: Remove Users
          items:
            type: string
    UserCreate:
      type: object
      title: UserCreate
      description: User create model
      properties:
        name:
          type: string
          title: Name
        email:
          type: string
          title: Email
        password:
          type: string
          title: Password
          default: Default
        roles:
          type: array
          title: Roles
          items:
            type: string
            format: uuid
        permissions:
          type: array
          title: Permissions
          items:
            type: string
            format: uuid
        user_groups:
          type: array
          title: User Groups
          items:
            type: string
            format: uuid
      required:
        - name
        - email
    UserUpdate:
      type: object
      title: UserUpdate
      description: User Update Model
      properties:
        name:
          type: string
          title: Name
        email:
          type: string
          title: Email
        active:
          type: boolean
          title: Active
        password:
          type: string
          title: Password
        code:
          type: string
          title: Code
        add_roles:
          type: array
          title: Add Roles
          items:
            type: string
            format: uuid
        remove_roles:
          type: array
          title: Remove Roles
          items:
            type: string
            format: uuid
        add_permissions:
          type: array
          title: Add Permissions
          items:
            type: string
            format: uuid
        remove_permissions:
          type: array
          title: Remove Permissions
          items:
            type: string
            format: uuid
    ListApiKeyResponse:
      type: object
      title: ListApiKeyResponse
      description: List of ApiKey's Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          type: array
          title: Data
          default: []
          items:
            $ref: '#/components/schemas/ApiKey'
      required:
        - request_id
        - message
    RequestStatus:
      type: string
      enum:
        - SUCCESS
        - FAILURE
        - ACCEPTED
        - ERROR
      title: RequestStatus
      description: Enumeration of request statuses.
    ApiKey:
      type: object
      title: ApiKey
      description: ApiKey Model
      properties:
        name:
          type: string
          title: Name
        id:
          type: string
          title: Id
          format: uuid
        user_id:
          type: string
          title: User Id
          format: uuid
        account_id:
          type: string
          title: Account Id
          format: uuid
        active:
          type: boolean
          title: Active
        roles:
          title: Roles
          anyOf:
            - type: array
              items:
                $ref: '#/components/schemas/ApiKeyRole'
            - type: array
              items:
                type: array
                minItems: 2
                maxItems: 2
                items: {}
        permissions:
          title: Permissions
          anyOf:
            - type: array
              items:
                $ref: '#/components/schemas/ApiKeyPermission'
            - type: array
              items:
                type: array
                minItems: 2
                maxItems: 2
                items: {}
        created_ts:
          type: string
          title: Created Ts
          description: Creation timestamp
          format: date-time
        updated_ts:
          type: string
          title: Updated Ts
          description: Last update timestamp
          format: date-time
      required:
        - id
        - user_id
        - active
        - created_ts
    ApiKeyRole:
      type: object
      title: ApiKeyRole
      description: ApiKey Role Model
      properties:
        role:
          type: string
          title: Role
        name:
          type: string
          title: Name
        role_id:
          type: string
          title: Role Id
          format: uuid
        account_id:
          type: string
          title: Account Id
          format: uuid
        permissions:
          type: array
          title: Permissions
          items:
            $ref: '#/components/schemas/ApiKeyPermission'
    ApiKeyPermission:
      type: object
      title: ApiKeyPermission
      description: ApiKey Permission Model
      properties:
        permission_id:
          type: string
          title: Permission Id
          format: uuid
        group:
          type: string
          title: Group
        methods:
          type: string
          title: Methods
        account_id:
          type: string
          title: Account Id
          format: uuid
        name:
          type: string
          title: Name
        permission_name:
          type: string
          title: Permission Name
        entity:
          type: string
          title: Entity
        route:
          type: string
          title: Route
    ApiKeyCreate:
      type: object
      title: ApiKeyCreate
      description: ApiKey create model
      properties:
        name:
          type: string
          title: Name
        roles:
          type: array
          title: Roles
          items:
            type: string
            format: uuid
        permissions:
          type: array
          title: Permissions
          items:
            type: string
            format: uuid
      required:
        - name
    CreateApiKeyResponse:
      type: object
      title: CreateApiKeyResponse
      description: Create ApiKey Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          $ref: '#/components/schemas/ResponseWithApiKey'
      required:
        - request_id
        - message
        - data
    ResponseWithApiKey:
      type: object
      title: ResponseWithApiKey
      description: ApiKey Model
      properties:
        name:
          type: string
          title: Name
        id:
          type: string
          title: Id
          format: uuid
        user_id:
          type: string
          title: User Id
          format: uuid
        account_id:
          type: string
          title: Account Id
          format: uuid
        active:
          type: boolean
          title: Active
        roles:
          title: Roles
          anyOf:
            - type: array
              items:
                $ref: '#/components/schemas/ApiKeyRole'
            - type: array
              items:
                type: array
                minItems: 2
                maxItems: 2
                items: {}
        permissions:
          title: Permissions
          anyOf:
            - type: array
              items:
                $ref: '#/components/schemas/ApiKeyPermission'
            - type: array
              items:
                type: array
                minItems: 2
                maxItems: 2
                items: {}
        created_ts:
          type: string
          title: Created Ts
          description: Creation timestamp
          format: date-time
        updated_ts:
          type: string
          title: Updated Ts
          description: Last update timestamp
          format: date-time
        api_key:
          type: string
          title: Api Key
          format: uuid
      required:
        - id
        - user_id
        - active
        - created_ts
        - api_key
    GetApiKeyResponse:
      type: object
      title: GetApiKeyResponse
      description: Get a ApiKey Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          $ref: '#/components/schemas/ApiKey'
      required:
        - request_id
        - message
    DeleteApiKeyResponse:
      type: object
      title: DeleteApiKeyResponse
      description: Delete ApiKey Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          $ref: '#/components/schemas/ApiKey'
      required:
        - request_id
        - message
        - data
    ApiKeyUpdate:
      type: object
      title: ApiKeyUpdate
      description: ApiKey Update Model
      properties:
        name:
          type: string
          title: Name
        active:
          type: boolean
          title: Active
        add_roles:
          type: array
          title: Add Roles
          items:
            type: string
            format: uuid
        remove_roles:
          type: array
          title: Remove Roles
          items:
            type: string
            format: uuid
        add_permissions:
          type: array
          title: Add Permissions
          items:
            type: string
            format: uuid
        remove_permissions:
          type: array
          title: Remove Permissions
          items:
            type: string
            format: uuid
    UpdateApiKeyResponse:
      type: object
      title: UpdateApiKeyResponse
      description: Update ApiKey Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          $ref: '#/components/schemas/ApiKey'
      required:
        - request_id
        - message
        - data
    UserGroupCreate:
      type: object
      title: UserGroupCreate
      description: UserGroup create model.
      properties:
        name:
          type: string
          title: Name
        roles:
          type: array
          title: Roles
          default: []
          items:
            type: string
            format: uuid
        user_ids:
          type: array
          title: User Ids
          default: []
          items:
            type: string
            format: uuid
        permissions:
          type: array
          title: Permissions
          default: []
          items:
            type: string
            format: uuid
      required:
        - name
    UserGroupUpdate:
      type: object
      title: UserGroupUpdate
      description: UserGroup update model.
      properties:
        name:
          type: string
          title: Name
        add_roles:
          type: array
          title: Add Roles
          items:
            type: string
            format: uuid
        add_users:
          type: array
          title: Add Users
          items:
            type: string
            format: uuid
        remove_roles:
          type: array
          title: Remove Roles
          items:
            type: string
            format: uuid
        remove_users:
          type: array
          title: Remove Users
          items:
            type: string
            format: uuid
        add_permissions:
          type: array
          title: Add Permissions
          items:
            type: string
            format: uuid
        remove_permissions:
          type: array
          title: Remove Permissions
          items:
            type: string
            format: uuid
    RoleCreateModel:
      type: object
      title: RoleCreateModel
      description: Role Request Model
      properties:
        name:
          type: string
          title: Name
        add_permissions:
          type: array
          title: Add Permissions
          default: []
          items:
            type: string
            format: uuid
        permissions:
          type: array
          title: Permissions
          default: []
          items:
            $ref: '#/components/schemas/RoutePermission'
      required:
        - name
    RoutePermission:
      type: object
      title: RoutePermission
      description: Route Permission Model
      properties:
        route:
          type: string
          title: Route
        name:
          type: string
          title: Name
        methods:
          type: array
          title: Methods
          items:
            type: string
        group:
          type: string
          title: Group
        entity:
          type: string
          title: Entity
        users:
          type: array
          title: Users
          default: []
          items:
            type: string
            format: uuid
        roles:
          type: array
          title: Roles
          default: []
          items:
            type: string
            format: uuid
        user_groups:
          type: array
          title: User Groups
          default: []
          items:
            type: string
            format: uuid
      required:
        - route
        - methods
    RoleUpdateModel:
      type: object
      title: RoleUpdateModel
      description: Role update model.
      properties:
        name:
          type: string
          title: Name
        permissions:
          type: array
          title: Permissions
          items:
            $ref: '#/components/schemas/UpdateRoutePermission'
        add_permissions:
          type: array
          title: Add Permissions
          items:
            type: string
            format: uuid
        remove_permissions:
          type: array
          title: Remove Permissions
          items:
            type: string
            format: uuid
    UpdateRoutePermission:
      type: object
      title: UpdateRoutePermission
      description: Route update model when updating through role
      properties:
        permission_id:
          type: string
          title: Permission Id
          format: uuid
        route:
          type: string
          title: Route
        name:
          type: string
          title: Name
        methods:
          type: array
          title: Methods
          items:
            type: string
        group:
          type: string
          title: Group
        entity:
          type: string
          title: Entity
      required:
        - permission_id
        - route
        - methods
    PermissionCreate:
      type: object
      title: PermissionCreate
      description: Create Permission Model
      properties:
        route:
          type: string
          title: Route
        name:
          type: string
          title: Name
        methods:
          type: array
          title: Methods
          items:
            type: string
        group:
          type: string
          title: Group
        entity:
          type: string
          title: Entity
        users:
          type: array
          title: Users
          default: []
          items:
            type: string
            format: uuid
        roles:
          type: array
          title: Roles
          default: []
          items:
            type: string
            format: uuid
        user_groups:
          type: array
          title: User Groups
          default: []
          items:
            type: string
            format: uuid
      required:
        - route
        - methods
    PermissionUpdate:
      type: object
      title: PermissionUpdate
      description: Update Permission Model
      properties:
        route:
          type: string
          title: Route
        name:
          type: string
          title: Name
        methods:
          type: array
          title: Methods
          items:
            type: string
        group:
          type: string
          title: Group
        entity:
          type: string
          title: Entity
        add_users:
          type: array
          title: Add Users
          items:
            type: string
            format: uuid
        remove_users:
          type: array
          title: Remove Users
          items:
            type: string
            format: uuid
        add_user_groups:
          type: array
          title: Add User Groups
          items:
            type: string
            format: uuid
        remove_user_groups:
          type: array
          title: Remove User Groups
          items:
            type: string
            format: uuid
    ResourceAllocationCreate:
      type: object
      title: ResourceAllocationCreate
      description: Resource allocation model.
      properties:
        allocation_name:
          type: string
          title: Allocation Name
        dataset_id:
          type: string
          title: Dataset Id
        what_to_allocate:
          type: array
          title: What To Allocate
          default: []
          items:
            type: object
        users:
          type: array
          title: Users
          default: []
          items:
            type: string
            format: uuid
        user_groups:
          type: array
          title: User Groups
          default: []
          items:
            type: string
            format: uuid
        roles:
          type: array
          title: Roles
          default: []
          items:
            type: string
            format: uuid
    ResourceAllocationUpdateOverwrite:
      type: object
      title: ResourceAllocationUpdateOverwrite
      description: Resource allocation update overwrite model.
      properties:
        allocation_name:
          type: string
          title: Allocation Name
        dataset_id:
          type: string
          title: Dataset Id
        what_to_allocate:
          type: array
          title: What To Allocate
          items:
            type: object
        users:
          type: array
          title: Users
          default: []
          items:
            type: string
            format: uuid
        user_groups:
          type: array
          title: User Groups
          default: []
          items:
            type: string
            format: uuid
        roles:
          type: array
          title: Roles
          default: []
          items:
            type: string
            format: uuid
      required:
        - what_to_allocate
    ResourceAllocationUpdate:
      type: object
      title: ResourceAllocationUpdate
      description: Resource allocation update model.
      properties:
        dataset_id:
          type: string
          title: Dataset Id
        remove_dataset_id:
          type: string
          title: Remove Dataset Id
        allocation_name:
          type: string
          title: Allocation Name
        what_to_allocate:
          type: array
          title: What To Allocate
          items:
            type: object
        add_users:
          type: array
          title: Add Users
          items:
            type: string
            format: uuid
        remove_users:
          type: array
          title: Remove Users
          items:
            type: string
            format: uuid
        add_user_groups:
          type: array
          title: Add User Groups
          items:
            type: string
            format: uuid
        remove_user_groups:
          type: array
          title: Remove User Groups
          items:
            type: string
            format: uuid
        add_roles:
          type: array
          title: Add Roles
          items:
            type: string
            format: uuid
        remove_roles:
          type: array
          title: Remove Roles
          items:
            type: string
            format: uuid
    RbacStatusCreate:
      type: object
      title: RbacStatusCreate
      description: Rbac status model.
      properties:
        status:
          $ref: '#/components/schemas/RbacStatus'
      required:
        - status
    RbacStatus:
      type: string
      enum:
        - SUCCESS
        - FAILED
        - INPROGRESS
      title: RbacStatus
      description: Rbac status.
    RbacStatusUpdate:
      type: object
      title: RbacStatusUpdate
      description: Rbac status update model.
      properties:
        status:
          $ref: '#/components/schemas/RbacStatus'
      required:
        - status
    UserCreds:
      type: object
      title: UserCreds
      description: User credentials model.
      properties:
        email:
          type: string
          title: Email
        password:
          type: string
          title: Password
      required:
        - email
        - password
    LogoutCreds:
      type: object
      title: LogoutCreds
      description: Logout user session
      properties:
        flow:
          type: string
          title: Flow
        idp:
          type: string
          title: Idp
        refresh_token:
          type: string
          title: Refresh Token
      required:
        - refresh_token
    CreateIdentityProvider:
      type: object
      title: CreateIdentityProvider
      description: Create Identity Provider Model
      properties:
        organization:
          type: string
          title: Organization
        idp_name:
          type: string
          title: Idp Name
        idp_client_id:
          type: string
          title: Idp Client Id
        idp_client_secret:
          type: string
          title: Idp Client Secret
        discovery_endpoint:
          type: string
          title: Discovery Endpoint
        is_custom:
          type: boolean
          title: Is Custom
          default: false
      required:
        - organization
        - idp_name
        - idp_client_id
        - idp_client_secret
        - discovery_endpoint
    ForgotPassword:
      type: object
      title: ForgotPassword
      description: Forgot Password Model
      properties:
        email:
          type: string
          title: Email
        emailenabled:
          type: boolean
          title: Emailenabled
          default: true
        organization:
          type: string
          title: Organization
      required:
        - email
        - organization
    SuccessResponseStructure:
      type: object
      title: SuccessResponseStructure
      description: Success Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          title: Data
          anyOf:
            - type: string
            - type: object
            - type: array
      required:
        - request_id
        - message
    FailureResponseStructure:
      type: object
      title: FailureResponseStructure
      description: Failure Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          title: Data
          anyOf:
            - type: string
            - type: object
            - type: array
      required:
        - request_id
        - message
    ResetPassword:
      type: object
      title: ResetPassword
      description: Reset Password Model
      properties:
        email:
          type: string
          title: Email
        old_password:
          type: string
          title: Old Password
        new_password:
          type: string
          title: New Password
      required:
        - email
        - old_password
        - new_password
    ApiSet:
      type: object
      title: ApiSet
      properties:
        name:
          type: string
          title: Name
        openapi_authorization:
          type: object
          title: Openapi Authorization
        openapi_file_url:
          type: string
          title: Openapi File Url
        host:
          type: string
          title: Host
        authorization:
          type: object
          title: Authorization
          default: {}
      required:
        - name
        - host
    UpdateApiSet:
      type: object
      title: UpdateApiSet
      properties:
        openapi_file_url:
          type: string
          title: Openapi File Url
        host:
          type: string
          title: Host
        openapi_authorization:
          type: object
          title: Openapi Authorization
          default: {}
        name:
          type: string
          title: Name
        authorization:
          type: object
          title: Authorization
          default: {}
      required:
        - openapi_file_url
        - host
        - name
    ListSecretResponse:
      type: object
      title: ListSecretResponse
      description: List Secret Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          title: Data
          default: {}
          allOf:
            - $ref: '#/components/schemas/ResponseWithResults'
      required:
        - request_id
        - message
    ResponseWithResults:
      type: object
      title: ResponseWithResults
      description: List Secret Response Model for Results key
      properties:
        results:
          type: array
          title: Results
      required:
        - results
    CreateSecretRequest:
      type: object
      title: CreateSecretRequest
      description: Secret create model
      properties:
        secret_name:
          type: string
          title: Secret Name
        secret_value:
          type: object
          title: Secret Value
      required:
        - secret_name
        - secret_value
    CreateSecretResponse:
      type: object
      title: CreateSecretResponse
      description: Create Secret Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          title: Data
          default: {}
          allOf:
            - $ref: '#/components/schemas/ResponseWithSecretName'
      required:
        - request_id
        - message
    ResponseWithSecretName:
      type: object
      title: ResponseWithSecretName
      description: Create Secret Response Model for secret name
      properties:
        secret_name:
          type: string
          title: Secret Name
      required:
        - secret_name
    GetSecretResponse:
      type: object
      title: GetSecretResponse
      description: Get a Secret Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          title: Data
          default: {}
          allOf:
            - $ref: '#/components/schemas/GetSecret'
      required:
        - request_id
        - message
    GetSecret:
      type: object
      title: GetSecret
      description: Secret Model
      properties:
        secret_name:
          type: string
          title: Secret Name
        secret_values:
          type: object
          title: Secret Values
      required:
        - secret_name
        - secret_values
    UpdateSecretRequest:
      type: object
      title: UpdateSecretRequest
      description: Secret Update Model
      properties:
        secret_value:
          type: object
          title: Secret Value
      required:
        - secret_value
    UpdateSecretResponse:
      type: object
      title: UpdateSecretResponse
      description: Update Secret Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
        data:
          title: Data
          default: {}
          allOf:
            - $ref: '#/components/schemas/UpdateSecret'
      required:
        - request_id
        - message
    UpdateSecret:
      type: object
      title: UpdateSecret
      description: Create Secret Response Model for secret name
      properties:
        secret_name:
          type: string
          title: Secret Name
      required:
        - secret_name
    DeleteSecretResponse:
      type: object
      title: DeleteSecretResponse
      description: Delete Secret Response Model
      properties:
        request_id:
          type: string
          title: Request Id
        status:
          $ref: '#/components/schemas/RequestStatus'
        status_id:
          type: string
          title: Status Id
        message:
          type: string
          title: Message
      required:
        - request_id
        - message
    UpdateLogFields:
      type: object
      title: UpdateLogFields
      description: Account model.
      properties:
        add_fields:
          type: array
          title: Add Fields
          items:
            type: string
        remove_fields:
          type: array
          title: Remove Fields
          items:
            type: string
      required:
        - add_fields
        - remove_fields
    CreateLogFields:
      type: object
      title: CreateLogFields
      description: Account model.
      properties:
        fields:
          type: array
          title: Fields
          items:
            type: string
      required:
        - fields
    app__schemas__asset_types__ListingFields:
      type: string
      enum:
        - asset_type_id
        - asset_type_name
        - entity_name
        - enabled
        - asset_definition
      title: ListingFields
      description: An enumeration.
    CreateAssetType:
      type: object
      title: CreateAssetType
      properties:
        asset_type_id:
          type: string
          title: Asset Type Id
          description: This field provides the asset type id for the new asset type.
        asset_type_name:
          type: string
          title: Asset Type Name
          description: This field provides the name of the asset type.
        entity_name:
          type: string
          title: Entity Name
          description: This field provides the entity name of the asset type.
        enabled:
          type: boolean
          title: Enabled
          description: This field provides the document id for the new document.
          default: true
        asset_definition:
          title: Asset Definition
          description: This field provides the document id for the new document.
          allOf:
            - $ref: '#/components/schemas/AssetDefinition'
      required:
        - asset_type_name
        - entity_name
        - asset_definition
    AssetDefinition:
      type: object
      title: AssetDefinition
      properties:
        asset:
          type: object
          title: Asset
          description: This field provides the asset type id for the new asset type.
        dependencies:
          type: array
          title: Dependencies
          description: This field provides the asset type id for the new asset type.
          default: []
    PatchAssetType:
      type: object
      title: PatchAssetType
      properties:
        asset_type_name:
          type: string
          title: Asset Type Name
          description: This field provides the name of the asset type.
        entity_name:
          type: string
          title: Entity Name
          description: This field provides the entity name of the asset type.
        enabled:
          type: boolean
          title: Enabled
          description: This field provides the document id for the new document.
        asset_definition:
          title: Asset Definition
          description: This field provides the document id for the new document.
          allOf:
            - $ref: '#/components/schemas/AssetDefinition'
    app__schemas__assets__ListingFields:
      type: string
      enum:
        - asset_id
        - asset_name
        - asset_type_id
        - asset_type_name
        - description
        - status
        - downloads
        - cost
        - tags
        - meta_data
        - data
      title: ListingFields
      description: An enumeration.
    CreateAsset:
      type: object
      title: CreateAsset
      properties:
        parent_config_id:
          type: string
          title: Parent Config Id
          description: This field provides the id of the config being registered as an asset.
        asset_name:
          type: string
          title: Asset Name
          description: This field provides the name of the asset.
        asset_type_id:
          type: string
          title: Asset Type Id
          description: This field provides the asset type id for the new asset.
        status:
          type: string
          title: Status
          description: This field provides the status of the asset.
        description:
          type: string
          title: Description
          description: This field provides the description of the asset.
        cost:
          type: number
          title: Cost
          description: This field provides the cost of the asset.
        downloads:
          type: integer
          title: Downloads
          description: This field provides the number of downloads of the asset.
          default: 0
        tags:
          type: array
          title: Tags
          description: This field provides the list of tags for the asset.
          default: []
        meta_data:
          type: object
          title: Meta Data
          description: This field provides the meta data of the asset.
        data:
          type: object
          title: Data
          description: This field provides the data required for importing the asset.
      required:
        - asset_name
        - status
        - cost
        - meta_data
    PatchAsset:
      type: object
      title: PatchAsset
      properties:
        asset_name:
          type: string
          title: Asset Name
          description: This field provides the name of the asset.
        status:
          type: string
          title: Status
          description: This field provides the status of the asset.
        description:
          type: string
          title: Description
          description: This field provides the description of the asset.
        cost:
          type: number
          title: Cost
          description: This field provides the cost of the asset.
        downloads:
          type: integer
          title: Downloads
          description: This field provides the number of downloads of the asset.
        tags:
          type: array
          title: Tags
          description: This field provides the list of tags for the asset.
        meta_data:
          type: object
          title: Meta Data
          description: This field provides the meta data of the asset.
        data:
          type: object
          title: Data
          description: This field provides the data required for importing the asset.
    app__schemas__experiments__ListingFields:
      type: string
      enum:
        - experiment_name
        - experiment_id
        - ml_client_expt_config
        - tags
        - created_ts
        - updated_ts
      title: ListingFields
      description: Enumeration of fields available for listing experiments.
    ListExperimentsResponse:
      type: object
      title: ListExperimentsResponse
      description: Response model for listing experiments.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The data containing experiment listings.
          allOf:
            - $ref: '#/components/schemas/ExperimentListingResponseValidation'
      required:
        - status
        - data
    ExperimentListingResponseValidation:
      type: object
      title: ExperimentListingResponseValidation
      description: Model for validating experiment listing response.
      properties:
        count:
          type: integer
          title: Count
          description: The count of experiments in the response.
        results:
          type: array
          title: Results
          description: The list of experiments in the response.
          items:
            $ref: '#/components/schemas/ExperimentList'
      required:
        - count
        - results
    ExperimentList:
      type: object
      title: ExperimentList
      properties:
        experiment_id:
          type: string
          title: Experiment Id
          description: The unique identifier for the experiment.
        experiment_name:
          type: string
          title: Experiment Name
          description: The name of the experiment.
        created_ts:
          type: string
          title: Created Ts
          description: The timestamp when the experiment was created.
        updated_ts:
          type: string
          title: Updated Ts
          description: The timestamp when the experiment was last updated.
        tags:
          type: array
          title: Tags
          description: Optional tags associated with the experiment.
          items:
            type: string
        ml_client_expt_config:
          title: Ml Client Expt Config
          description: The MLFlow configuration for the experiment.
          allOf:
            - $ref: '#/components/schemas/MLFlowExperimentConfig'
      required:
        - experiment_id
        - experiment_name
        - created_ts
        - updated_ts
    MLFlowExperimentConfig:
      type: object
      title: MLFlowExperimentConfig
      description: Configuration details for MLFlow experiments.
      properties:
        experiment_id:
          type: string
          title: Experiment Id
          description: The unique identifier for the experiment.
        artifact_location:
          type: string
          title: Artifact Location
          description: The location where artifacts are stored.
      required:
        - experiment_id
        - artifact_location
    CreateExperiment:
      type: object
      title: CreateExperiment
      description: Model for creating an experiment.
      properties:
        experiment_name:
          type: string
          title: Experiment Name
          description: The name of the experiment.
        experiment_description:
          type: string
          title: Experiment Description
          description: A brief description of the experiment.
        tags:
          type: array
          title: Tags
          description: Optional tags associated with the experiment.
          default: []
          items:
            type: string
      required:
        - experiment_name
    CreateExperimentResponse:
      type: object
      title: CreateExperimentResponse
      description: Response model for creating an experiment.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The configuration details of the created experiment.
          allOf:
            - $ref: '#/components/schemas/Experiment'
      required:
        - status
        - data
    Experiment:
      type: object
      title: Experiment
      description: Model representing an experiment with additional details.
      properties:
        experiment_name:
          type: string
          title: Experiment Name
          description: The name of the experiment.
        experiment_description:
          type: string
          title: Experiment Description
          description: A brief description of the experiment.
        tags:
          type: array
          title: Tags
          description: Optional tags associated with the experiment.
          default: []
          items:
            type: string
        experiment_id:
          type: string
          title: Experiment Id
          description: The unique identifier for the experiment.
        ml_client_expt_config:
          title: Ml Client Expt Config
          description: The MLFlow configuration for the experiment.
          allOf:
            - $ref: '#/components/schemas/MLFlowExperimentConfig'
        models:
          type: array
          title: Models
          description: The list of models associated with the experiment.
      required:
        - experiment_name
        - experiment_id
        - ml_client_expt_config
    GetExperimentResponse:
      type: object
      title: GetExperimentResponse
      description: Response model for retrieving experiment details.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The details of the retrieved experiment.
          allOf:
            - $ref: '#/components/schemas/Experiment'
      required:
        - status
        - data
    DeleteExperimentResponse:
      type: object
      title: DeleteExperimentResponse
      description: Response model for deleting an experiment.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          type: object
          title: Data
          description: The status of the request.
          default: {}
      required:
        - status
    PartialUpdateExperiment:
      type: object
      title: PartialUpdateExperiment
      description: Model for partially updating an experiment.
      properties:
        experiment_name:
          type: string
          title: Experiment Name
          description: The new name for the experiment.
        experiment_description:
          type: string
          title: Experiment Description
          description: The new description for the experiment.
        tags:
          type: array
          title: Tags
          description: The new tags for the experiment.
          items:
            type: string
        models:
          title: Models
          description: The models to be added or removed.
          allOf:
            - $ref: '#/components/schemas/UpdateExperimentEntity'
    UpdateExperimentEntity:
      type: object
      title: UpdateExperimentEntity
      description: Model for updating experiment entities (add/remove models).
      properties:
        add:
          type: array
          title: Add
          description: List of models to be added.
          default: []
          items:
            $ref: '#/components/schemas/ModelEntity'
        remove:
          type: array
          title: Remove
          description: List of models to be removed.
          default: []
          items:
            $ref: '#/components/schemas/ModelEntity'
    ModelEntity:
      type: object
      title: ModelEntity
      description: Model entity details.
      properties:
        model_id:
          type: string
          title: Model Id
          description: The unique identifier for the model.
        model_name:
          type: string
          title: Model Name
          description: The name of the model.
      required:
        - model_id
        - model_name
    UpdateExperimentResponse:
      type: object
      title: UpdateExperimentResponse
      description: Response model for updating an experiment.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The updated configuration details of the experiment.
          allOf:
            - $ref: '#/components/schemas/Experiment'
      required:
        - status
        - data
    app__schemas__models__ListingFields:
      type: string
      enum:
        - model_name
        - model_id
        - model_description
        - experiment_name
        - is_automl
        - task
        - tags
        - model_parameters
        - metrics
        - artifact_config
        - created_ts
        - updated_ts
      title: ListingFields
      description: Enumeration of fields available for listing models.
    ListModelsResponse:
      type: object
      title: ListModelsResponse
      description: Response model for listing models.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: Data containing count and model results.
          allOf:
            - $ref: '#/components/schemas/ModelListingResponseValidation'
      required:
        - status
        - data
    ModelListingResponseValidation:
      type: object
      title: ModelListingResponseValidation
      description: Model for validating experiment listing response.
      properties:
        count:
          type: integer
          title: Count
          description: The count of models in the response.
        results:
          type: array
          title: Results
          description: The list of models in the response as free-form dictionaries.
          items:
            $ref: '#/components/schemas/ModelList'
      required:
        - count
        - results
    ModelList:
      type: object
      title: ModelList
      properties:
        model_name:
          type: string
          title: Model Name
          description: Name of the model.
        model_id:
          type: string
          title: Model Id
          description: Unique identifier for the model.
        experiment_name:
          type: string
          title: Experiment Name
          description: Name of the experiment associated with the model.
        task:
          description: Task associated with the model.
          allOf:
            - $ref: '#/components/schemas/ModelTasks'
        created_ts:
          type: string
          title: Created Ts
          description: The timestamp when the experiment was created.
        updated_ts:
          type: string
          title: Updated Ts
          description: The timestamp when the experiment was last updated.
        model_description:
          type: string
          title: Model Description
          description: Description of the model.
        is_automl:
          type: boolean
          title: Is Automl
          description: Indicates if the model is created using AutoML.
          default: false
        model_parameters:
          title: Model Parameters
          description: Parameters related to the model.
          allOf:
            - $ref: '#/components/schemas/ModelParameters'
        metrics:
          title: Metrics
          description: Metrics related to the model.
          allOf:
            - $ref: '#/components/schemas/ModelMetrics'
        artifact_config:
          title: Artifact Config
          description: Configuration of model artifacts.
          allOf:
            - $ref: '#/components/schemas/ArtifactConfig'
        tags:
          type: array
          title: Tags
          description: Tags associated with the model.
          items:
            type: string
      required:
        - model_name
        - model_id
        - created_ts
        - updated_ts
    ModelTasks:
      type: string
      enum:
        - Classification
        - Regression
        - Forecasting
      title: ModelTasks
      description: Enumeration of tasks for models.
    ModelParameters:
      type: object
      title: ModelParameters
      description: Parameters related to the model.
      properties:
        model_architecture:
          type: string
          title: Model Architecture
          description: Architecture of the model.
        library:
          type: string
          title: Library
          description: Library used for the model.
        library_version:
          type: string
          title: Library Version
          description: Version of the library used for the model.
        model_args:
          type: object
          title: Model Args
          description: Arguments for the model.
    ModelMetrics:
      type: object
      title: ModelMetrics
      description: Metrics related to model training and validation.
      properties:
        training_metrics:
          type: object
          title: Training Metrics
          description: Metrics from the training process.
          additionalProperties:
            type: number
        validation_metrics:
          type: object
          title: Validation Metrics
          description: Metrics from the validation process.
          additionalProperties:
            type: number
    ArtifactConfig:
      type: object
      title: ArtifactConfig
      description: Configuration of model artifacts.
      properties:
        model_path:
          type: string
          title: Model Path
          description: path to the model artifact (s3 / blob / gcfs).
        model_object:
          type: string
          title: Model Object
          description: serialised representation of the model artifact.
        data_preprocessing_pipeline:
          type: array
          title: Data Preprocessing Pipeline
          description: List of steps in the data preprocessing pipeline - Captures the order in which the preprocessing is performed.
          items:
            $ref: '#/components/schemas/PipelineSteps'
    PipelineSteps:
      type: object
      title: PipelineSteps
      description: Steps in the data preprocessing pipeline.
      properties:
        step_name:
          type: string
          title: Step Name
          description: 'Preprocessing step, eg: label_encoder, scaler, one_hot_encoder'
        object_path:
          type: string
          title: Object Path
          description: 'Path to the object used in the step - s3 / blob / gcfs path (supports joblib, pickle files)'
        preproc_object:
          type: string
          title: Preproc Object
          description: Serialised representation of the preproc object
        encoding_fields:
          type: array
          title: Encoding Fields
          description: Fields used for encoding - list of fields relevant for this preprocessor
      required:
        - step_name
    CreateModel:
      type: object
      title: CreateModel
      description: Model for creating a new model.
      properties:
        model_name:
          type: string
          title: Model Name
          description: Name of the model.
        model_description:
          type: string
          title: Model Description
          description: Description of the model.
        experiment_name:
          type: string
          title: Experiment Name
          description: Name of the experiment associated with the model.
        is_automl:
          type: boolean
          title: Is Automl
          description: Indicates if the model is created using AutoML.
          default: false
        task:
          description: Task associated with the model.
          allOf:
            - $ref: '#/components/schemas/ModelTasks'
        model_parameters:
          title: Model Parameters
          description: Parameters related to the model.
          allOf:
            - $ref: '#/components/schemas/ModelParameters'
        metrics:
          title: Metrics
          description: Metrics related to the model.
          allOf:
            - $ref: '#/components/schemas/ModelMetrics'
        artifact_config:
          title: Artifact Config
          description: Configuration of model artifacts.
          allOf:
            - $ref: '#/components/schemas/ArtifactConfig'
        data:
          title: Data
          description: Configuration of data used for training and validation.
          allOf:
            - $ref: '#/components/schemas/DataConfig'
        model_interpretability:
          title: Model Interpretability
          description: Configuration for model interpretability.
          allOf:
            - $ref: '#/components/schemas/ModelInterpretabilityConfig'
        tags:
          type: array
          title: Tags
          description: Tags associated with the model.
          items:
            type: string
      required:
        - model_name
        - experiment_name
        - task
        - metrics
    DataConfig:
      type: object
      title: DataConfig
      description: Configuration of data used for training and validation.
      properties:
        training_data:
          type: string
          title: Training Data
          description: Registered training dataset ID.
        validation_data:
          type: string
          title: Validation Data
          description: Registered validation dataset ID.
        model_data:
          type: string
          title: Model Data
          description: Whole dataset ID - to be split into training and validation data.
        random_seed:
          type: integer
          title: Random Seed
          description: Random seed for reproduce data splitting.
    ModelInterpretabilityConfig:
      type: object
      title: ModelInterpretabilityConfig
      description: Configuration for model interpretability.
      properties:
        shap_scores:
          title: Shap Scores
          description: Dictionary of representations for SHAP scores.
          allOf:
            - $ref: '#/components/schemas/Representation'
        feature_scores:
          title: Feature Scores
          description: Dictionary of representations for Feature scores.
          allOf:
            - $ref: '#/components/schemas/Representation'
    Representation:
      type: object
      title: Representation
      description: Visual and tabular representation of the model.
      properties:
        visual_representation_path:
          type: string
          title: Visual Representation Path
          description: Visual representation (supports png / jpg files uploaded to remote storage)
        tabular_representation_path:
          type: string
          title: Tabular Representation Path
          description: Tabular representation (csv uploaded to remote storage)
        visual_representation_object:
          type: string
          title: Visual Representation Object
          description: Encoded representation of feature importance plot
        tabular_representation_object:
          type: string
          title: Tabular Representation Object
          description: Encoded representation of the feature importance table
    CreateModelResponse:
      type: object
      title: CreateModelResponse
      description: Response model for creating a model.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The configuration details of the created model.
          allOf:
            - $ref: '#/components/schemas/Model'
      required:
        - status
        - data
    Model:
      type: object
      title: Model
      description: Model representing a model with additional details.
      properties:
        model_name:
          type: string
          title: Model Name
          description: Name of the model.
        model_description:
          type: string
          title: Model Description
          description: Description of the model.
        experiment_name:
          type: string
          title: Experiment Name
          description: Name of the experiment associated with the model.
        is_automl:
          type: boolean
          title: Is Automl
          description: Indicates if the model is created using AutoML.
          default: false
        task:
          description: Task associated with the model.
          allOf:
            - $ref: '#/components/schemas/ModelTasks'
        model_parameters:
          title: Model Parameters
          description: Parameters related to the model.
          allOf:
            - $ref: '#/components/schemas/ModelParameters'
        metrics:
          title: Metrics
          description: Metrics related to the model.
          allOf:
            - $ref: '#/components/schemas/ModelMetrics'
        artifact_config:
          title: Artifact Config
          description: Configuration of model artifacts.
          allOf:
            - $ref: '#/components/schemas/ArtifactConfig'
        data:
          title: Data
          description: Configuration of data used for training and validation.
          allOf:
            - $ref: '#/components/schemas/DataConfig'
        model_interpretability:
          title: Model Interpretability
          description: Configuration for model interpretability.
          allOf:
            - $ref: '#/components/schemas/ModelInterpretabilityConfig'
        tags:
          type: array
          title: Tags
          description: Tags associated with the model.
          items:
            type: string
        model_id:
          type: string
          title: Model Id
          description: Unique identifier for the model.
        ml_client_model_config:
          title: Ml Client Model Config
          description: MLFlow configuration for the model.
          allOf:
            - $ref: '#/components/schemas/MLFlowModelConfig'
      required:
        - model_name
        - experiment_name
        - task
        - metrics
        - model_id
        - ml_client_model_config
    MLFlowModelConfig:
      type: object
      title: MLFlowModelConfig
      description: Configuration details for MLFlow models.
      properties:
        artifact_uri:
          type: string
          title: Artifact Uri
          description: URI of the artifact.
        experiment_id:
          type: string
          title: Experiment Id
          description: ID of the experiment.
        run_id:
          type: string
          title: Run Id
          description: ID of the run.
      required:
        - artifact_uri
        - experiment_id
        - run_id
    GetModelResponse:
      type: object
      title: GetModelResponse
      description: Response model for retrieving model details.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The configuration details of the model.
          allOf:
            - $ref: '#/components/schemas/Model'
      required:
        - status
        - data
    DeleteModelResponse:
      type: object
      title: DeleteModelResponse
      description: Response model for deleting the model.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          type: object
          title: Data
          description: Data related to the response.
          default: {}
      required:
        - status
    UpdateModel:
      type: object
      title: UpdateModel
      description: Model for updating an existing model.
      properties:
        model_name:
          type: string
          title: Model Name
          description: New name for the model.
        model_description:
          type: string
          title: Model Description
          description: New description for the model.
        experiment_name:
          type: string
          title: Experiment Name
          description: New ID of the experiment associated with the model.
        is_automl:
          type: boolean
          title: Is Automl
          description: Indicates if the model is created using AutoML.
        task:
          description: New task associated with the model.
          allOf:
            - $ref: '#/components/schemas/ModelTasks'
        model_parameters:
          title: Model Parameters
          description: New parameters for the model.
          allOf:
            - $ref: '#/components/schemas/ModelParameters'
        metrics:
          title: Metrics
          description: New metrics for the model.
          allOf:
            - $ref: '#/components/schemas/ModelMetrics'
        artifact_config:
          title: Artifact Config
          description: New artifact configuration for the model.
          allOf:
            - $ref: '#/components/schemas/ArtifactConfig'
        tags:
          type: array
          title: Tags
          description: New tags for the model.
          items:
            type: string
        data:
          title: Data
          description: Configuration of data used for training and validation.
          allOf:
            - $ref: '#/components/schemas/DataConfig'
        model_interpretability:
          title: Model Interpretability
          description: Configuration for model interpretability.
          allOf:
            - $ref: '#/components/schemas/ModelInterpretabilityConfig'
        ml_client_model_config:
          title: Ml Client Model Config
          description: MLFlow configuration for the model.
          allOf:
            - $ref: '#/components/schemas/MLFlowModelConfig'
    UpdateModelResponse:
      type: object
      title: UpdateModelResponse
      description: 'Response model for updating a model '
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The updated configuration details of the model.
          allOf:
            - $ref: '#/components/schemas/Model'
      required:
        - status
        - data
    app__schemas__doc_types__ListingFields:
      type: string
      enum:
        - doc_type_id
        - doc_type_name
        - created_ts
        - updated_ts
        - taxonomy
        - doc_type
        - taxonomy_id
        - workflow_id
        - status
        - users
        - user_groups
        - report_id
        - metrics_dataset
        - file_path
        - preset_workflow_id
        - preset_job_id
        - preset_document_id
        - preset_dataset_id
        - bg_job_id
        - workflow_status
        - no_of_documents
        - auto_classifier_job_id
        - learning_job_id
      title: ListingFields
      description: An enumeration.
    DocTypeListingResponse:
      type: object
      title: DocTypeListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the list API. The output contains data about all datasets registered and their corresponding dataset IDs.
          allOf:
            - $ref: '#/components/schemas/DocTypeListingResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    DocTypeListingResponseValidation:
      type: object
      title: DocTypeListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of datasets that have been registered.
        results:
          type: array
          title: Results
          description: This field describes the list of datasets that have been registered.
          items:
            $ref: '#/components/schemas/DocTypeListingEntity'
      required:
        - count
        - results
    DocTypeListingEntity:
      type: object
      title: DocTypeListingEntity
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the doc_type.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the doc_type.
        doc_type_id:
          type: string
          title: Doc Type Id
          description: This field describes the identifier of the doc_type.
        doc_type_name:
          type: string
          title: Doc Type Name
          description: This field describes the name of the doc_type.
        doc_type:
          type: string
          title: Doc Type
          description: This field describes the name of the doc_type.
        taxonomy:
          type: object
          title: Taxonomy
          description: 'This field provides a summary about the doc_type. The summary includes metadata about the doc_type, a sample set of records that we can find in the data, and univariate summary of all fields in the doc_type.'
        taxonomy_id:
          type: string
          title: Taxonomy Id
          description: This field provides a description about the doc_type.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field provides a description about the doc_type.
        file_path:
          type: array
          title: File Path
          description: This field provides a description about the doc_type.
          items:
            type: string
        preset_workflow_id:
          type: string
          title: Preset Workflow Id
          description: This field provides a description about the doc_type.
        preset_job_id:
          type: string
          title: Preset Job Id
          description: This field provides a description about the doc_type.
        preset_document_id:
          type: array
          title: Preset Document Id
          description: This field provides a description about the doc_type.
          items:
            type: string
        preset_dataset_id:
          type: string
          title: Preset Dataset Id
          description: This field provides a description about the doc_type.
        status:
          type: string
          title: Status
          description: This field provides a description about the doc_type.
        no_of_documents:
          type: integer
          title: No Of Documents
          description: This field provides a description about the count of documents of the doc_type.
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the doc type.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the doc type.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        report_id:
          type: string
          title: Report Id
          description: This field provides a description about the report id.
        metrics_dataset:
          type: object
          title: Metrics Dataset
          description: This field provides a description about the metrics dataset
      required:
        - created_ts
        - updated_ts
        - doc_type_id
        - doc_type_name
    EntityUser:
      type: object
      title: EntityUser
      properties:
        user_id:
          type: string
          title: User Id
          description: This field describes the id of the user.
        name:
          type: string
          title: Name
          description: This field describes the name of the user
      required:
        - user_id
    EntityUserGroup:
      type: object
      title: EntityUserGroup
      properties:
        user_group_id:
          type: string
          title: User Group Id
          description: This field describes the group id of the user.
        name:
          type: string
          title: Name
          description: This field describes the name of the user
      required:
        - user_group_id
    DocType:
      type: object
      title: DocType
      properties:
        doc_type_name:
          type: string
          title: Doc Type Name
          description: This field describes the name of the doc_type.
        doc_type_id:
          type: string
          title: Doc Type Id
          description: This field provides a description about the doc_type.
        doc_type:
          type: string
          title: Doc Type
          description: This field provides a description about the doc_type.
        taxonomy:
          type: object
          title: Taxonomy
          doc_type_description: 'This field provides a summary about the doc_type. The summary includes metadata about the doc_type, a sample set of records that we can find in the data, and univariate summary of all fields in the doc_type.'
        taxonomy_id:
          type: string
          title: Taxonomy Id
          description: This field provides a description about the doc_type.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field provides a description about the doc_type.
        file_path:
          type: array
          title: File Path
          description: This field provides a description about the doc_type.
          items:
            type: string
        preset_workflow_id:
          type: string
          title: Preset Workflow Id
          description: This field provides a description about the doc_type.
        preset_job_id:
          type: string
          title: Preset Job Id
          description: This field provides a description about the doc_type.
        preset_document_id:
          type: array
          title: Preset Document Id
          description: This field provides a description about the doc_type.
          items:
            type: string
        preset_dataset_id:
          type: string
          title: Preset Dataset Id
          description: This field provides a description about the doc_type.
        status:
          type: string
          title: Status
          description: This field provides a description about the doc_type.
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the doc type.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the doc type.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        report_id:
          type: string
          title: Report Id
          description: This field provides a description about the report id.
        metrics_dataset:
          type: object
          title: Metrics Dataset
          description: This field provides a description about the metrics dataset
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a doc type is a preset doc type or not.
          default: false
      required:
        - doc_type_name
    DocTypeUpdateResponse:
      type: object
      title: DocTypeUpdateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a doc_type ID that can be used as a unique reference to this doc_type.'
          allOf:
            - $ref: '#/components/schemas/DocTypeConfigValidation'
      required:
        - status
        - request_id
        - correlation_id
        - config
    DocTypeConfigValidation:
      type: object
      title: DocTypeConfigValidation
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the doc_type.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the doc_type.
        doc_type_id:
          type: string
          title: Doc Type Id
          description: This field describes the identifier of the doc_type.
        doc_type_name:
          type: string
          title: Doc Type Name
          description: This field describes the name of the doc_type.
        doc_type:
          type: string
          title: Doc Type
          description: This field describes the name of the doc_type.
        taxonomy:
          type: object
          title: Taxonomy
          description: 'This field provides a summary about the doc_type. The summary includes metadata about the doc_type, a sample set of records that we can find in the data, and univariate summary of all fields in the doc_type.'
        taxonomy_id:
          type: string
          title: Taxonomy Id
          description: This field provides a description about the doc_type.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field provides a description about the doc_type.
        file_path:
          type: array
          title: File Path
          description: This field provides a description about the doc_type.
          items:
            type: string
        preset_workflow_id:
          type: string
          title: Preset Workflow Id
          description: This field provides a description about the doc_type.
        preset_job_id:
          type: string
          title: Preset Job Id
          description: This field provides a description about the doc_type.
        preset_document_id:
          type: array
          title: Preset Document Id
          description: This field provides a description about the doc_type.
          items:
            type: string
        preset_dataset_id:
          type: string
          title: Preset Dataset Id
          description: This field provides a description about the doc_type.
        status:
          type: string
          title: Status
          description: This field provides a description about the doc_type.
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the doc type.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the doc type.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        report_id:
          type: string
          title: Report Id
          description: This field provides a description about the report id.
        metrics_dataset:
          type: object
          title: Metrics Dataset
          description: This field provides a description about the metrics dataset
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a doc type is a preset doc type or not.
          default: false
      required:
        - created_ts
        - updated_ts
        - doc_type_id
        - doc_type_name
    DocTypeDeleteResponse:
      type: object
      title: DocTypeDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the delete API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
      required:
        - status
        - request_id
        - correlation_id
    DocTypeUpdate:
      type: object
      title: DocTypeUpdate
      properties:
        doc_type_name:
          type: string
          title: Doc Type Name
          description: The name of the document type.
        doc_type:
          type: string
          title: Doc Type
          description: The type of document.
        taxonomy_id:
          type: string
          title: Taxonomy Id
          description: The ID of the taxonomy.
        taxonomy:
          type: object
          title: Taxonomy
          description: The taxonomy details.
        workflow_id:
          type: string
          title: Workflow Id
          description: The workflow ID.
        file_path:
          type: array
          title: File Path
          description: The file paths associated with the document.
          items:
            type: string
        preset_workflow_id:
          type: string
          title: Preset Workflow Id
          description: The preset workflow ID.
        preset_job_id:
          type: string
          title: Preset Job Id
          description: The preset job ID.
        preset_document_id:
          type: array
          title: Preset Document Id
          description: List of preset document IDs.
          items:
            type: string
        preset_dataset_id:
          type: string
          title: Preset Dataset Id
          description: The preset dataset ID.
        status:
          title: Status
          description: The status of the document.
        internal:
          type: boolean
          title: Internal
          description: Whether the document is internal.
        config_type:
          type: string
          title: Config Type
          description: The configuration type of the document.
        users:
          type: array
          title: Users
          description: List of users associated with the document.
        user_groups:
          type: array
          title: User Groups
          description: List of user groups associated with the document.
        bg_job_id:
          type: string
          title: Bg Job Id
          description: The background job ID.
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a doc type is a preset doc type or not.
          default: false
        metrics_dataset:
          type: object
          title: Metrics Dataset
          description: This field provides a description about the metrics dataset
    schemas__documents__ListingFields:
      type: string
      enum:
        - doc_type_id
        - workflow_id
        - created_ts
        - updated_ts
        - no_of_pages
        - job_id
        - HITL_action
        - HITL_status
        - document_id
        - users
        - user_groups
        - batch_name
        - doc_type_name
        - document_name
        - pages
        - image_url
        - ocr_job_id
        - ocr_json_path
        - textract_json_path
        - document_embedding_path_dict
        - predicted_doc_type_id
        - is_doctype_reviewed
        - registration_document
      title: ListingFields
      description: An enumeration.
    DocumentListingResponse:
      type: object
      title: DocumentListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the list API. The output contains data about all documents registered and their corresponding document IDs.
          allOf:
            - $ref: '#/components/schemas/DocumentListingResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    DocumentListingResponseValidation:
      type: object
      title: DocumentListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of documents that have been registered.
        results:
          type: array
          title: Results
          description: This field describes the list of documents that have been registered.
          items:
            $ref: '#/components/schemas/DocumentListingEntity'
      required:
        - count
        - results
    DocumentListingEntity:
      type: object
      title: DocumentListingEntity
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the document.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the document.
        document_id:
          type: string
          title: Document Id
          description: This field describes the identifier of the document.
        document_name:
          type: string
          title: Document Name
          description: This field describes the name of the document.
        job_id:
          type: string
          title: Job Id
          description: This field describes the identifier of the job.
        doc_type_id:
          type: string
          title: Doc Type Id
          description: This field describes the identifier of the document type of the document.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes the identifier of the workflow.
        HITL_status:
          type: string
          title: Hitl Status
          description: This field provides a description about the HITL status.
        HITL_action:
          type: string
          title: Hitl Action
          description: This field provides a description about the HITL action.
        no_of_pages:
          type: integer
          title: No Of Pages
          description: This field provides the count of no. of pages in the document.
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the document.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the document.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        doc_type_name:
          type: string
          title: Doc Type Name
          description: This field describes the document type name of the document
        batch_name:
          type: string
          title: Batch Name
          description: This field describes about the batch name of the document.
        pages:
          type: object
          title: Pages
          description: Dictionary containing information about document pages.
        ocr_json_path:
          type: string
          title: Ocr Json Path
          description: This field provides the OCR JSON path for the new document.
        textract_json_path:
          type: string
          title: Textract Json Path
          description: This field provides the Textract JSON path for the new document.
        predicted_doctype_id:
          type: string
          title: Predicted Doctype Id
          description: This field provides the predicted doctype id for the new document by Auto classifier
        document_embedding_path_dict:
          type: object
          title: Document Embedding Path Dict
          description: This field provides the text embeddings path for the new document.
        is_doctype_reviewed:
          type: boolean
          title: Is Doctype Reviewed
          description: Boolean for defining whether the doctype for the document is reviewed.
          default: false
        registration_document:
          type: boolean
          title: Registration Document
          description: This field describes whether the document was uploaded for doc_type registration.
          default: false
        image_url:
          type: string
          title: Image Url
          description: Cloud path of the document file
          default: ''
      required:
        - created_ts
        - updated_ts
        - document_id
        - document_name
    DocumentCreate:
      type: object
      title: DocumentCreate
      properties:
        image_url:
          type: string
          title: Image Url
          description: This field describes the url of the image for the new document.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field provides a description about the workflow id for the new document
        document_name:
          type: string
          title: Document Name
          description: This field provides the name for the new document
        doctype_id:
          type: string
          title: Doctype Id
          description: This field provides the doctype id for the new document
        HITL_action:
          type: string
          title: Hitl Action
          description: This field describes the HITL action for the new document.
        HITL_status:
          type: string
          title: Hitl Status
          description: This field provides the HITL status for the new document.
        job_id:
          type: string
          title: Job Id
          description: This field provides the job id for the new document.
        node_id:
          type: string
          title: Node Id
          description: This field provides the node id for the new document.
        client:
          type: string
          title: Client
          description: This field provides the client id for the new document.
        document_id:
          type: string
          title: Document Id
          description: This field provides the document id for the new document.
        pages:
          type: object
          title: Pages
          description: This field provides the pages for the new document.
        ocr_json_path:
          type: string
          title: Ocr Json Path
          description: This field provides the OCR JSON path for the new document.
        textract_json_path:
          type: string
          title: Textract Json Path
          description: This field provides the Textract JSON path for the new document.
        predicted_doctype_id:
          type: string
          title: Predicted Doctype Id
          description: This field provides the predicted doctype id for the new document by Auto classifier
        document_embedding_path_dict:
          type: object
          title: Document Embedding Path Dict
          description: This field provides the text embeddings path for the new document.
        is_doctype_reviewed:
          type: boolean
          title: Is Doctype Reviewed
          description: Boolean for defining whether the doctype for the document is reviewed.
          default: false
        registration_document:
          type: boolean
          title: Registration Document
          description: This field describes whether the document was uploaded for doc_type registration.
          default: false
        batch_name:
          type: string
          title: Batch Name
          description: This field describes about the batch name of the document.
    DocumentUpdate:
      type: object
      title: DocumentUpdate
      properties:
        updated_data:
          type: object
          title: Updated Data
          description: Updated data for the document.
        users:
          type: array
          title: Users
          description: List of users associated with the document.
          default: []
        user_groups:
          type: array
          title: User Groups
          description: List of user groups associated with the document.
          default: []
        job_id:
          type: string
          title: Job Id
          description: Identifier for the job associated with the document.
        HITL_status:
          type: string
          title: Hitl Status
          description: Status for HITL processing.
        pages:
          type: object
          title: Pages
          description: Dictionary containing information about document pages.
        HITL_action:
          type: string
          title: Hitl Action
          description: Action related to HITL processing.
        ocr_json_path:
          type: string
          title: Ocr Json Path
          description: Path to the OCR JSON file.
        textract_json_path:
          type: string
          title: Textract Json Path
          description: Path to the Textract JSON file.
        doc_type_id:
          type: string
          title: Doc Type Id
          description: Identifier for the doc_type associated with the document.
        no_of_pages:
          type: integer
          title: No Of Pages
          description: This field provides the count of no. of pages in the document.
        predicted_doctype_id:
          type: string
          title: Predicted Doctype Id
          description: This field provides the predicted doctype id for the new document by Auto classifier
        document_embedding_path_dict:
          type: object
          title: Document Embedding Path Dict
          description: This field provides the text embeddings path for the new document.
        is_doctype_reviewed:
          type: string
          title: Is Doctype Reviewed
          description: Boolean for defined whether the doctype for the document is reviewed.
        ocr_job_id:
          type: string
          title: Ocr Job Id
          description: Identifier for the OCR job of the document
          default: ''
        doc_type_name:
          type: string
          title: Doc Type Name
          description: Name of the document type of the document
          default: ''
    DocumentDeleteResponse:
      type: object
      title: DocumentDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the delete API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
      required:
        - status
        - request_id
        - correlation_id
    DocumentPatch:
      type: object
      title: DocumentPatch
      properties:
        document_name:
          type: string
          title: Document Name
          description: Name of the document
        batch_name:
          type: string
          title: Batch Name
          description: Name of the batch to which the document belongs to
        doc_type_id:
          type: string
          title: Doc Type Id
          description: Identifier for the document type of the document
        workflow_id:
          type: string
          title: Workflow Id
          description: Identifier for the workflow associated with the document type of the document
        image_url:
          type: string
          title: Image Url
          description: Cloud path of the document file
        no_of_pages:
          type: integer
          title: No Of Pages
          description: Number of pages of the document
        doc_type_name:
          type: string
          title: Doc Type Name
          description: Name of the document type of the document
        registration_document:
          type: boolean
          title: Registration Document
          description: This field describes whether the document was uplaoded for doc_type registration
        job_id:
          type: string
          title: Job Id
          description: Identifier for the job of the document
        ocr_job_id:
          type: string
          title: Ocr Job Id
          description: Identifier for the OCR job of the document
        pages:
          type: object
          title: Pages
          description: Page details and extraction data of the document
        meta:
          type: object
          title: Meta
          description: Additional meta data of the document
        ocr_json_path:
          type: string
          title: Ocr Json Path
          description: OCR json cloud path of the document
        textract_json_path:
          type: string
          title: Textract Json Path
          description: Textract JSON cloud path of the document
        HITL_status:
          type: string
          title: Hitl Status
          description: HITL status of the document
        HITL_action:
          type: string
          title: Hitl Action
          description: HITL action of the document
        document_embedding_path_dict:
          type: object
          title: Document Embedding Path Dict
          description: Document embeddings cloud path of the document
        predicted_doc_type_id:
          type: string
          title: Predicted Doc Type Id
          description: Predicted doc_type_id for the document
        is_doctype_reviewed:
          type: boolean
          title: Is Doctype Reviewed
          description: Review status of document type of the document
        users:
          type: array
          title: Users
          description: List of users assigned to the document
        user_groups:
          type: array
          title: User Groups
          description: List of user groups assigned to the document
    DocumentQuery:
      type: object
      title: DocumentQuery
      properties:
        query:
          type: string
          title: Query
          decription: The query to be searched in the document
      required:
        - query
    MatchingListingResponse:
      type: object
      title: MatchingListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the list API. The output contains data about all matchings done and their matching IDs.
          allOf:
            - $ref: '#/components/schemas/MatchingListingResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    MatchingListingResponseValidation:
      type: object
      title: MatchingListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of matching jobs that have been done.
        results:
          type: array
          title: Results
          description: This field describes the list of matchings that have been done.
          items:
            $ref: '#/components/schemas/MatchingListingEntity'
      required:
        - count
        - results
    MatchingListingEntity:
      type: object
      title: MatchingListingEntity
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the matching.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the matching.
        matching_id:
          type: string
          title: Matching Id
          description: This field describes the identifier of the matching.
        matching_name:
          type: string
          title: Matching Name
          description: This field describes the name of the matching.
        review_status:
          type: string
          title: Review Status
          description: This field provides the review status for the new matching job.
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the matching.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the matching.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        status:
          type: string
          title: Status
          description: This field provides the status for the new matching job.
      required:
        - created_ts
        - updated_ts
        - matching_id
        - matching_name
    MatchingCreate:
      type: object
      title: MatchingCreate
      properties:
        matching_id:
          type: string
          title: Matching Id
          description: This field provides a description about the id for the new matching job
        matching_name:
          type: string
          title: Matching Name
          description: This field provides a description about the name for the new matching job
        review_status:
          type: string
          title: Review Status
          description: This field provides the review status for the new matching job.
        status:
          type: string
          title: Status
          description: This field provides the status for the new matching job.
    MatchingUpdate:
      type: object
      title: MatchingUpdate
    MatchingDeleteResponse:
      type: object
      title: MatchingDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the delete API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
      required:
        - status
        - request_id
        - correlation_id
    CreateDatatype:
      type: object
      title: CreateDatatype
      properties:
        datatype_config:
          type: array
          title: Datatype Config
        datatype_name:
          type: string
          title: Datatype Name
        internal:
          type: boolean
          title: Internal
          default: false
        description:
          type: string
          title: Description
      required:
        - datatype_config
        - datatype_name
    UpdateDatatype:
      type: object
      title: UpdateDatatype
      properties:
        datatype_config:
          type: array
          title: Datatype Config
        datatype_name:
          type: string
          title: Datatype Name
        internal:
          type: boolean
          title: Internal
          default: false
        description:
          type: string
          title: Description
      required:
        - datatype_config
        - datatype_name
    CreatePresetDocType:
      type: object
      title: CreatePresetDocType
      properties:
        config_type:
          type: array
          title: Config Type
        preset_doc_type_name:
          type: string
          title: Preset Doc Type Name
        internal:
          type: boolean
          title: Internal
          default: false
      required:
        - config_type
        - preset_doc_type_name
    UpdatePresetDocType:
      type: object
      title: UpdatePresetDocType
      properties:
        config_type:
          type: array
          title: Config Type
        preset_doc_type_name:
          type: string
          title: Preset Doc Type Name
        internal:
          type: boolean
          title: Internal
          default: false
      required:
        - config_type
        - preset_doc_type_name
    Body_hdfc_sync_inference_api_v2_documents_hdfc_post:
      type: object
      title: Body_hdfc_sync_inference_api_v2_documents_hdfc_post
      properties:
        input_file:
          type: string
          title: Input File
          format: binary
        metadata:
          type: string
          title: Metadata
        debug:
          type: string
          title: Debug
          default: 'false'
    DocumentInferAsyncRequest:
      type: object
      title: DocumentInferAsyncRequest
      properties:
        inputs:
          type: array
          title: Inputs
          description: This field describes the List of dicts representing each input document.
          default: []
          items:
            $ref: '#/components/schemas/DocumentInput'
        doc_type_id:
          title: Doc Type Id
          description: This field describes the ID of the document type for inference.
          default: ''
          anyOf:
            - type: string
            - nullable: true
    DocumentInput:
      type: object
      title: DocumentInput
      properties:
        name:
          type: string
          title: Name
        input_type:
          $ref: '#/components/schemas/InputTypeOptions'
        file_extension:
          $ref: '#/components/schemas/FileExtensionOptions'
        files:
          type: array
          title: Files
        metadata:
          type: object
          title: Metadata
      required:
        - name
        - input_type
        - file_extension
        - files
        - metadata
    InputTypeOptions:
      type: string
      enum:
        - base64
        - url
        - binary
      title: InputTypeOptions
    FileExtensionOptions:
      type: string
      enum:
        - pdf
        - jpg
        - tiff
        - png
      title: FileExtensionOptions
    AsyncDocumentResultsResponse:
      type: object
      title: AsyncDocumentResultsResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the status of the response.
        message:
          type: string
          title: Message
          description: This field describes the message of the response.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID for the request
        metadata:
          type: object
          title: Metadata
          description: This field contains the client input metadata
          default: {}
        data:
          $ref: '#/components/schemas/DocumentResponseData'
          description: This field describes about the data
      required:
        - status
        - message
        - request_id
        - data
    DocumentResponseData:
      type: object
      title: DocumentResponseData
      properties:
        document_name:
          type: string
          title: Document Name
          description: This field describes the document name.
        document_id:
          type: string
          title: Document Id
          description: This field describes the document id.
        doc_type_id:
          type: string
          title: Doc Type Id
          description: This field describes the document type id.
          default: ''
        doc_type_name:
          type: string
          title: Doc Type Name
          description: This field describes the document type name.
          default: ''
        state:
          type: string
          title: State
          description: This field describes the state of the document.
          default: ''
        extraction_results:
          type: array
          title: Extraction Results
          description: Contains the extracted attribute results
          default: []
        validation_results:
          type: array
          title: Validation Results
          description: Contains the validation results for attributes
          default: []
        pages_info:
          type: object
          title: Pages Info
          description: Contains the processed pages info
          default: {}
      required:
        - document_name
        - document_id
    SyncDocumentRequest:
      type: object
      title: SyncDocumentRequest
      properties:
        input:
          type: array
          title: Input
          decription: This contains the list of input images for the document as per the input_type
        input_type:
          type: string
          title: Input Type
          decription: This describes the type of file uploaded in the input image list.
        doc_type_id:
          type: string
          title: Doc Type Id
          decription: Doc type ID of the document
        document_name:
          type: string
          title: Document Name
          decription: Document name of the document to be uploaded
        file_extension:
          type: string
          title: File Extension
          decription: File extension of each input file present in input list
        metadata:
          type: object
          title: Metadata
          decription: Metadata associated with the file upload
      required:
        - input
        - input_type
        - doc_type_id
        - document_name
        - file_extension
        - metadata
    SyncDocumentResponse:
      type: object
      title: SyncDocumentResponse
      properties:
        status:
          type: string
          title: Status
          description: The status of the document extraction process.
        message:
          type: string
          title: Message
          description: A message providing additional information about the extraction process.
        request_id:
          type: string
          title: Request Id
          description: A unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: A unique identifier used to correlate the request with other related processes.
        metadata:
          type: object
          title: Metadata
          description: A dictionary containing metadata associated with the document.
        document_name:
          type: string
          title: Document Name
          description: The name of the document being extracted.
        document_id:
          type: string
          title: Document Id
          description: A unique identifier for the document.
        doc_type_id:
          type: string
          title: Doc Type Id
          description: A unique identifier for the document type.
        extraction_results:
          type: array
          title: Extraction Results
          description: A list of results from the document extraction process.
        matching_results:
          type: array
          title: Matching Results
          description: A list of results from the document matching process.
        validation_results:
          type: array
          title: Validation Results
          description: A list of results from the document validation process.
        pages_info:
          type: object
          title: Pages Info
          decription: This contains each page of the document and their metadata.
        data:
          title: Data
          description: Will be populated only in case of multiple documents uploaded to the sync endpoint.
          default: []
          anyOf:
            - type: array
            - nullable: true
      required:
        - status
        - message
        - request_id
        - correlation_id
        - metadata
        - document_name
        - document_id
        - doc_type_id
        - extraction_results
        - matching_results
        - validation_results
        - pages_info
    ListingFields:
      type: string
      enum:
        - node_definition_id
        - node_definition_name
        - display_name
        - node_group
        - ui_config
        - status
        - created_ts
        - updated_ts
        - preset
        - runtime
      title: ListingFields
      description: Enumeration of fields available for listing models.
    NodeDefinitionListingResponse:
      type: object
      title: NodeDefinitionListingResponse
      description: Response model for listing models.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: Data containing count and node definition results.
          allOf:
            - $ref: '#/components/schemas/NodeDefinitionListingResponseValidation'
      required:
        - status
        - data
    NodeDefinitionListingResponseValidation:
      type: object
      title: NodeDefinitionListingResponseValidation
      description: Model for validating experiment listing response.
      properties:
        count:
          type: integer
          title: Count
          description: The count of node definitions in the response.
        results:
          type: array
          title: Results
          description: The list of node definitions in the response.
          items:
            $ref: '#/components/schemas/NodeDefinitionsList'
      required:
        - count
        - results
    NodeDefinitionsList:
      type: object
      title: NodeDefinitionsList
      description: |-
        Model for listing node definitions.
        # TODO: Add more fields in ListingFields as required and make them optional here.
      properties:
        node_definition_id:
          type: string
          title: Node Definition Id
          description: ID of the node definition.
        node_definition_name:
          type: string
          title: Node Definition Name
          description: Name of the node definition.
        display_name:
          type: string
          title: Display Name
          description: Display name of the node definition.
        node_group:
          type: string
          title: Node Group
          description: Group of the node definition.
        ui_config:
          type: object
          title: Ui Config
          description: Ui Config of node definition
          default: {}
        status:
          type: string
          title: Status
          description: Status of the node definition.
        created_ts:
          type: string
          title: Created Ts
          description: The timestamp when the node definition was created.
        updated_ts:
          type: string
          title: Updated Ts
          description: The timestamp when the node definition was last updated.
        preset:
          type: boolean
          title: Preset
          description: Whether the node definition is preset or not.
        runtime:
          description: The runtime of the node definition.
          allOf:
            - $ref: '#/components/schemas/NodeDefinitionRuntime'
      required:
        - node_definition_id
        - node_definition_name
        - display_name
        - node_group
        - status
        - created_ts
        - updated_ts
        - preset
        - runtime
    NodeDefinitionRuntime:
      type: string
      enum:
        - python
        - spark
      title: NodeDefinitionRuntime
      description: This class enumerates the different runtimes that are supported for a Node Type.
    CreateNodeDefinition:
      type: object
      title: CreateNodeDefinition
      description: Model for node definitions.
      properties:
        node_definition_name:
          type: string
          title: Node Definition Name
          description: Name of the node definition.
        display_name:
          type: string
          title: Display Name
          description: Display name of the node definition.
        description:
          type: string
          title: Description
          description: Description of the model.
          default: ''
        node_group:
          type: string
          title: Node Group
          description: Group of the node definition.
        ui_config:
          title: Ui Config
          description: UI Config of the node definition.
          allOf:
            - $ref: '#/components/schemas/UIConfig'
        tags:
          type: array
          title: Tags
          description: Tags associated with the node definition.
          default: []
          items:
            type: string
        status:
          type: string
          title: Status
          description: Status of the node definition.
          default: inactive
        user_id:
          type: string
          title: User Id
          description: This field describes the user id used to create node definition.
          default: ''
        deployment:
          type: object
          title: Deployment
          description: This field describes the deployment details of the node definition.
          default: {}
        preset:
          type: boolean
          title: Preset
          description: This field describes whether a node type is preset or not.
          default: false
        runtime:
          description: ' This field describes the runtime of the node definition.'
          default: python
          allOf:
            - $ref: '#/components/schemas/NodeDefinitionRuntime'
      required:
        - node_definition_name
        - display_name
        - node_group
        - ui_config
    UIConfig:
      type: object
      title: UIConfig
      description: Model for UI Config.
      properties:
        icon:
          type: string
          title: Icon
          description: Icon of the node.
          default: get-code
        form_schema:
          type: object
          title: Form Schema
          description: Form Schema of the node.
        ui_schema:
          type: object
          title: Ui Schema
          description: UI Schema of the node.
        allowed_sources:
          type: array
          title: Allowed Sources
          description: Allowed sources for the node.
          default: []
          items:
            type: string
    NodeDefinitionCreateResponse:
      type: object
      title: NodeDefinitionCreateResponse
      description: Response model for creating a node definition.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          type: string
          title: Data
          description: The id of the node definition that was created.
        config:
          title: Config
          description: The node definition that was created.
          allOf:
            - $ref: '#/components/schemas/NodeDefinition'
      required:
        - status
        - data
        - config
    NodeDefinition:
      type: object
      title: NodeDefinition
      description: Model for listing node definitions.
      properties:
        node_definition_name:
          type: string
          title: Node Definition Name
          description: Name of the node definition.
        display_name:
          type: string
          title: Display Name
          description: Display name of the node definition.
        description:
          type: string
          title: Description
          description: Description of the model.
          default: ''
        node_group:
          type: string
          title: Node Group
          description: Group of the node definition.
        ui_config:
          title: Ui Config
          description: UI Config of the node definition.
          allOf:
            - $ref: '#/components/schemas/UIConfig'
        tags:
          type: array
          title: Tags
          description: Tags associated with the node definition.
          default: []
          items:
            type: string
        status:
          type: string
          title: Status
          description: Status of the node definition.
          default: inactive
        user_id:
          type: string
          title: User Id
          description: This field describes the user id used to create node definition.
          default: ''
        deployment:
          type: object
          title: Deployment
          description: This field describes the deployment details of the node definition.
          default: {}
        preset:
          type: boolean
          title: Preset
          description: This field describes whether a node type is preset or not.
          default: false
        runtime:
          description: ' This field describes the runtime of the node definition.'
          default: python
          allOf:
            - $ref: '#/components/schemas/NodeDefinitionRuntime'
        node_definition_id:
          type: string
          title: Node Definition Id
          description: ID of the node definition.
        created_ts:
          type: string
          title: Created Ts
          description: The timestamp when the node definition was created.
        updated_ts:
          type: string
          title: Updated Ts
          description: The timestamp when the node definition was last updated.
      required:
        - node_definition_name
        - display_name
        - node_group
        - ui_config
        - node_definition_id
        - created_ts
        - updated_ts
    NodeDefinitionReadResponse:
      type: object
      title: NodeDefinitionReadResponse
      description: Response model for reading a node definition.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          title: Data
          description: The node definition that was read.
          allOf:
            - $ref: '#/components/schemas/NodeDefinition'
      required:
        - status
        - data
    NodeDefinitionUpdateResponse:
      type: object
      title: NodeDefinitionUpdateResponse
      description: Response model for updating a node definition.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        config:
          title: Config
          description: The node definition that was updated.
          allOf:
            - $ref: '#/components/schemas/NodeDefinition'
      required:
        - status
        - config
    NodeDefinitionDeleteResponse:
      type: object
      title: NodeDefinitionDeleteResponse
      description: Response model for deleting a node definition.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          type: object
          title: Data
          description: Data related to the response.
          default: {}
      required:
        - status
    PatchNodeDefinition:
      type: object
      title: PatchNodeDefinition
      description: Model for patching node definitions.
      properties:
        node_definition_name:
          type: string
          title: Node Definition Name
          description: Name of the node definition.
        display_name:
          type: string
          title: Display Name
          description: Display name of the node definition.
        description:
          type: string
          title: Description
          description: Description of the model.
        node_group:
          type: string
          title: Node Group
          description: Group of the node definition.
        ui_config:
          title: Ui Config
          description: UI Config of the node definition.
          allOf:
            - $ref: '#/components/schemas/UIConfig'
        tags:
          type: array
          title: Tags
          description: Tags associated with the node definition.
          default: []
          items:
            type: string
        status:
          type: string
          title: Status
          description: Status of the node definition.
        user_id:
          type: string
          title: User Id
          description: This field describes the user id used to create node definition.
        deployment:
          type: object
          title: Deployment
          description: This field describes the deployment details of the node definition.
        preset:
          type: boolean
          title: Preset
          description: This field describes whether a node type is preset or not.
        runtime:
          description: ' This field describes the runtime of the node definition.'
          allOf:
            - $ref: '#/components/schemas/NodeDefinitionRuntime'
    NodeRegistration:
      type: object
      title: NodeRegistration
      description: Model for registering a node definition.
      properties:
        node_definition_id:
          type: string
          title: Node Definition Id
          description: ID of the node definition.
        node_definition_name:
          type: string
          title: Node Definition Name
          description: Name of the node definition.
        docker_image:
          type: string
          title: Docker Image
          description: Docker image of the node definition.
        deployment_details:
          type: object
          title: Deployment Details
          description: Deployment details of the node definition.
        runtime:
          description: The runtime of the node definition.
          allOf:
            - $ref: '#/components/schemas/NodeDefinitionRuntime'
      required:
        - node_definition_id
        - node_definition_name
        - docker_image
        - deployment_details
        - runtime
    NodeDefinitionRegisterResponse:
      type: object
      title: NodeDefinitionRegisterResponse
      description: Response model for registering a node definition.
      properties:
        request_id:
          type: string
          title: Request Id
          description: The unique identifier for the request.
        correlation_id:
          type: string
          title: Correlation Id
          description: The unique identifier for the correlation.
        status:
          description: The status of the request.
          allOf:
            - $ref: '#/components/schemas/RequestStatus'
        message:
          type: string
          title: Message
          description: The message for the response.
        data:
          type: object
          title: Data
          description: The response for node definition that was registered.
      required:
        - status
        - data
    NodeListingResponse:
      type: object
      title: NodeListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the list API. The output contains data about all nodes registered and their corresponding node IDs.
          allOf:
            - $ref: '#/components/schemas/NodeListingResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    NodeListingResponseValidation:
      type: object
      title: NodeListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of nodes that have been registered.
        results:
          type: array
          title: Results
          description: This field describes the list of nodes that have been registered.
          items:
            $ref: '#/components/schemas/NodeListingEntity'
      required:
        - count
        - results
    NodeListingEntity:
      type: object
      title: NodeListingEntity
      properties:
        node_id:
          type: string
          title: Node Id
          description: This field describes the identifier of the node.
        node_name:
          type: string
          title: Node Name
          description: This field describes the name of the node.
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the node.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the node.
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the node.
          default: []
          items:
            type: string
        node_type:
          type: string
          title: Node Type
          description: This field describes the type of the node belongs to.
      required:
        - node_id
        - node_name
        - created_ts
        - updated_ts
    Body_create_node_api_v1_nodes__post:
      type: object
      title: Body_create_node_api_v1_nodes__post
      properties:
        node_config:
          $ref: '#/components/schemas/Node'
        workflow_config:
          $ref: '#/components/schemas/Workflow'
      required:
        - node_config
        - workflow_config
    Node:
      type: object
      title: Node
      properties:
        node_name:
          type: string
          title: Node Name
          description: 'This field describes the name of the node provided by the user. '
        node_description:
          type: string
          title: Node Description
          description: This field provides a description about the node in the corresponding workflow.
        node_type:
          type: string
          title: Node Type
          description: 'This field describes the type of the node. The node can be a dataset node, transformation node in data workflows, model training / artifact / inference nodes in machine learning workflows and so on.'
        node_config:
          title: Node Config
          description: This field describes the metadata configurations that pertain to a node. The configurations can differ based on the type of the node itself.
          anyOf:
            - $ref: '#/components/schemas/ComputeDataset'
            - $ref: '#/components/schemas/DatasetNode'
            - $ref: '#/components/schemas/QueryForm'
            - $ref: '#/components/schemas/ConnectionNode'
            - $ref: '#/components/schemas/SourceNode'
            - $ref: '#/components/schemas/DestinationNode'
            - $ref: '#/components/schemas/IDPNode'
            - $ref: '#/components/schemas/Trainconv'
            - $ref: '#/components/schemas/TrArtifact'
            - $ref: '#/components/schemas/TrainconvLite'
            - $ref: '#/components/schemas/CustomCodeNode'
        input_cols:
          type: array
          title: Input Cols
          description: This field stores the details about input columns to a node if it is applicable. Storing this in node metadata aids in configuring sequential pipeline of any type of workflows.
          default: []
        output_cols:
          type: array
          title: Output Cols
          description: This field stores the details about output columns to a node if it is applicable. Output columns of a node in a workflow become the input columns in the succeeding node.
          default: []
        tags:
          type: array
          title: Tags
          description: his field describes any set of tags that can be associated to the node.
          default: []
          items:
            type: string
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
      required:
        - node_name
        - node_type
        - node_config
    ComputeDataset:
      type: object
      title: ComputeDataset
      properties:
        dataset_name:
          type: string
          title: Dataset Name
          description: This field describes the name that can be associated to the dataset node. This name will act as the alias for the dataset itself when building data workflows in the underlying queries that are generated.
        dataset:
          type: string
          title: Dataset
          description: It is a different key that is required for running workflows in spark through the starfire library. We will be merging this to the dataset field in subsequent releases.
        dataset_id:
          type: string
          title: Dataset Id
          description: This field describes the identifier of the dataset. This is the entry that will be in the dataset registry.
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        dataset_path:
          type: string
          title: Dataset Path
          description: This field describes the path that can be used to access the raw data in the dataset node.
          default: ''
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding dataset node. If it is not present, it will be created.'
          default: ''
        persist:
          type: boolean
          title: Persist
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the data.
          default: false
        path_type:
          type: string
          title: Path Type
          description: 'This field describes the type of path that can be specified in the dataset_path field. For data in delta tables it will be a directory path, and for csvs it will be a specific file path in any file system.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        file_type:
          description: This field describes the file_type of the data in the dataset.
          default: delta
          allOf:
            - $ref: '#/components/schemas/FileType'
        enable_s3_push:
          type: boolean
          title: Enable S3 Push
          description: 'This field enables push and pull policy for graph processing. If it is not present, it will be created.'
        use_s3_path:
          type: boolean
          title: Use S3 Path
          description: 'This field enables push and s3 policy for graph processing. If it is not present, it will be created.'
        persist_document:
          type: boolean
          title: Persist Document
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the documents.
          default: false
        node_type:
          type: string
          title: Node Type
          description: This field describes the node name for type
          default: ''
        node_name:
          type: string
          title: Node Name
          description: This field describes the node name for cloning
          default: ''
      required:
        - dataset_name
        - dataset
        - client
        - enable_s3_push
        - use_s3_path
    FileType:
      type: string
      enum:
        - csv
        - delta
        - parquet
        - json
      title: FileType
      description: An enumeration.
    DatasetNode:
      type: object
      title: DatasetNode
      properties:
        dataset_name:
          type: string
          title: Dataset Name
          description: This field describes the name that can be associated to the dataset node. This name will act as the alias for the dataset itself when building data workflows in the underlying queries that are generated.
        dataset:
          type: string
          title: Dataset
          description: It is a different key that is required for running workflows in spark through the starfire library. We will be merging this to the dataset field in subsequent releases.
        dataset_id:
          type: string
          title: Dataset Id
          description: This field describes the identifier of the dataset. This is the entry that will be in the dataset registry.
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        dataset_path:
          type: string
          title: Dataset Path
          description: This field describes the path that can be used to access the raw data in the dataset node.
          default: ''
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding dataset node. If it is not present, it will be created.'
          default: ''
        persist:
          type: boolean
          title: Persist
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the data.
          default: false
        path_type:
          type: string
          title: Path Type
          description: 'This field describes the type of path that can be specified in the dataset_path field. For data in delta tables it will be a directory path, and for csvs it will be a specific file path in any file system.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        file_type:
          description: This field describes the file_type of the data in the dataset.
          default: delta
          allOf:
            - $ref: '#/components/schemas/FileType'
        mode:
          description: This field describes the mode to persist the data in the dataset.
          default: overwrite
          allOf:
            - $ref: '#/components/schemas/WriteMode'
      required:
        - dataset_name
        - dataset
        - client
    WriteMode:
      type: string
      enum:
        - overwrite
        - append
      title: WriteMode
      description: An enumeration.
    QueryForm:
      type: object
      title: QueryForm
      properties:
        source_dataset:
          type: string
          title: Source Dataset
          description: This field describes the name of the dataset that will be the source / input for this query operation or transformation.
        sink_dataset:
          type: string
          title: Sink Dataset
          description: This field describes the name of the dataset that will be the sink / output of this query operation or transformation.
        query_type:
          type: string
          title: Query Type
          description: 'This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. '
        query_value:
          title: Query Value
          description: This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation.
          anyOf:
            - type: array
            - type: object
        additional_dataset:
          type: array
          title: Additional Dataset
          description: This is an optional field that represents any additional dataset(s) that are needed to execute the transformation.
          default: []
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding transformation node. If it is not present, it will be created.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
      required:
        - source_dataset
        - sink_dataset
        - query_type
        - query_value
    ConnectionNode:
      type: object
      title: ConnectionNode
      properties:
        connection_id:
          type: string
          title: Connection Id
          description: This field describes the identifier of connector hub's connection
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding connection node. If it is not present, it will be created.'
          default: ''
        connection_type:
          description: This field describes the connection_type of the corresponding connection node.
          default: ''
          allOf:
            - $ref: '#/components/schemas/ConnectionType'
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
      required:
        - connection_id
    ConnectionType:
      type: string
      enum:
        - ingress
        - egress
      title: ConnectionType
      description: An enumeration.
    SourceNode:
      type: object
      title: SourceNode
      properties:
        source_id:
          type: string
          title: Source Id
          description: This field describes the identifier of connector hub's source
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding source node. If it is not present, it will be created.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
      required:
        - source_id
    DestinationNode:
      type: object
      title: DestinationNode
      properties:
        destination_id:
          type: string
          title: Destination Id
          description: This field describes the identifier of connector hub's destination
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding destination node. If it is not present, it will be created.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
      required:
        - destination_id
    IDPNode:
      type: object
      title: IDPNode
      properties:
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding blur detection node. If it is not present, it will be created.'
          default: ''
        query_type:
          type: string
          title: Query Type
          description: 'This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. '
        query_value:
          title: Query Value
          description: This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation.
          anyOf:
            - type: array
            - type: object
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        input_columns:
          type: array
          title: Input Columns
          description: 'This field describes the field which has image url of the corresponding node. If it is not present, it will be created.'
          default: []
          items:
            type: string
        enable_s3_push:
          type: boolean
          title: Enable S3 Push
          description: 'This field enables push and pull policy for graph processing. If it is not present, it will be created.'
          default: false
        persist:
          type: boolean
          title: Persist
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the data.
          default: false
        mapping:
          type: object
          title: Mapping
          description: This field has the mapping of the fields that needs to mapped beefore returned
          additionalProperties:
            type: string
          default: {}
        persist_document:
          type: boolean
          title: Persist Document
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the documents.
          default: false
        model_path:
          type: string
          title: Model Path
          description: This field describes the s3 pickle path for learn inference node
          default: ''
        node_type:
          type: string
          title: Node Type
          description: This field describes the node type for cloning
          default: ''
        node_name:
          type: string
          title: Node Name
          description: This field describes the node name for cloning
          default: ''
        expressions:
          type: object
          title: Expressions
          description: This field is describes the expressions which are evaluted in metrics node
          default: ''
    Trainconv:
      type: object
      title: Trainconv
      properties:
        idp_sink_dataset:
          type: string
          title: Idp Sink Dataset
          description: Dataset Name to store output
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding es classifier node. If it is not present, it will be created.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        training_config:
          type: object
          title: Training Config
          description: 'This field describes the config needed for training. If it is not present, it will be created.'
        persist:
          type: boolean
          title: Persist
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the data.
          default: false
        node_type:
          type: string
          title: Node Type
          description: This field describes the node type for learn inference node
          default: ''
        node_name:
          type: string
          title: Node Name
          description: This field describes the node name for cloning
          default: ''
      required:
        - training_config
    TrArtifact:
      type: object
      title: TrArtifact
      properties:
        idp_sink_dataset:
          type: string
          title: Idp Sink Dataset
          description: Dataset Name to store output
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding es classifier node. If it is not present, it will be created.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        model_config:
          type: object
          title: Model Config
          description: 'This field describes the config needed for model prediction. If it is not present, it will be created.'
        persist:
          type: boolean
          title: Persist
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the data.
          default: false
        node_type:
          type: string
          title: Node Type
          description: This field describes the node type for learn inference node
          default: ''
        node_name:
          type: string
          title: Node Name
          description: This field describes the node name for cloning
          default: ''
      required:
        - model_config
    TrainconvLite:
      type: object
      title: TrainconvLite
      properties:
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding es classifier node. If it is not present, it will be created.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        training_config:
          type: object
          title: Training Config
          description: 'This field describes the config needed for training. If it is not present, it will be created.'
      required:
        - training_config
    CustomCodeNode:
      type: object
      title: CustomCodeNode
      properties:
        query_type:
          type: string
          title: Query Type
          description: 'This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. '
        query_value:
          title: Query Value
          description: This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation.
          anyOf:
            - type: array
            - type: object
        node_id:
          type: string
          title: Node Id
          description: 'This field describes the identifier of the corresponding transformation node. If it is not present, it will be created.'
          default: ''
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        persist:
          type: boolean
          title: Persist
          description: This field is a configuration that can be used in data workflows in dataset nodes to store the data.
          default: false
      required:
        - query_type
        - query_value
    Workflow:
      type: object
      title: Workflow
      properties:
        created_by:
          type: string
          title: Created By
          description: This field captures the id of the user who created the workflow.
        updated_by:
          type: string
          title: Updated By
          description: This field captures the id of the user who updated the workflow.
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes the name of the workflow.
        workflow_description:
          type: string
          title: Workflow Description
          description: This field provides a description about the workflow.
        owner:
          type: string
          title: Owner
          description: This field describes the service that owns / is responsible for this workflow.
          default: starfire
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the workflow.
          default: []
          items:
            type: string
        workflow_type:
          description: This field describes the type or the use case of the workflow.
          default: analytics
          allOf:
            - $ref: '#/components/schemas/app__schemas__workflows__WorkflowTypes'
        tasks_config:
          title: Tasks Config
          description: This field desribes the config that will be used by the spark or pandas deployments for a given task.
          allOf:
            - $ref: '#/components/schemas/WorkflowCreationConfig'
        internal:
          type: boolean
          title: Internal
          description: This field tracks whether the given workflow is an internal workflow or not.
          default: false
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a workflow is a preset workflow or not.
          default: false
        draft:
          type: boolean
          title: Draft
          description: This field describes whether the workflow is in draft state or not.
          default: false
        schedule_interval:
          type: string
          title: Schedule Interval
          description: This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment.
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated DAG (post deployment).
        datasets:
          type: object
          title: Datasets
          description: This field describes the datasets that are created by the workflow.
          default: {}
        deployment:
          type: object
          title: Deployment
          description: This field describes the deployment configuration for the workflow.
          default: {}
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        status:
          type: string
          title: Status
          description: This field describes the current status of the workflow
          default: DRAFT
        metrics_dataset:
          type: object
          title: Metrics Dataset
          description: This field describes about the metrics datasets
          default: {}
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        deploy_params:
          title: Deploy Params
          description: Parameters that were used for deploying the workflow.
          default: {}
          allOf:
            - $ref: '#/components/schemas/DeployParams'
        job_list:
          type: array
          title: Job List
          description: This field describes the list of job runs that are associated to the workflow.
          default: []
      required:
        - workflow_name
        - workflow_description
        - tasks_config
    app__schemas__workflows__WorkflowTypes:
      type: string
      enum:
        - idp
        - analytics
      title: WorkflowTypes
      description: This class describes the different types of workflows that exist.
    WorkflowCreationConfig:
      type: object
      title: WorkflowCreationConfig
      properties:
        workflow_form:
          type: array
          title: Workflow Form
          description: This field describes the workflow configuration that will be populated as per what is entered on the form interface in the canvas.
          default: []
          items:
            anyOf:
              - $ref: '#/components/schemas/ComputeDataset'
              - $ref: '#/components/schemas/DatasetNode'
              - $ref: '#/components/schemas/QueryForm'
              - $ref: '#/components/schemas/ConnectionNode'
              - $ref: '#/components/schemas/SourceNode'
              - $ref: '#/components/schemas/DestinationNode'
              - $ref: '#/components/schemas/IDPNode'
              - $ref: '#/components/schemas/Trainconv'
              - $ref: '#/components/schemas/TrArtifact'
              - $ref: '#/components/schemas/TrainconvLite'
              - $ref: '#/components/schemas/CustomCodeNode'
    DeployParams:
      type: object
      title: DeployParams
      properties:
        engine:
          type: string
          title: Engine
          description: Specifies the engine on which workflow has to be deployed.
        schedule_interval:
          type: string
          title: Schedule Interval
          description: 'Setup the schedule of the dag, if not specified its by default set to 2:30 PM run'
    NodeCreateResponse:
      type: object
      title: NodeCreateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the create API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response of the create API. The output is a dictionary that contains both the node ID (that is a unique reference to the registered node) and a workflow ID (that is a unique reference to the registered worflow that the node corresponds to).
          allOf:
            - $ref: '#/components/schemas/NodeCreateEntity'
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a node ID that can be used as a unique reference to this node.'
          allOf:
            - $ref: '#/components/schemas/NodeConfigValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
        - config
    NodeCreateEntity:
      type: object
      title: NodeCreateEntity
      properties:
        node_id:
          type: string
          title: Node Id
          description: This field describes the identifier of the node.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes the identifier of the workflow that the node corresponds to.
      required:
        - node_id
        - workflow_id
    NodeConfigValidation:
      type: object
      title: NodeConfigValidation
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the node.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the node.
        node_id:
          type: string
          title: Node Id
          description: This field describes the identifier of the node.
        node_name:
          type: string
          title: Node Name
          description: 'This field describes the name of the node provided by the user. '
        node_description:
          type: string
          title: Node Description
          description: This field provides a description about the node in the corresponding workflow.
        node_type:
          type: string
          title: Node Type
          description: 'This field describes the type of the node. The node can be a dataset node, transformation node in data workflows, model training / artifact / inference nodes in machine learning workflows and so on.'
        node_config:
          title: Node Config
          description: This field describes the metadata configurations that pertain to a node. The configurations can differ based on the type of the node itself.
          anyOf:
            - $ref: '#/components/schemas/ComputeDataset'
            - $ref: '#/components/schemas/DatasetNode'
            - $ref: '#/components/schemas/QueryForm'
            - $ref: '#/components/schemas/ConnectionNode'
            - $ref: '#/components/schemas/SourceNode'
            - $ref: '#/components/schemas/DestinationNode'
            - $ref: '#/components/schemas/IDPNode'
            - $ref: '#/components/schemas/Trainconv'
            - $ref: '#/components/schemas/TrArtifact'
            - $ref: '#/components/schemas/TrainconvLite'
            - $ref: '#/components/schemas/CustomCodeNode'
        input_cols:
          type: array
          title: Input Cols
          description: This field stores the details about input columns to a node if it is applicable. Storing this in node metadata aids in configuring sequential pipeline of any type of workflows.
          default: []
        output_cols:
          type: array
          title: Output Cols
          description: This field stores the details about output columns to a node if it is applicable. Output columns of a node in a workflow become the input columns in the succeeding node.
          default: []
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the node.
          default: []
          items:
            type: string
        dependent_node_ids:
          type: array
          title: Dependent Node Ids
          description: This field describes the list of node IDs that are dependent on the current node. This is used to build the workflow DAG.
          default: []
          items:
            type: string
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes the workflow if of the node
      required:
        - created_ts
        - updated_ts
        - node_id
        - node_name
        - node_type
        - node_config
    NodeReadResponse:
      type: object
      title: NodeReadResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the read API. The output contains all the metadata about the node that was registered during creation.
          allOf:
            - $ref: '#/components/schemas/NodeConfigValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    Body_update_node_api_v1_nodes__node_id__put:
      type: object
      title: Body_update_node_api_v1_nodes__node_id__put
      properties:
        node_config:
          $ref: '#/components/schemas/Node'
        workflow_config:
          $ref: '#/components/schemas/Workflow'
      required:
        - node_config
        - workflow_config
    NodeUpdateResponse:
      type: object
      title: NodeUpdateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a node ID that can be used as a unique reference to this node.'
          allOf:
            - $ref: '#/components/schemas/NodeConfigValidation'
        data:
          title: Data
          description: This field describes the response of the update API. The output is a dictionary that contains both the node ID (that is a unique reference to the updated node) and a workflow ID (that is a unique reference to the registered worflow that the node corresponds to).
          allOf:
            - $ref: '#/components/schemas/NodeCreateEntity'
      required:
        - status
        - request_id
        - correlation_id
        - config
        - data
    NodeDeleteResponse:
      type: object
      title: NodeDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the delete API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
      required:
        - status
        - request_id
        - correlation_id
    DeploymentConfig:
      type: object
      title: DeploymentConfig
      properties:
        id:
          type: string
          title: Id
          description: This field describes the ID of the deployment.
        status:
          type: string
          title: Status
          description: This field describes the deployment API response status.
        tag:
          type: string
          title: Tag
          description: This field describes the tag of the deployment.
        config:
          type: object
          title: Config
          description: This field describes the config of the deployment.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
      required:
        - tag
        - config
    WorkflowListingResponse:
      type: object
      title: WorkflowListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the list API. The output contains data about all workflows registered and their corresponding workflow IDs.
          allOf:
            - $ref: '#/components/schemas/WorkflowListingResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    WorkflowListingResponseValidation:
      type: object
      title: WorkflowListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of workflows that have been registered.
        results:
          type: array
          title: Results
          description: This field describes the list of workflows that have been registered.
          items:
            $ref: '#/components/schemas/WorkflowListingEntity'
      required:
        - count
        - results
    WorkflowListingEntity:
      type: object
      title: WorkflowListingEntity
      properties:
        created_by:
          type: string
          title: Created By
          description: This field captures the id of the user who created the workflow.
        updated_by:
          type: string
          title: Updated By
          description: This field captures the id of the user who updated the workflow.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes the identifier of the workflow.
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes the name of the workflow.
        workflow_type:
          type: string
          title: Workflow Type
          description: This field describes the type of the workflow.
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the workflow.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the workflow.
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the workflow.
          default: []
          items:
            type: string
        status:
          type: string
          title: Status
          description: This field provides a description about the workflow.
          default: DRAFT
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        job_list:
          type: array
          title: Job List
          description: This field describes the list of job runs that are associated to the workflow.
          default: []
      required:
        - workflow_id
        - workflow_name
        - workflow_type
        - created_ts
        - updated_ts
    CreateWorkflow:
      type: object
      title: CreateWorkflow
      properties:
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes the name of the workflow.
        workflow_description:
          type: string
          title: Workflow Description
          description: This field provides a description about the workflow.
        owner:
          type: string
          title: Owner
          description: This field describes the service that owns / is responsible for this workflow.
          default: starfire
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the workflow.
          default: []
          items:
            type: string
        workflow_type:
          description: This field describes the type or the use case of the workflow.
          default: analytics
          allOf:
            - $ref: '#/components/schemas/app__schemas__workflows__WorkflowTypes'
        tasks_config:
          title: Tasks Config
          description: This field desribes the config that will be used by the spark or pandas deployments for a given task.
          allOf:
            - $ref: '#/components/schemas/WorkflowCreationConfig'
        internal:
          type: boolean
          title: Internal
          description: This field tracks whether the given workflow is an internal workflow or not.
          default: false
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a workflow is a preset workflow or not.
          default: false
        draft:
          type: boolean
          title: Draft
          description: This field describes whether the workflow is in draft state or not.
          default: false
        schedule_interval:
          type: string
          title: Schedule Interval
          description: This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment.
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated DAG (post deployment).
        datasets:
          type: object
          title: Datasets
          description: This field describes the datasets that are created by the workflow.
          default: {}
        deployment:
          type: object
          title: Deployment
          description: This field describes the deployment configuration for the workflow.
          default: {}
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        status:
          type: string
          title: Status
          description: This field describes the current status of the workflow
          default: DRAFT
        metrics_dataset:
          type: object
          title: Metrics Dataset
          description: This field describes about the metrics datasets
          default: {}
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        deploy_params:
          title: Deploy Params
          description: Parameters that were used for deploying the workflow.
          default: {}
          allOf:
            - $ref: '#/components/schemas/DeployParams'
        job_list:
          type: array
          title: Job List
          description: This field describes the list of job runs that are associated to the workflow.
          default: []
      required:
        - workflow_name
        - workflow_description
        - tasks_config
    WorkflowCreateResponse:
      type: object
      title: WorkflowCreateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the create API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          type: string
          title: Data
          description: This field describes the response of the create API. The output is a workflow ID that is a unique reference to the registered workflow.
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a workflow ID that can be used as a unique reference to this workflow.'
          allOf:
            - $ref: '#/components/schemas/WorkflowConfigValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
        - config
    WorkflowConfigValidation:
      type: object
      title: WorkflowConfigValidation
      properties:
        created_by:
          type: string
          title: Created By
          description: This field captures the id of the user who created the workflow.
        updated_by:
          type: string
          title: Updated By
          description: This field captures the id of the user who updated the workflow.
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the workflow.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the workflow.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes a unique identifier of the workflow.
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes the name of the workflow.
        workflow_description:
          type: string
          title: Workflow Description
          description: This field provides a description about the workflow.
        workflow_type:
          description: This field describes the type or the use case of the workflow.
          allOf:
            - $ref: '#/components/schemas/app__schemas__workflows__WorkflowTypes'
        owner:
          type: string
          title: Owner
          description: This field describes the service that owns / is responsible for this workflow.
          default: starfire
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the workflow.
          default: []
          items:
            type: string
        tasks:
          type: object
          title: Tasks
          description: This field describes the config to setup the tasks for the DAG deployments.
          additionalProperties:
            $ref: '#/components/schemas/Task'
        tasks_config:
          title: Tasks Config
          description: This field desribes the config that will be used by the spark or pandas deployments for a given task.
          allOf:
            - $ref: '#/components/schemas/WorkflowCreationConfigValidation'
        internal:
          type: boolean
          title: Internal
          description: This field tracks whether the given workflow is an internal workflow or not.
          default: false
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a workflow is a preset workflow or not.
          default: false
        draft:
          type: boolean
          title: Draft
          description: This field describes whether the workflow is in draft state or not.
          default: false
        schedule_interval:
          type: string
          title: Schedule Interval
          description: This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment.
        dependencies:
          type: object
          title: Dependencies
          description: This field is a dictionary with node id as key and the parent and child node of that node as values.
        datasets:
          type: object
          title: Datasets
          description: This field describes the datasets that are created by the workflow.
          default: {}
        deployment:
          type: object
          title: Deployment
          description: This field describes the deployment configuration for the workflow.
          default: {}
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the workflow.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        metrics_dataset:
          type: object
          title: Metrics Dataset
          description: This field describes about the metrics datasets
          default: {}
        deploy_params:
          title: Deploy Params
          description: Parameters that were used for deploying the workflow.
          default: {}
          allOf:
            - $ref: '#/components/schemas/DeployParams'
        job_list:
          type: array
          title: Job List
          description: This field describes the list of job runs that are associated to the workflow.
          default: []
      required:
        - created_ts
        - updated_ts
        - workflow_name
        - workflow_description
        - workflow_type
        - tasks_config
    Task:
      type: object
      title: Task
      properties:
        task_type:
          type: string
          title: Task Type
          description: 'type of dask, Databricks, Bash'
        depends_on_past:
          type: boolean
          title: Depends On Past
          description: 'if it depends on the past runs of this task, will execute only if old instances were success'
          default: false
        pool:
          type: string
          title: Pool
          description: Airflow pools id to which this task belongs
        retries:
          type: integer
          title: Retries
          description: Number of time to retry a task before failing
          default: 1
        python_params:
          type: array
          title: Python Params
          description: python params for the job
          items:
            type: string
        notebook_params:
          type: object
          title: Notebook Params
          description: Notebook params for the job
          additionalProperties:
            type: string
    WorkflowCreationConfigValidation:
      type: object
      title: WorkflowCreationConfigValidation
      properties:
        data_handler:
          type: object
          title: Data Handler
          description: This field describes the metadata configuration about the data handler that describes information about the file and the type of data that we deal with in this workflow configuration.
          additionalProperties:
            $ref: '#/components/schemas/FileInfo'
        workflow_form:
          type: array
          title: Workflow Form
          description: This field describes the workflow configuration that will be populated as per what is entered on the form interface in the canvas.
          default: []
          items:
            anyOf:
              - $ref: '#/components/schemas/ComputeDataset'
              - $ref: '#/components/schemas/DatasetNode'
              - $ref: '#/components/schemas/QueryForm'
              - $ref: '#/components/schemas/ConnectionNode'
              - $ref: '#/components/schemas/SourceNode'
              - $ref: '#/components/schemas/DestinationNode'
              - $ref: '#/components/schemas/IDPNode'
              - $ref: '#/components/schemas/Trainconv'
              - $ref: '#/components/schemas/TrArtifact'
              - $ref: '#/components/schemas/TrainconvLite'
              - $ref: '#/components/schemas/CustomCodeNode'
        workflow:
          type: array
          title: Workflow
          description: This field describes the workflow configuration that is mapped to the workflow_form field. We currently handle this mapping for compatability between the spark and pandas deployments. It will be merged to one variable in the upcoming releases.
          default: []
          items:
            anyOf:
              - $ref: '#/components/schemas/ComputeDataset'
              - $ref: '#/components/schemas/DatasetNode'
              - $ref: '#/components/schemas/QueryNode'
              - $ref: '#/components/schemas/ConnectionNode'
              - $ref: '#/components/schemas/SourceNode'
              - $ref: '#/components/schemas/DestinationNode'
              - $ref: '#/components/schemas/IDPNode'
              - $ref: '#/components/schemas/Trainconv'
              - $ref: '#/components/schemas/TrArtifact'
              - $ref: '#/components/schemas/TrainconvLite'
              - $ref: '#/components/schemas/CustomCodeNode'
        job_config:
          title: Job Config
          description: This field describes the job config that is used for workflow creation and execution.
          default:
            job_template: starfire_vizsql
            instance_pool_template_key: starfire
          allOf:
            - $ref: '#/components/schemas/JobConfig'
    FileInfo:
      type: object
      title: FileInfo
      properties:
        file_type:
          type: string
          title: File Type
          description: 'type of file delta, parquet, csv'
        file_path:
          type: string
          title: File Path
          description: path to the file
        mode:
          type: string
          title: Mode
          description: 'Mode used to write the file, append, overwrite'
          default: overwrite
        df_type:
          type: string
          title: Df Type
        field_mapping:
          type: array
          title: Field Mapping
          description: field mapping to rename columns of some table
          default: []
          items:
            $ref: '#/components/schemas/FieldMapping'
        partitionBy:
          type: string
          title: Partitionby
          description: partition the data before saving using this column
          default: ''
        overwriteSchema:
          type: string
          title: Overwriteschema
          description: overwrite the schema or not
          default: 'false'
      required:
        - file_type
        - file_path
    FieldMapping:
      type: object
      title: FieldMapping
      properties:
        field_in_data:
          type: string
          title: Field In Data
        field_it_should_be:
          type: string
          title: Field It Should Be
      required:
        - field_in_data
        - field_it_should_be
    QueryNode:
      type: object
      title: QueryNode
      properties:
        source_dataset:
          type: string
          title: Source Dataset
          description: This field describes the name of the dataset that will be the source / input for this query operation or transformation.
        sink_dataset:
          type: string
          title: Sink Dataset
          description: This field describes the name of the dataset that will be the sink / output of this query operation or transformation.
        query_type:
          type: string
          title: Query Type
          description: 'This field describes the type of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Some of the examples of data transformation queries are filter, select, join, groupby, custom queries etc. '
        query_dict:
          title: Query Dict
          description: This field is a json representation of the query itself. It will provide configurations about the nature of the query that will be executed on the input (source_dataset) to obtain the output (sink_dataset). Different types of queries will have different formats of the metadata or configurations required to execute the transformation.
          anyOf:
            - type: array
            - type: object
        additional_dataset:
          type: array
          title: Additional Dataset
          description: This is an optional field that represents any additional dataset(s) that are needed to execute the transformation.
          default: []
      required:
        - source_dataset
        - sink_dataset
        - query_type
        - query_dict
    JobConfig:
      type: object
      title: JobConfig
      properties:
        job_template:
          type: string
          title: Job Template
          description: This field describes the job template that is used for workflow execution. The job template can be accessed using this key to query stephanie.
          default: starfire_vizsql
        instance_pool_template_key:
          type: string
          title: Instance Pool Template Key
          description: This field describes the name of the instance pool in databricks. All starfire jobs run on the instance pool template that can be accessed using this key to query stephanie.
          default: starfire
    WorkflowValidationResponse:
      type: object
      title: WorkflowValidationResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the read API. The output contains all the metadata about the workflow that was registered during creation.
          allOf:
            - $ref: '#/components/schemas/WorkflowValidationEntity'
      required:
        - status
        - request_id
        - correlation_id
        - data
    WorkflowValidationEntity:
      type: object
      title: WorkflowValidationEntity
      properties:
        message:
          type: string
          title: Message
          description: This field shows a short message about the output of the API.
      required:
        - message
    WorkflowDeployResponse:
      type: object
      title: WorkflowDeployResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the deploy API. The output contains all the metadata about the deployed workflow.
          anyOf:
            - $ref: '#/components/schemas/WorkflowDeployEntity'
            - $ref: '#/components/schemas/WorkflowIdpDeployEntity'
      required:
        - status
        - request_id
        - correlation_id
        - data
    WorkflowDeployEntity:
      type: object
      title: WorkflowDeployEntity
      properties:
        message:
          type: string
          title: Message
          description: This field shows a short message about the output of the API.
        dag_id:
          type: string
          title: Dag Id
          description: This field describes the unique reference to the deployed DAG.
      required:
        - message
        - dag_id
    WorkflowIdpDeployEntity:
      type: object
      title: WorkflowIdpDeployEntity
      properties:
        idp_processor_graph_id:
          type: string
          title: Idp Processor Graph Id
          description: This field describes the unique identifier for the generated IDP processor graph.
        idp_processor_packet_id:
          type: string
          title: Idp Processor Packet Id
          description: This field describes the unique identifier for the generated IDP processor packet.
      required:
        - idp_processor_graph_id
        - idp_processor_packet_id
    Body_deploy_workflow_v2_api_v1_workflow_deploy_v2_post:
      type: object
      title: Body_deploy_workflow_v2_api_v1_workflow_deploy_v2_post
      properties:
        nodes:
          type: object
          title: Nodes
        workflow:
          type: array
          title: Workflow
        workflow_form:
          type: array
          title: Workflow Form
        workflow_type:
          type: string
          title: Workflow Type
      required:
        - nodes
        - workflow
        - workflow_form
        - workflow_type
    WorkflowRunResponse:
      type: object
      title: WorkflowRunResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the run API. The output contains all the metadata about the execution of the deployed workflow.
          allOf:
            - $ref: '#/components/schemas/WorkflowDagRun'
      required:
        - status
        - request_id
        - correlation_id
        - data
    WorkflowDagRun:
      type: object
      title: WorkflowDagRun
      properties:
        job_id:
          type: string
          title: Job Id
          description: This field describes the unique identifier for the generated DAG run.
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated DAG.
      required:
        - job_id
        - graph_id
    WorkflowSpeedrunRequest:
      type: object
      title: WorkflowSpeedrunRequest
      properties:
        workflow:
          title: Workflow
          description: Describes the input to the speedrun API - can either be the workflow ID or the workflow graph.
          anyOf:
            - $ref: '#/components/schemas/WorkflowSpeedrunFromSubgraph'
            - $ref: '#/components/schemas/WorkflowSpeedrunFromID'
        parameters:
          title: Parameters
          description: Parameters for the speedrun.
          default:
            use_sample_data: true
            num_records: 1000
          allOf:
            - $ref: '#/components/schemas/SpeedrunParams'
      required:
        - workflow
    WorkflowSpeedrunFromSubgraph:
      type: object
      title: WorkflowSpeedrunFromSubgraph
      properties:
        graph:
          type: array
          title: Graph
          description: This field describes a sub-workflow input to for synchronous execution.
          items:
            anyOf:
              - $ref: '#/components/schemas/DatasetNode'
              - $ref: '#/components/schemas/QueryForm'
      required:
        - graph
    WorkflowSpeedrunFromID:
      type: object
      title: WorkflowSpeedrunFromID
      properties:
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes the identifier of the workflow that will be used to fetch the workflow for synchronous execution
      required:
        - workflow_id
    SpeedrunParams:
      type: object
      title: SpeedrunParams
      properties:
        use_sample_data:
          type: boolean
          title: Use Sample Data
          description: Specifies whether to use sample data or not.
          default: true
        num_records:
          type: integer
          title: Num Records
          description: Specifies the number of records to return as part of the speedrun response.
          default: 1000
    WorkflowSpeedrunResponse:
      type: object
      title: WorkflowSpeedrunResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          type: object
          title: Data
          description: This field describes the response data of the speedrun API. The output contains all the metadata about the models and/or datasets that were generated during the workflow execution.
      required:
        - status
        - request_id
        - correlation_id
        - data
    Body_process_packet_workflow_api_v1_workflow_process_packet_post:
      type: object
      title: Body_process_packet_workflow_api_v1_workflow_process_packet_post
      properties:
        workflow:
          $ref: '#/components/schemas/WorkflowSpeedrunFromID'
        packet:
          type: object
          title: Packet
      required:
        - workflow
        - packet
    WorkflowStatusResponse:
      type: object
      title: WorkflowStatusResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          type: object
          title: Data
          description: This field describes the response data of the status API. The output contains metadata about the status of the executed workflow.
      required:
        - status
        - request_id
        - correlation_id
        - data
    WorkflowUndeployResponse:
      type: object
      title: WorkflowUndeployResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          type: object
          title: Data
          description: This field describes the response data of the undeploy API. The output contains metadata about the status of the workflow being undeployed.
      required:
        - status
        - request_id
        - correlation_id
        - data
    WorkflowReadResponse:
      type: object
      title: WorkflowReadResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the response data of the read API. The output contains all the metadata about the workflow that was registered during creation.
          allOf:
            - $ref: '#/components/schemas/WorkflowConfigValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    WorkflowUpdateResponse:
      type: object
      title: WorkflowUpdateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a workflow ID that can be used as a unique reference to this workflow.'
          allOf:
            - $ref: '#/components/schemas/WorkflowConfigValidation'
      required:
        - status
        - request_id
        - correlation_id
        - config
    WorkflowDeleteResponse:
      type: object
      title: WorkflowDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the delete API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
      required:
        - status
        - request_id
        - correlation_id
    WorkflowPatch:
      type: object
      title: WorkflowPatch
      properties:
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes the name of the workflow.
        workflow_description:
          type: string
          title: Workflow Description
          description: This field provides a description about the workflow.
        owner:
          type: string
          title: Owner
          description: This field describes the service that owns / is responsible for this workflow.
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the workflow.
          items:
            type: string
        workflow_type:
          description: This field describes the type or the use case of the workflow.
          allOf:
            - $ref: '#/components/schemas/app__schemas__workflows__WorkflowTypes'
        tasks_config:
          title: Tasks Config
          description: This field desribes the config that will be used by the spark or pandas deployments for a given task.
          allOf:
            - $ref: '#/components/schemas/WorkflowCreationConfig'
        internal:
          type: boolean
          title: Internal
          description: This field tracks whether the given workflow is an internal workflow or not.
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a workflow is a preset workflow or not.
        draft:
          type: boolean
          title: Draft
          description: This field describes whether the workflow is in draft state or not.
        schedule_interval:
          type: string
          title: Schedule Interval
          description: This field is a cron-syntax compatible string that denotes the schedule interval for the workflow that will be used post deployment.
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated DAG (post deployment).
        datasets:
          type: object
          title: Datasets
          description: This field describes the datasets that are created by the workflow.
        deployment:
          type: object
          title: Deployment
          description: This field describes the deployment configuration for the workflow.
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the workflow.
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the workflow.
          items:
            $ref: '#/components/schemas/EntityUserGroup'
        status:
          type: string
          title: Status
          description: This field describes the current status of the workflow
        job_list:
          type: array
          title: Job List
          description: This field describes the list of job runs that are associated to the workflow.
    JobCreate:
      type: object
      title: JobCreate
      properties:
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes a unique identifier of the workflow.
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes a unique identifier of the workflow.
        workflow_type:
          description: This field describes the type of base workflow.
          allOf:
            - $ref: '#/components/schemas/app__schemas__jobs__WorkflowTypes'
        job_name:
          type: string
          title: Job Name
          description: This field describes the unique identifier for the generated Graph (post deployment).
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        packet_id:
          type: string
          title: Packet Id
          description: This field describes the packet_id/run_id corresponding to the job.
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        status:
          type: string
          title: Status
          description: This field describes the current status of the job
          default: IN_PROGRESS
        node_level_status:
          type: array
          title: Node Level Status
          description: This field describes the status of each node corresponding to the job.
    app__schemas__jobs__WorkflowTypes:
      type: string
      enum:
        - idp
        - analytics
      title: WorkflowTypes
      description: This class describes the different types of workflows that exist.
    JobReadResponse:
      type: object
      title: JobReadResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          title: Data
          description: This field describes the response data of the read API. The output contains all the metadata about the job that was registered during creation.
          allOf:
            - $ref: '#/components/schemas/JobConfigValidation'
      required:
        - status
        - data
    JobConfigValidation:
      type: object
      title: JobConfigValidation
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the job.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the job.
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes a unique identifier of the workflow.
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes a unique identifier of the workflow.
        job_id:
          type: string
          title: Job Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        job_name:
          type: string
          title: Job Name
          description: This field describes the unique identifier for the generated Graph (post deployment).
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        status:
          type: string
          title: Status
          description: This field describes the current status of the job
          default: IN_PROGRESS
        packet_id:
          type: string
          title: Packet Id
          description: This field describes the packet_id/run_id corresponding to the job.
        workflow_type:
          description: This field describes the type of base workflow.
          default: idp
          allOf:
            - $ref: '#/components/schemas/app__schemas__jobs__WorkflowTypes'
        node_level_status:
          type: array
          title: Node Level Status
          description: This field describes the status of each node corresponding to the job.
          default: []
        processing_time:
          type: integer
          title: Processing Time
          description: This field describes the processing time taken by the job.
      required:
        - created_ts
        - updated_ts
    JobPatch:
      type: object
      title: JobPatch
      properties:
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes a unique identifier of the workflow.
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes a unique identifier of the workflow.
        job_id:
          type: string
          title: Job Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        job_name:
          type: string
          title: Job Name
          description: This field describes the unique identifier for the generated Graph (post deployment).
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        status:
          type: string
          title: Status
          description: This field describes the current status of the job
        packet_id:
          type: string
          title: Packet Id
          description: This field describes the packet_id/run_id corresponding to the job.
        workflow_type:
          description: This field describes the type of base workflow.
          allOf:
            - $ref: '#/components/schemas/app__schemas__jobs__WorkflowTypes'
        node_level_status:
          type: array
          title: Node Level Status
          description: This field describes the status of each node corresponding to the job.
        processing_time:
          type: integer
          title: Processing Time
          description: This field describes the processing time taken by the job.
    JobUpdateResponse:
      type: object
      title: JobUpdateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset.'
          allOf:
            - $ref: '#/components/schemas/Job'
      required:
        - status
        - config
    Job:
      type: object
      title: Job
      properties:
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes a unique identifier of the workflow.
        workflow_name:
          type: string
          title: Workflow Name
          description: This field describes a unique identifier of the workflow.
        job_id:
          type: string
          title: Job Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        job_name:
          type: string
          title: Job Name
          description: This field describes the unique identifier for the generated Graph (post deployment).
        graph_id:
          type: string
          title: Graph Id
          description: This field describes the unique identifier for the generated Graph (post deployment).
        client:
          type: string
          title: Client
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        status:
          type: string
          title: Status
          description: This field describes the current status of the job
          default: IN_PROGRESS
        packet_id:
          type: string
          title: Packet Id
          description: This field describes the packet_id/run_id corresponding to the job.
        workflow_type:
          description: This field describes the type of base workflow.
          default: idp
          allOf:
            - $ref: '#/components/schemas/app__schemas__jobs__WorkflowTypes'
        node_level_status:
          type: array
          title: Node Level Status
          description: This field describes the status of each node corresponding to the job.
          default: []
        processing_time:
          type: integer
          title: Processing Time
          description: This field describes the processing time taken by the job.
    JobPayloadResponse:
      type: object
      title: JobPayloadResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        workflow_id:
          type: string
          title: Workflow Id
          description: This field describes a unique identifier of the workflow.
        use_dataset_api:
          type: boolean
          title: Use Dataset Api
          description: This field describes if the job uses dataset api.
        use_stephanie:
          type: boolean
          title: Use Stephanie
          description: This field describes if the job uses stephanie.
        graph_payload:
          type: object
          title: Graph Payload
          description: This field describes the payload of the job
        client_id:
          type: string
          title: Client Id
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
        client_name:
          type: string
          title: Client Name
          description: This field describes the client details required for the data. This information will be needed to access any client-specific data.
      required:
        - status
    NodePayloadResponse:
      type: object
      title: NodePayloadResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          title: Data
          description: This field describes the payload of the job
      required:
        - status
    ActionCreateRequest:
      type: object
      title: ActionCreateRequest
      properties:
        name:
          type: string
          title: Name
          description: Field is required
          minLength: 1
        description:
          type: string
          title: Description
          description: Field is required
          minLength: 1
        parameters:
          title: Parameters
          description: Field is required
          allOf:
            - $ref: '#/components/schemas/ParametersModel'
        workflow_id:
          type: string
          title: Workflow Id
          description: Field is required
          minLength: 1
        created_at:
          type: string
          title: Created At
          description: Timestamp when the action is created
          default: NOW()
        updated_at:
          type: string
          title: Updated At
          description: Timestamp when the action is last updated
          default: NOW()
      required:
        - name
        - description
        - parameters
        - workflow_id
    ParametersModel:
      type: object
      title: ParametersModel
      properties:
        type:
          type: string
          title: Type
          description: Field is required
          minLength: 1
          default: object
        properties:
          type: object
          title: Properties
          description: Field is required
      required:
        - properties
    ChatBase:
      type: object
      title: ChatBase
      properties:
        name:
          type: string
          title: Name
          default: New Chat
    ChatCreateResponse:
      type: object
      title: ChatCreateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the list of chats.
          allOf:
            - $ref: '#/components/schemas/ChatCreateResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    ChatCreateResponseValidation:
      type: object
      title: ChatCreateResponseValidation
      properties:
        chatId:
          type: string
          title: Chatid
        name:
          type: string
          title: Name
        message:
          type: string
          title: Message
          default: ''
      required:
        - chatId
        - name
    ChatListingResponse:
      type: object
      title: ChatListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the list of chats.
          allOf:
            - $ref: '#/components/schemas/ChatListingResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    ChatListingResponseValidation:
      type: object
      title: ChatListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of chats
        results:
          type: array
          title: Results
          description: This field describes the list of chats
          items:
            $ref: '#/components/schemas/ChatListResponse'
      required:
        - count
        - results
    ChatListResponse:
      type: object
      title: ChatListResponse
      properties:
        id:
          type: string
          title: Id
        name:
          type: string
          title: Name
        userId:
          type: string
          title: Userid
        accountId:
          type: string
          title: Accountid
        created_at:
          type: string
          title: Created At
          description: This field describes the created date of chat.
        updated_at:
          type: string
          title: Updated At
          description: This field describes the latest date of updation of the chat.
      required:
        - id
        - name
        - userId
        - accountId
        - created_at
        - updated_at
    ChatMessagesResponse:
      type: object
      title: ChatMessagesResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the list of messages.
          allOf:
            - $ref: '#/components/schemas/ChatMessagesResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    ChatMessagesResponseValidation:
      type: object
      title: ChatMessagesResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of messages
        results:
          type: array
          title: Results
          description: This field describes the list of messages
          items:
            $ref: '#/components/schemas/MessagesResponse'
      required:
        - count
        - results
    MessagesResponse:
      type: object
      title: MessagesResponse
      properties:
        id:
          type: string
          title: Id
        chat_id:
          type: string
          title: Chat Id
          description: This field describes the chatId the message.
        role:
          type: string
          title: Role
          description: This field describes the senderId the message.
        message:
          type: string
          title: Message
          description: This field describes the content the message.
        timestamp:
          type: integer
          title: Timestamp
          description: This field describes the timestamp of message.
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
          default: Complete
      required:
        - id
        - chat_id
        - role
        - message
        - timestamp
    ChatDeleteResponse:
      type: object
      title: ChatDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        message:
          type: string
          title: Message
          description: This field describes the message for API response.
      required:
        - status
        - request_id
        - correlation_id
        - message
    ChatMessage:
      type: object
      title: ChatMessage
      properties:
        content:
          type: string
          title: Content
        sender:
          type: string
          title: Sender
        ui_context:
          type: object
          title: Ui Context
      required:
        - content
        - sender
    AddMessagesResponse:
      type: object
      title: AddMessagesResponse
      properties:
        data:
          title: Data
          description: This field describes the data of messages.
          allOf:
            - $ref: '#/components/schemas/AddMessagesResponseValidation'
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
      required:
        - data
        - request_id
        - correlation_id
        - status
    AddMessagesResponseValidation:
      type: object
      title: AddMessagesResponseValidation
      properties:
        job_id:
          type: string
          title: Job Id
      required:
        - job_id
    app__schemas__chat__CompletionsMessagesResponse:
      type: object
      title: CompletionsMessagesResponse
      properties:
        data:
          type: array
          title: Data
          description: This field describes the list of messages.
          items:
            $ref: '#/components/schemas/MessagesResponse'
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
      required:
        - data
        - request_id
        - correlation_id
        - status
    AgentBase:
      type: object
      title: AgentBase
      properties:
        name:
          type: string
          title: Name
          description: Name of the agent
        instructions:
          type: string
          title: Instructions
          description: Instructions of the agent
        workflow_id:
          type: string
          title: Workflow Id
          description: workflow id of the agent
        dataset_id:
          type: string
          title: Dataset Id
          description: dataset id of the agent
        model_config:
          type: object
          title: Model Config
          description: LLM model config to be used by the agent
        actions:
          type: array
          title: Actions
          description: Actions of the agent
        files:
          type: array
          title: Files
          description: Files of the agent
      required:
        - name
        - model_config
    AgentUpdate:
      type: object
      title: AgentUpdate
      properties:
        name:
          type: string
          title: Name
        instructions:
          type: string
          title: Instructions
        model_config:
          type: object
          title: Model Config
        hasSearchContext:
          type: boolean
          title: Hassearchcontext
        actions:
          type: array
          title: Actions
          items:
            type: string
        files:
          type: array
          title: Files
          items:
            type: string
    app__schemas__agents__CompletionsMessagesResponse:
      type: object
      title: CompletionsMessagesResponse
      properties:
        data:
          type: array
          title: Data
          description: This field describes the list of messages.
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
      required:
        - data
        - status
    NotificationBase:
      type: object
      title: NotificationBase
      properties:
        title:
          type: string
          title: Title
        body:
          type: string
          title: Body
        icon:
          type: string
          title: Icon
          default: ''
        url:
          type: string
          title: Url
          default: ''
        priority:
          type: string
          title: Priority
        chatId:
          type: string
          title: Chatid
        messageId:
          type: string
          title: Messageid
          default: ''
      required:
        - title
        - body
        - priority
        - chatId
    NotificationCreateResponse:
      type: object
      title: NotificationCreateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
        data:
          title: Data
          description: This field describes the list of notifications.
          allOf:
            - $ref: '#/components/schemas/NotificationCreateResponseValidation'
      required:
        - status
        - request_id
        - correlation_id
        - data
    NotificationCreateResponseValidation:
      type: object
      title: NotificationCreateResponseValidation
      properties:
        notification_id:
          type: string
          title: Notification Id
      required:
        - notification_id
    ListConnectorsResponse:
      type: object
      title: ListConnectorsResponse
      description: |-
        List Connectors Response Model

        Attributes:
        - data: List[ListConnectorEntry]
      properties:
        request_id:
          type: string
          title: Request Id
          description: This field describes the request id of the request
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation id of the request
        count:
          type: integer
          title: Count
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/ListConnectorEntry'
      required:
        - count
        - data
    ListConnectorEntry:
      type: object
      title: ListConnectorEntry
      description: |-
        List Connector Entry Model

        Attributes:
        - connectionId: str
        - name: str
        - status: Optional[ConnectorStatus]
        - sourceId: str
        - destinationId: str
        - source_name: Optional[str]
        - destination_name: Optional[str]
        - scheduleType: Optional[scheduleType]
        - source_type: Optional[str]
        - source_type_id: Optional[str]
        - destination_type: Optional[str]
        - destination_type_id: Optional[str]
        - last_triggered_at: Optional[str]
        - workspaceId: str
        - created_ts: str
        - updated_ts: str
      properties:
        connectionId:
          type: string
          title: Connectionid
        name:
          type: string
          title: Name
        status:
          $ref: '#/components/schemas/ConnectorStatus'
        sourceId:
          type: string
          title: Sourceid
        destinationId:
          type: string
          title: Destinationid
        source_name:
          type: string
          title: Source Name
        destination_name:
          type: string
          title: Destination Name
        scheduleType:
          $ref: '#/components/schemas/scheduleType'
        source_type:
          type: string
          title: Source Type
        source_type_id:
          type: string
          title: Source Type Id
        destination_type:
          type: string
          title: Destination Type
        destination_type_id:
          type: string
          title: Destination Type Id
        last_triggered_at:
          type: string
          title: Last Triggered At
        last_attempt_status:
          $ref: '#/components/schemas/ConnectorRunStatus'
        workspaceId:
          type: string
          title: Workspaceid
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
      required:
        - connectionId
        - name
        - sourceId
        - destinationId
        - workspaceId
        - created_ts
        - updated_ts
    ConnectorStatus:
      type: string
      enum:
        - active
        - inactive
        - deprecated
      title: ConnectorStatus
      description: |-
        Enum for Connector Status

        Attributes:
        - active: str
        - inactive: str
        - deprecated: str
    scheduleType:
      type: string
      enum:
        - manual
        - basic
        - cron
      title: scheduleType
      description: |-
        Enum for Schedule Type

        Attributes:
        - manual: str
        - basic: str
        - cron: str
    ConnectorRunStatus:
      type: string
      enum:
        - PENDING
        - RUNNING
        - COMPLETED
        - FAILED
        - CANCELLING
        - CANCELLED
      title: ConnectorRunStatus
      description: |-
        Enum for Connector Run Status

        Attributes:
        - pending: str
        - running: str
        - completed: str
        - failed: str
        - cancelling: str
        - cancelled: str
    CreateConnector:
      type: object
      title: CreateConnector
      description: |-
        Create Connector Model

        Attributes:
        - name: str
        - is_internal: bool
        - preset: bool
        - sourceId: str
        - destinationId: str
        - streamsToSync: Optional[List[streamConfig]]
        - resourceRequirements: Optional[ResourceRequirements]
        - status: Optional[ConnectorStatus]
        - consistency_sync : bool
        - description: Optional[str]
      properties:
        schedule:
          $ref: '#/components/schemas/Schedule'
        scheduleType:
          $ref: '#/components/schemas/scheduleType'
        scheduleData:
          $ref: '#/components/schemas/ScheduleData'
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
          default: false
        preset:
          type: boolean
          title: Preset
          default: false
        sourceId:
          type: string
          title: Sourceid
        destinationId:
          type: string
          title: Destinationid
        streamsToSync:
          type: array
          title: Streamstosync
          items:
            $ref: '#/components/schemas/streamConfig'
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
        status:
          $ref: '#/components/schemas/ConnectorStatus'
        consistency_sync:
          type: boolean
          title: Consistency Sync
          default: false
        description:
          type: string
          title: Description
      required:
        - name
        - sourceId
        - destinationId
    Schedule:
      type: object
      title: Schedule
      description: |-
        Schedule Model

        Attributes:
        - units: int
        - timeUnit: timeUnit
      properties:
        units:
          type: integer
          title: Units
        timeUnit:
          $ref: '#/components/schemas/timeUnit'
      required:
        - units
        - timeUnit
    timeUnit:
      type: string
      enum:
        - minutes
        - hours
        - days
        - weeks
        - months
      title: timeUnit
      description: |-
        Enum for Time Units

        Attributes:
        - minutes: str
        - hours: str
        - days: str
        - weeks: str
        - months: str
    ScheduleData:
      type: object
      title: ScheduleData
      description: |-
        Schedule Data Model

        Attributes:
        basicSchedule: Optional[Schedule]
        cron: Optional[CronSchedule]
      properties:
        basicSchedule:
          $ref: '#/components/schemas/Schedule'
        cron:
          $ref: '#/components/schemas/CronSchedule'
    CronSchedule:
      type: object
      title: CronSchedule
      description: |-
        Cron Schedule Model

        Attributes:
        - cronExpression: str
        - cronTimeZone: str
      properties:
        cronExpression:
          type: string
          title: Cronexpression
        cronTimeZone:
          type: string
          title: Crontimezone
      required:
        - cronExpression
        - cronTimeZone
    streamConfig:
      type: object
      title: streamConfig
      description: |-
        Stream Config Model

        Attributes:
        - dataset_id: Optional[str]
        - dataset_config: Optional[DatasetConfig]
        + All attributes from baseStreamConfig
      properties:
        streamName:
          type: string
          title: Streamname
        syncMode:
          $ref: '#/components/schemas/syncModes'
        destinationSyncMode:
          $ref: '#/components/schemas/destinationSyncModes'
        cursorField:
          type: array
          title: Cursorfield
          description: Path to the field that will be used to determine if a record is new or modified since the last sync.
          items:
            type: string
          depends_on: syncMode
        dataset_id:
          type: string
          title: Dataset Id
          description: Dataset ID for the stream
        dataset_config:
          title: Dataset Config
          description: Dataset configuration for the stream
          allOf:
            - $ref: '#/components/schemas/DatasetConfig'
      required:
        - streamName
    syncModes:
      type: string
      enum:
        - full_refresh
        - incremental
      title: syncModes
      description: |-
        Enum for Sync Modes

        Attributes:
        - full_refresh: str
        - incremental: str
    destinationSyncModes:
      type: string
      enum:
        - append
        - overwrite
        - append_dedup
      title: destinationSyncModes
      description: |-
        Enum for Destination Sync Modes

        Attributes:
        - append: str
        - overwrite: str
        - append_dedup: str
    DatasetConfig:
      type: object
      title: DatasetConfig
      description: |-
        Dataset Config Model

        Attributes:
        - dataset_name: str
        - access_modes: List[DatasetAccessMode]
        - dataset_description: Optional[str]
        - dataset_schema: Optional[DatasetField]
        - dataset_group: Optional[str]
      properties:
        dataset_name:
          type: string
          title: Dataset Name
          description: Name of the dataset
        access_modes:
          type: array
          title: Access Modes
          description: List of access modes for the dataset
          default:
            - storage_type: file
              access_config:
                file_format: delta
          items:
            $ref: '#/components/schemas/DatasetAccessMode'
        dataset_description:
          type: string
          title: Dataset Description
        dataset_schema:
          $ref: '#/components/schemas/DatasetField'
        dataset_group:
          type: string
          title: Dataset Group
      required:
        - dataset_name
    DatasetAccessMode:
      type: object
      title: DatasetAccessMode
      description: |-
        Dataset Access Mode Model

        Attributes:
        - storage_type: StorageType
        - access_config: Optional[AccessConfig]
      properties:
        storage_type:
          description: Type of storage for the dataset
          allOf:
            - $ref: '#/components/schemas/StorageType'
        access_config:
          title: Access Config
          description: Access configuration for the dataset
          allOf:
            - $ref: '#/components/schemas/AccessConfig'
      required:
        - storage_type
    StorageType:
      type: string
      enum:
        - file
        - relational_database
        - key_value
        - search
      title: StorageType
      description: An enumeration.
    AccessConfig:
      type: object
      title: AccessConfig
      description: |-
        Access Config Model

        Attributes:
        - file_format: FileFormat
      properties:
        file_format:
          description: File format for the dataset
          allOf:
            - $ref: '#/components/schemas/app__models__v2__connector__FileFormat'
      required:
        - file_format
    app__models__v2__connector__FileFormat:
      type: string
      enum:
        - csv
        - parquet
        - json
        - delta
      title: FileFormat
      description: |-
        Enum for File Format

        Attributes:
        - csv: str
        - parquet: str
        - json: str
        - delta: str
    DatasetField:
      type: object
      title: DatasetField
      properties:
        field_name:
          type: string
          title: Field Name
          description: This field describes the name of the column in the dataset.
        field_description:
          type: string
          title: Field Description
          description: This field provides a short description about the corresponding column in the dataset.
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the column in the dataset.
          default: []
          items:
            type: string
        data_type:
          description: This field describes the data type of the column in the dataset.
          allOf:
            - $ref: '#/components/schemas/FieldDataType'
        primary_key:
          type: boolean
          title: Primary Key
          description: This field indicates whether the field is a primary key for the corresponding dataset or not.
          default: false
        index_policy:
          description: This field describes the index policy for the field in the dataset.
          allOf:
            - $ref: '#/components/schemas/IndexPolicy'
        index_params:
          title: Index Params
          description: This field describes the index parameters for the field in the dataset.
          default: {}
          allOf:
            - $ref: '#/components/schemas/IndexParams'
      required:
        - field_name
        - data_type
    FieldDataType:
      type: string
      enum:
        - integer
        - bigint
        - string
        - float
        - bool
        - datetime
        - array
        - object
      title: FieldDataType
      description: An enumeration.
    IndexPolicy:
      type: string
      enum:
        - flat
        - quantizedFlat
        - diskANN
      title: IndexPolicy
      description: An enumeration.
    IndexParams:
      type: object
      title: IndexParams
      properties:
        distance_function:
          description: This field describes the distance function for vector similarity in the dataset.
          allOf:
            - $ref: '#/components/schemas/DistanceFunction'
        dimensions:
          type: integer
          title: Dimensions
          description: This field describes the dimensionality of the vector in the dataset.
    DistanceFunction:
      type: string
      enum:
        - cosine
        - euclidean
        - dotproduct
      title: DistanceFunction
      description: An enumeration.
    ResourceRequirements:
      type: object
      title: ResourceRequirements
      description: |-
        Resource Requirements Model

        Attributes:
        - cpu_request: str
        - cpu_limit: str
        - memory_request: str
        - memory_limit: str
      properties:
        cpu_request:
          type: string
          title: Cpu Request
        cpu_limit:
          type: string
          title: Cpu Limit
        memory_request:
          type: string
          title: Memory Request
        memory_limit:
          type: string
          title: Memory Limit
      required:
        - cpu_request
        - cpu_limit
        - memory_request
        - memory_limit
    CreateConnectorResponse:
      type: object
      title: CreateConnectorResponse
      description: |-
        Create Connector Response Model

        Attributes:
        - connection_id: str
      properties:
        connection_id:
          type: string
          title: Connection Id
      required:
        - connection_id
    Connector:
      type: object
      title: Connector
      description: |-
        Connector Model

        Attributes:
        - connectionId: str
        - source_name: Optional[str]
        - source_type: Optional[str]
        - destination_name: Optional[str]
        - destination_type: Optional[str]
        - source_type_id: Optional[str]
        - destination_type_id: Optional[str]
        - last_triggered_at: Optional[str]
        - created_ts: str
        - updated_ts: str
      properties:
        schedule:
          $ref: '#/components/schemas/Schedule'
        scheduleType:
          $ref: '#/components/schemas/scheduleType'
        scheduleData:
          $ref: '#/components/schemas/ScheduleData'
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
          default: false
        preset:
          type: boolean
          title: Preset
          default: false
        sourceId:
          type: string
          title: Sourceid
        destinationId:
          type: string
          title: Destinationid
        streamsToSync:
          type: array
          title: Streamstosync
          items:
            $ref: '#/components/schemas/baseStreamConfig'
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
        status:
          $ref: '#/components/schemas/ConnectorStatus'
        consistency_sync:
          type: boolean
          title: Consistency Sync
          default: false
        description:
          type: string
          title: Description
        connectionId:
          type: string
          title: Connectionid
        source_name:
          type: string
          title: Source Name
        source_type:
          type: string
          title: Source Type
        destination_name:
          type: string
          title: Destination Name
        destination_type:
          type: string
          title: Destination Type
        source_type_id:
          type: string
          title: Source Type Id
        destination_type_id:
          type: string
          title: Destination Type Id
        last_triggered_at:
          type: string
          title: Last Triggered At
        last_attempt_status:
          $ref: '#/components/schemas/ConnectorRunStatus'
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
      required:
        - name
        - sourceId
        - destinationId
        - connectionId
        - created_ts
        - updated_ts
    baseStreamConfig:
      type: object
      title: baseStreamConfig
      description: |-
        Stream Config Model

        Attributes:
        - streamName: str
        - syncMode: Optional[syncModes]
        - destinationSyncMode: Optional[destinationSyncModes]
        - cursorField: Optional[List[str]]
        - dataset_id: Optional[str]
      properties:
        streamName:
          type: string
          title: Streamname
        syncMode:
          $ref: '#/components/schemas/syncModes'
        destinationSyncMode:
          $ref: '#/components/schemas/destinationSyncModes'
        cursorField:
          type: array
          title: Cursorfield
          description: Path to the field that will be used to determine if a record is new or modified since the last sync.
          items:
            type: string
          depends_on: syncMode
        dataset_id:
          type: string
          title: Dataset Id
          description: Dataset ID for the stream
      required:
        - streamName
    UpdateConnector:
      type: object
      title: UpdateConnector
      description: |-
        Update Connector Model

        Attributes:
        - name: Optional[str]
        - streamsUpdateConfig: Optional[StreamsUpdateConfig]
        - resourceRequirements: Optional[ResourceRequirements]
        - status: Optional[ConnectorStatus]
        - auto_sync : Optional[bool]
        - description: Optional[str]
        - is_internal: Optional[bool]
        - source_name: Optional[str]
        - destination_name: Optional[str]
        - last_triggered_at: Optional[str]
      properties:
        schedule:
          $ref: '#/components/schemas/Schedule'
        scheduleType:
          $ref: '#/components/schemas/scheduleType'
        scheduleData:
          $ref: '#/components/schemas/ScheduleData'
        name:
          type: string
          title: Name
        streamsUpdateConfig:
          $ref: '#/components/schemas/StreamsUpdateConfig'
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
        status:
          $ref: '#/components/schemas/ConnectorStatus'
        auto_sync:
          type: boolean
          title: Auto Sync
        description:
          type: string
          title: Description
        is_internal:
          type: boolean
          title: Is Internal
        source_name:
          type: string
          title: Source Name
        destination_name:
          type: string
          title: Destination Name
        last_triggered_at:
          type: string
          title: Last Triggered At
        last_attempt_status:
          $ref: '#/components/schemas/ConnectorRunStatus'
    StreamsUpdateConfig:
      type: object
      title: StreamsUpdateConfig
      description: |-
        Streams Update Config Model

        Attributes:
        - add: Optional[List[streamConfig]]
        - remove: Optional[List[streamConfig]]
        - update : Optional[List[streamConfig]]
      properties:
        add:
          type: array
          title: Add
          items:
            $ref: '#/components/schemas/streamConfig'
        remove:
          type: array
          title: Remove
          items:
            $ref: '#/components/schemas/streamConfig'
        update:
          type: array
          title: Update
          items:
            $ref: '#/components/schemas/streamConfig'
    RunConnectorResponse:
      type: object
      title: RunConnectorResponse
      description: |-
        Run Connector Response Model

        Attributes:
        - run_id: str
      properties:
        run_id:
          type: string
          title: Run Id
      required:
        - run_id
    GetConnectorRunStatusResponse:
      type: object
      title: GetConnectorRunStatusResponse
      description: |-
        Get Connector Run Status Response Model

        Attributes:
        - status: ConnectorRunStatus
      properties:
        status:
          $ref: '#/components/schemas/ConnectorRunStatus'
      required:
        - status
    ConnectorRunDetail:
      type: object
      title: ConnectorRunDetail
      description: |-
        Connector Run Detail Model

        Attributes:
        - run_metrics: Optional[List[RunMetrics]]
      properties:
        run_id:
          type: string
          title: Run Id
        connection_id:
          type: string
          title: Connection Id
        status:
          $ref: '#/components/schemas/ConnectorRunStatus'
        start_time:
          type: string
          title: Start Time
        end_time:
          type: string
          title: End Time
        time_taken:
          type: string
          title: Time Taken
        run_metrics:
          type: array
          title: Run Metrics
          items:
            $ref: '#/components/schemas/RunMetrics'
      required:
        - run_id
        - connection_id
        - status
    RunMetrics:
      type: object
      title: RunMetrics
      description: |-
        Run Metrics Model

        Attributes:
        - attempt: int
        - bytesSynced: Optional[int]
        - recordsSynced: Optional[int]
        - totalStats: Optional[dict]
        - streamStats: Optional[List[dict]]
        - failureSummary: Optional[dict]
      properties:
        attempt:
          type: integer
          title: Attempt
        bytesSynced:
          type: integer
          title: Bytessynced
        recordsSynced:
          type: integer
          title: Recordssynced
        totalStats:
          type: object
          title: Totalstats
        streamStats:
          type: array
          title: Streamstats
          items:
            type: object
        failureSummary:
          type: object
          title: Failuresummary
      required:
        - attempt
    ListConnectorRunsResponse:
      type: object
      title: ListConnectorRunsResponse
      description: |-
        List Connector Runs Response Model

        Attributes:
        - data: List[ConnectorRun]
      properties:
        request_id:
          type: string
          title: Request Id
          description: This field describes the request id of the request
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation id of the request
        count:
          type: integer
          title: Count
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/ConnectorRun'
      required:
        - count
        - data
    ConnectorRun:
      type: object
      title: ConnectorRun
      description: |-
        Connector Run Model

        Attributes:
        - run_id: str
        - connection_id: str
        - status: ConnectorRunStatus
        - start_time: Optional[str]
        - end_time: Optional[str]
        - time_taken: Optional[str]
      properties:
        run_id:
          type: string
          title: Run Id
        connection_id:
          type: string
          title: Connection Id
        status:
          $ref: '#/components/schemas/ConnectorRunStatus'
        start_time:
          type: string
          title: Start Time
        end_time:
          type: string
          title: End Time
        time_taken:
          type: string
          title: Time Taken
      required:
        - run_id
        - connection_id
        - status
    CreateSourceDefinition:
      type: object
      title: CreateSourceDefinition
      description: |-
        Create Source Definition Model

        Attributes:
        - workspaceId: Optional[str]
        - sourceDefinition: SourceDefinition
      properties:
        workspaceId:
          type: string
          title: Workspaceid
        sourceDefinition:
          $ref: '#/components/schemas/SourceDefinition'
      required:
        - sourceDefinition
    SourceDefinition:
      type: object
      title: SourceDefinition
      description: |-
        Source Definition Model

        Attributes:
        - name: str
        - dockerRepository: str
        - dockerImageTag: str
        - documentationUrl: str
        - icon: Optional[str]
      properties:
        name:
          type: string
          title: Name
        dockerRepository:
          type: string
          title: Dockerrepository
        dockerImageTag:
          type: string
          title: Dockerimagetag
        documentationUrl:
          type: string
          title: Documentationurl
        icon:
          type: string
          title: Icon
      required:
        - name
        - dockerRepository
        - dockerImageTag
        - documentationUrl
    UpdateSourceDefinition:
      type: object
      title: UpdateSourceDefinition
      description: |-
        Update Source Definition Model

        Attributes:
        - dockerImageTag: str
      properties:
        dockerImageTag:
          type: string
          title: Dockerimagetag
      required:
        - dockerImageTag
    ListSourcesResponse:
      type: object
      title: ListSourcesResponse
      description: |-
        List Sources Response Model

        Attributes:
        - data: List[ListSourceEntry]
      properties:
        request_id:
          type: string
          title: Request Id
          description: This field describes the request id of the request
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation id of the request
        count:
          type: integer
          title: Count
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/ListSourceEntry'
      required:
        - count
        - data
    ListSourceEntry:
      type: object
      title: ListSourceEntry
      description: |-
        List Source Entry Model

        Attributes:
        - sourceId: str
        - name: str
        - sourceName: str
        - no_of_connections: Optional[int]
        - connections: Optional[List[str]]
        - test_connection_status: Optional[str]
        - test_connection_ts: Optional[str]
        - icon: Optional[str]
        - workspaceId: str
        - created_ts: str
        - updated_ts: str
      properties:
        sourceId:
          type: string
          title: Sourceid
        name:
          type: string
          title: Name
        sourceName:
          type: string
          title: Sourcename
        no_of_connections:
          type: integer
          title: No Of Connections
        connections:
          type: array
          title: Connections
          default: []
          items:
            type: string
        test_connection_status:
          type: string
          title: Test Connection Status
        test_connection_ts:
          type: string
          title: Test Connection Ts
        icon:
          type: string
          title: Icon
        workspaceId:
          type: string
          title: Workspaceid
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
      required:
        - sourceId
        - name
        - sourceName
        - workspaceId
        - created_ts
        - updated_ts
    CreateSource:
      type: object
      title: CreateSource
      description: |-
        Create Source Model

        Attributes:
        - sourceDefinitionId: str
        - connectionConfiguration: dict
        - name: str
        - is_internal: Optional[bool]
        - description: Optional[str]
      properties:
        sourceDefinitionId:
          type: string
          title: Sourcedefinitionid
        connectionConfiguration:
          type: object
          title: Connectionconfiguration
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
          default: false
        description:
          type: string
          title: Description
      required:
        - sourceDefinitionId
        - connectionConfiguration
        - name
    Source:
      type: object
      title: Source
      description: |-
        Source Model

        Attributes:
        - sourceId: str
        - icon: Optional[str]
        - sourceName: str
        - workspaceId: str
        - created_ts: str
        - updated_ts: str
        - test_connection_status: Optional[str]
        - test_connection_ts: Optional[str]
        - connections: Optional[List[str]]
        - no_of_connections: Optional[int]
      properties:
        sourceDefinitionId:
          type: string
          title: Sourcedefinitionid
        connectionConfiguration:
          type: object
          title: Connectionconfiguration
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
          default: false
        description:
          type: string
          title: Description
        sourceId:
          type: string
          title: Sourceid
        icon:
          type: string
          title: Icon
        sourceName:
          type: string
          title: Sourcename
        workspaceId:
          type: string
          title: Workspaceid
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
        test_connection_status:
          type: string
          title: Test Connection Status
        test_connection_ts:
          type: string
          title: Test Connection Ts
        connections:
          type: array
          title: Connections
          default: []
          items:
            type: string
        no_of_connections:
          type: integer
          title: No Of Connections
      required:
        - sourceDefinitionId
        - connectionConfiguration
        - name
        - sourceId
        - sourceName
        - workspaceId
        - created_ts
        - updated_ts
    UpdateSource:
      type: object
      title: UpdateSource
      description: |-
        Update Source Model

        Attributes:
        - connectionConfiguration: Optional[dict]
        - name: Optional[str]
        - is_internal: Optional[bool]
        - description: Optional[str]
        - connections: Optional[List[str]]
        - no_of_connections: Optional[int
      properties:
        connectionConfiguration:
          type: object
          title: Connectionconfiguration
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
        description:
          type: string
          title: Description
        connections:
          type: array
          title: Connections
          items:
            type: string
        no_of_connections:
          type: integer
          title: No Of Connections
    CreateDestinationDefinition:
      type: object
      title: CreateDestinationDefinition
      description: |-
        Create Destination Definition Model

        Attributes:
        - workspaceId: Optional[str]
        - destinationDefinition: DestinationDefinition
      properties:
        workspaceId:
          type: string
          title: Workspaceid
        destinationDefinition:
          $ref: '#/components/schemas/DestinationDefinition'
      required:
        - destinationDefinition
    DestinationDefinition:
      type: object
      title: DestinationDefinition
      description: |-
        Destination Definition Model

        Attributes:
        - name: str
        - dockerRepository: str
        - dockerImageTag: str
        - documentationUrl: str
        - icon: Optional[str]
      properties:
        name:
          type: string
          title: Name
        dockerRepository:
          type: string
          title: Dockerrepository
        dockerImageTag:
          type: string
          title: Dockerimagetag
        documentationUrl:
          type: string
          title: Documentationurl
        icon:
          type: string
          title: Icon
      required:
        - name
        - dockerRepository
        - dockerImageTag
        - documentationUrl
    UpdateDestinationDefinition:
      type: object
      title: UpdateDestinationDefinition
      description: |-
        Update Destination Definition Model

        Attributes:
        - dockerImageTag: Optional[str]
      properties:
        dockerImageTag:
          type: string
          title: Dockerimagetag
      required:
        - dockerImageTag
    ListDestinationsResponse:
      type: object
      title: ListDestinationsResponse
      description: |-
        List Destinations Response Model

        Attributes:
        - data: List[ListDestinationEntry]
      properties:
        request_id:
          type: string
          title: Request Id
          description: This field describes the request id of the request
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation id of the request
        count:
          type: integer
          title: Count
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/ListDestinationEntry'
      required:
        - count
        - data
    ListDestinationEntry:
      type: object
      title: ListDestinationEntry
      description: |-
        List Destination Entry Model

        Attributes:
        - destinationId: str
        - name: str
        - destinationName: str
        - no_of_connections: Optional[int]
        - connections: Optional[List[str]]
        - test_connection_status: Optional[str]
        - test_connection_ts: Optional[str]
        - icon: Optional[str]
        - workspaceId: str
        - created_ts: str
        - updated_ts: str
      properties:
        destinationId:
          type: string
          title: Destinationid
        name:
          type: string
          title: Name
        destinationName:
          type: string
          title: Destinationname
        no_of_connections:
          type: integer
          title: No Of Connections
        connections:
          type: array
          title: Connections
          default: []
          items:
            type: string
        test_connection_status:
          type: string
          title: Test Connection Status
        test_connection_ts:
          type: string
          title: Test Connection Ts
        icon:
          type: string
          title: Icon
        workspaceId:
          type: string
          title: Workspaceid
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
      required:
        - destinationId
        - name
        - destinationName
        - workspaceId
        - created_ts
        - updated_ts
    CreateDestination:
      type: object
      title: CreateDestination
      description: |-
        Create Destination Model

        Attributes:
        - destinationDefinitionId: str
        - connectionConfiguration: dict
        - name: str
        - is_internal: Optional[bool]
        - description: Optional[str]
      properties:
        destinationDefinitionId:
          type: string
          title: Destinationdefinitionid
        connectionConfiguration:
          type: object
          title: Connectionconfiguration
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
          default: false
        description:
          type: string
          title: Description
      required:
        - destinationDefinitionId
        - connectionConfiguration
        - name
    Destination:
      type: object
      title: Destination
      description: |-
        Destination Model

        Attributes:
        - destinationId: str
        - icon: Optional[str]
        - destinationName: str
        - workspaceId: str
        - created_ts: str
        - updated_ts: str
        - test_connection_status: Optional[str]
        - test_connection_ts: Optional[str]
        - connections: Optional[List[str]]
        - no_of_connections: Optional[int]
      properties:
        destinationDefinitionId:
          type: string
          title: Destinationdefinitionid
        connectionConfiguration:
          type: object
          title: Connectionconfiguration
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
          default: false
        description:
          type: string
          title: Description
        destinationId:
          type: string
          title: Destinationid
        icon:
          type: string
          title: Icon
        destinationName:
          type: string
          title: Destinationname
        workspaceId:
          type: string
          title: Workspaceid
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
        test_connection_status:
          type: string
          title: Test Connection Status
        test_connection_ts:
          type: string
          title: Test Connection Ts
        connections:
          type: array
          title: Connections
          default: []
          items:
            type: string
        no_of_connections:
          type: integer
          title: No Of Connections
      required:
        - destinationDefinitionId
        - connectionConfiguration
        - name
        - destinationId
        - destinationName
        - workspaceId
        - created_ts
        - updated_ts
    UpdateDestination:
      type: object
      title: UpdateDestination
      description: |-
        Update Destination Model

        Attributes:
        - connectionConfiguration: Optional[dict]
        - name: Optional[str]
        - is_internal: Optional[bool]
        - description: Optional[str]
      properties:
        connectionConfiguration:
          type: object
          title: Connectionconfiguration
        name:
          type: string
          title: Name
        is_internal:
          type: boolean
          title: Is Internal
        description:
          type: string
          title: Description
        connections:
          type: array
          title: Connections
          items:
            type: string
        no_of_connections:
          type: integer
          title: No Of Connections
    RegisterTable:
      type: object
      title: RegisterTable
      description: |-
        Register Table Model

        Attributes:
        - table_name: str
        - table_path: str
        - table_prefix: Optional[str]
        - schema_name: Optional[str]
        - catalog: Optional[str]
        - file_format: Optional[FileFormat]
        - table_schema: Optional[dict]
      properties:
        table_name:
          type: string
          title: Table Name
          description: This field describes the name of the table.
        table_path:
          type: string
          title: Table Path
          description: This field references the path to the table
        table_prefix:
          type: string
          title: Table Prefix
          description: This field references the prefix of the table name
          default: dataset
        schema:
          type: string
          title: Schema
          description: This field describes the schema under which the table should be registered
        catalog:
          type: string
          title: Catalog
          description: This field describes the catalog under which the table sohuld be registered
        file_format:
          description: This field describes the format of the table
          allOf:
            - $ref: '#/components/schemas/app__models__v2__dataset__FileFormat'
        table_schema:
          type: object
          title: Table Schema
          description: This field describes the schema of the table
      required:
        - table_name
        - table_path
    app__models__v2__dataset__FileFormat:
      type: string
      enum:
        - parquet
        - csv
        - json
      title: FileFormat
      description: |-
        Enum for File Format

        Attributes:
        - parquet: str
        - csv: str
        - json: str
    Workspace:
      type: object
      title: Workspace
      description: |-
        Workspace Model

        Attributes:
        - name: str
        - email: Optional[str]
      properties:
        name:
          type: string
          title: Name
        email:
          type: string
          title: Email
      required:
        - name
    ListIngressResponse:
      type: object
      title: ListIngressResponse
      properties:
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/Ingress'
        count:
          type: integer
          title: Count
      required:
        - data
        - count
    Ingress:
      type: object
      title: Ingress
      properties:
        name:
          type: string
          title: Name
        source_id:
          type: string
          title: Source Id
        streams_to_sync:
          type: array
          title: Streams To Sync
          items:
            $ref: '#/components/schemas/streamConfig'
        resource_requirements:
          $ref: '#/components/schemas/ResourceRequirements'
        ingress_id:
          type: string
          title: Ingress Id
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
      required:
        - name
        - source_id
        - ingress_id
        - created_ts
        - updated_ts
    CreateIngress:
      type: object
      title: CreateIngress
      properties:
        name:
          type: string
          title: Name
        source_id:
          type: string
          title: Source Id
        streams_to_sync:
          type: array
          title: Streams To Sync
          items:
            $ref: '#/components/schemas/streamConfig'
        resource_requirements:
          $ref: '#/components/schemas/ResourceRequirements'
      required:
        - name
        - source_id
    CreateIngressResponse:
      type: object
      title: CreateIngressResponse
      properties:
        name:
          type: string
          title: Name
        source_id:
          type: string
          title: Source Id
        streams_to_sync:
          type: array
          title: Streams To Sync
          items:
            $ref: '#/components/schemas/streamConfig'
        resource_requirements:
          $ref: '#/components/schemas/ResourceRequirements'
        ingress_id:
          type: string
          title: Ingress Id
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
        internal_config:
          type: object
          title: Internal Config
      required:
        - name
        - source_id
        - ingress_id
        - created_ts
        - updated_ts
    RunIngressResponse:
      type: object
      title: RunIngressResponse
      properties:
        run_id:
          type: string
          title: Run Id
      required:
        - run_id
    GetIngressRunStatusResponse:
      type: object
      title: GetIngressRunStatusResponse
      properties:
        status:
          $ref: '#/components/schemas/ConnectorRunStatus'
      required:
        - status
    ListIngressRunResponse:
      type: object
      title: ListIngressRunResponse
      description: |-
        List Response Model

        Attributes:
        - request_id: Optional[str]
        - correlation_id: Optional[str]
        - count: int
      properties:
        request_id:
          type: string
          title: Request Id
          description: This field describes the request id of the request
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation id of the request
        count:
          type: integer
          title: Count
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/IngressRun'
      required:
        - count
        - data
    IngressRun:
      type: object
      title: IngressRun
      properties:
        run_id:
          type: string
          title: Run Id
        ingress_id:
          type: string
          title: Ingress Id
        status:
          type: string
          title: Status
        start_time:
          type: string
          title: Start Time
        end_time:
          type: string
          title: End Time
      required:
        - run_id
        - ingress_id
        - status
    ListEgressResponse:
      type: object
      title: ListEgressResponse
      description: |-
        List Response Model

        Attributes:
        - request_id: Optional[str]
        - correlation_id: Optional[str]
        - count: int
      properties:
        request_id:
          type: string
          title: Request Id
          description: This field describes the request id of the request
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation id of the request
        count:
          type: integer
          title: Count
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/Egress'
      required:
        - count
        - data
    Egress:
      type: object
      title: Egress
      properties:
        name:
          type: string
          title: Name
        destination_id:
          type: string
          title: Destination Id
        dataset_id:
          type: string
          title: Dataset Id
        egress_id:
          type: string
          title: Egress Id
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
      required:
        - name
        - destination_id
        - dataset_id
        - egress_id
        - created_ts
        - updated_ts
    CreateEgress:
      type: object
      title: CreateEgress
      properties:
        name:
          type: string
          title: Name
        destination_id:
          type: string
          title: Destination Id
        dataset_id:
          type: string
          title: Dataset Id
      required:
        - name
        - destination_id
        - dataset_id
    CreateEgressResponse:
      type: object
      title: CreateEgressResponse
      properties:
        name:
          type: string
          title: Name
        destination_id:
          type: string
          title: Destination Id
        dataset_id:
          type: string
          title: Dataset Id
        egress_id:
          type: string
          title: Egress Id
        created_ts:
          type: string
          title: Created Ts
        updated_ts:
          type: string
          title: Updated Ts
        internal_config:
          type: object
          title: Internal Config
      required:
        - name
        - destination_id
        - dataset_id
        - egress_id
        - created_ts
        - updated_ts
    RunEgressResponse:
      type: object
      title: RunEgressResponse
      properties:
        run_id:
          type: string
          title: Run Id
      required:
        - run_id
    GetEgressRunStatusResponse:
      type: object
      title: GetEgressRunStatusResponse
      properties:
        status:
          $ref: '#/components/schemas/ConnectorRunStatus'
      required:
        - status
    ListEgressRunsResponse:
      type: object
      title: ListEgressRunsResponse
      description: |-
        List Response Model

        Attributes:
        - request_id: Optional[str]
        - correlation_id: Optional[str]
        - count: int
      properties:
        request_id:
          type: string
          title: Request Id
          description: This field describes the request id of the request
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation id of the request
        count:
          type: integer
          title: Count
        data:
          type: array
          title: Data
          items:
            $ref: '#/components/schemas/EgressRun'
      required:
        - count
        - data
    EgressRun:
      type: object
      title: EgressRun
      properties:
        run_id:
          type: string
          title: Run Id
        egress_id:
          type: string
          title: Egress Id
        status:
          type: string
          title: Status
        start_time:
          type: string
          title: Start Time
        end_time:
          type: string
          title: End Time
      required:
        - run_id
        - egress_id
        - status
    UpsertPayload:
      type: object
      title: UpsertPayload
      properties:
        data:
          title: Data
          description: This field takes a single packet or a micro-batch of records to insert.
          anyOf:
            - type: array
              items:
                type: object
                additionalProperties:
                  anyOf:
                    - type: boolean
                    - type: string
                    - type: array
                    - type: object
            - type: object
              additionalProperties:
                anyOf:
                  - type: boolean
                  - type: string
                  - type: array
                  - type: object
      required:
        - data
    QueryDatasetPayload:
      type: object
      title: QueryDatasetPayload
      properties:
        fields:
          type: array
          title: Fields
          description: This field defines which all fields need to selected to obtain the result of the query.
        access_mode:
          description: This field defines the access mode to the data source.
          allOf:
            - $ref: '#/components/schemas/AccessMode'
        query:
          title: Query
          description: This field defines the query that needs to be executed.
          allOf:
            - $ref: '#/components/schemas/Query'
        offset:
          type: integer
          title: Offset
          description: This field allows you to define the number of records that must be skipped before selection.
          default: 0
        limit:
          type: integer
          title: Limit
          description: This query parameter allows you to limit the number of records returned from the query.
          default: 250
      required:
        - query
    AccessMode:
      type: string
      enum:
        - relational_database
        - key_value
        - search
      title: AccessMode
      description: Enum for access mode
    Query:
      type: object
      title: Query
      properties:
        filter:
          title: Filter
          description: This field describes what filters need to be applied as part of the query.
          allOf:
            - $ref: '#/components/schemas/QueryFilter'
        select:
          type: array
          title: Select
          description: This field describes which columns to select for the query.
          items:
            $ref: '#/components/schemas/QuerySelect'
        sort:
          type: array
          title: Sort
          description: This field describes which columns to sort the response by.
          items:
            $ref: '#/components/schemas/QuerySort'
        es_params:
          type: object
          title: Es Params
          description: This field describes what query need to be applied as part of the ES query.
    QueryFilter:
      type: object
      title: QueryFilter
      properties:
        operator:
          type: string
          title: Operator
          description: This field defines the operator to be used for filtering.
        operands:
          type: array
          title: Operands
          description: This field defines the operands to be used for filtering.
          items:
            anyOf:
              - $ref: '#/components/schemas/QueryInnerOperand'
              - $ref: '#/components/schemas/QueryOperand'
      required:
        - operator
        - operands
    QueryInnerOperand:
      type: object
      title: QueryInnerOperand
      properties:
        operator:
          type: string
          title: Operator
          description: This field defines the operator to be used for filtering.
        operands:
          type: array
          title: Operands
          description: This field defines the operands to be used for filtering.
          items:
            $ref: '#/components/schemas/QueryOperand'
      required:
        - operator
        - operands
    QueryOperand:
      type: object
      title: QueryOperand
      properties:
        field:
          type: string
          title: Field
          description: This field defines the field to be used for filtering.
        condition_operator:
          type: string
          title: Condition Operator
          description: This field defines the operator to be used for filtering.
        value:
          title: Value
          description: This field defines the value to be used for filtering.
        db_function:
          type: string
          title: Db Function
          description: This field defines the function to be applied on the selected field.
        db_function_extra_args:
          type: array
          title: Db Function Extra Args
          description: This field defines the arguments to be passed to the db function.
      required:
        - field
        - condition_operator
        - value
    QuerySelect:
      type: object
      title: QuerySelect
      properties:
        field:
          type: string
          title: Field
          description: This field defines the field to be selected.
        alias:
          type: string
          title: Alias
          description: This field defines the alias for the selected field.
          default: ''
        db_function:
          type: string
          title: Db Function
          description: This field defines the function to be applied on the selected field.
        db_function_extra_args:
          type: array
          title: Db Function Extra Args
          description: This field defines the arguments to be passed to the db function.
      required:
        - field
    QuerySort:
      type: object
      title: QuerySort
      properties:
        field:
          type: string
          title: Field
          description: This field defines the field to be sorted.
        sort_type:
          type: string
          title: Sort Type
          description: This can be asc for ascending or desc for descending.
          default: asc
        db_function:
          type: string
          title: Db Function
          description: This field defines the function to be applied on the selected field.
        db_function_extra_args:
          type: array
          title: Db Function Extra Args
          description: This field defines the arguments to be passed to the db function.
      required:
        - field
    app__schemas__datasets__ListingFields:
      type: string
      enum:
        - dataset_name
        - dataset_group
        - created_ts
        - updated_ts
        - last_profiled_ts
        - last_sampled_ts
        - profiling_status
        - sampling_status
        - virtual
        - tags
        - dataset_id
        - size
        - number_of_columns
        - number_of_records
        - created_by
        - updated_by
        - number_of_access_modes
        - list_of_access_modes
        - last_synchronized_ts
        - sync_status
        - next_sync_ts
      title: ListingFields
      description: An enumeration.
    DatasetListingResponse:
      type: object
      title: DatasetListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          title: Data
          description: This field describes the response data of the list API. The output contains data about all datasets registered and their corresponding dataset IDs.
          allOf:
            - $ref: '#/components/schemas/DatasetListingResponseValidation'
      required:
        - status
        - data
    DatasetListingResponseValidation:
      type: object
      title: DatasetListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of datasets that have been registered.
        results:
          type: array
          title: Results
          description: This field describes the list of datasets that have been registered.
          items:
            $ref: '#/components/schemas/DatasetListingEntity'
      required:
        - count
        - results
    DatasetListingEntity:
      type: object
      title: DatasetListingEntity
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the dataset.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the dataset.
        dataset_id:
          type: string
          title: Dataset Id
          description: This field describes the identifier of the dataset.
        dataset_name:
          type: string
          title: Dataset Name
          description: This field describes the name of the dataset.
        dataset_group:
          type: string
          title: Dataset Group
          description: This field describes the name of the dataset group that the dataset belongs to.
        dataset_summary:
          title: Dataset Summary
          description: 'This field provides a summary about the dataset. The summary includes metadata about the dataset, a sample set of records that we can find in the data, and univariate summary of all fields in the dataset.'
          allOf:
            - $ref: '#/components/schemas/DatasetSummaryListing'
        profiling_status:
          description: This field is a boolean that is used to describe if a dataset is profiled dataset or not.
          default: NOT_PROFILED
          allOf:
            - $ref: '#/components/schemas/DatasetProfilingStatus'
        sampling_status:
          description: This field is a boolean that is used to describe if a dataset is profiled dataset or not.
          default: NOT_SAMPLED
          allOf:
            - $ref: '#/components/schemas/DatasetSamplingStatus'
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the dataset.
          default: []
          items:
            type: string
        users:
          type: array
          title: Users
          description: This field describes the list of users that can be associated to the dataset.
          default: []
          items:
            $ref: '#/components/schemas/EntityUser'
        user_groups:
          type: array
          title: User Groups
          description: This field describes the list of user groups that can be associated to the dataset.
          default: []
          items:
            $ref: '#/components/schemas/EntityUserGroup'
      required:
        - created_ts
        - updated_ts
        - dataset_id
        - dataset_name
    DatasetSummaryListing:
      type: object
      title: DatasetSummaryListing
      properties:
        number_of_records:
          type: integer
          title: Number Of Records
          description: This field describes the number of records in the dataset.
          default: 0
        number_of_columns:
          type: integer
          title: Number Of Columns
          description: This field describes the number of columns in the dataset.
          default: 0
        size:
          type: string
          title: Size
          description: This field describes the size of the dataset.
    DatasetProfilingStatus:
      type: string
      enum:
        - NOT_PROFILED
        - PROFILING_IN_PROGRESS
        - PROFILING_FAILED
        - PROFILED
      title: DatasetProfilingStatus
      description: An enumeration.
    DatasetSamplingStatus:
      type: string
      enum:
        - NOT_SAMPLED
        - SAMPLING_IN_PROGRESS
        - SAMPLED
        - SAMPLING_FAILED
      title: DatasetSamplingStatus
      description: An enumeration.
    CreateDataset:
      type: object
      title: CreateDataset
      properties:
        dataset_name:
          type: string
          title: Dataset Name
          description: This field describes the name of the dataset.
        dataset_schema:
          type: array
          title: Dataset Schema
          description: This field describes the schema of the dataset. It defines the rules and formats of the various fields in the dataset.
          default: []
          items:
            $ref: '#/components/schemas/DatasetField'
        dataset_description:
          type: string
          title: Dataset Description
          description: This field provides a description about the dataset.
        dataset_group:
          type: string
          title: Dataset Group
          description: This field describes the name of the dataset group that the dataset belongs to.
        virtual:
          type: boolean
          title: Virtual
          description: This field describes if a given access mode is a virtual access mode or not.
          default: false
        access_modes:
          type: array
          title: Access Modes
          description: This field describes the different access patterns and the corresponding polyglot storage modes of the dataset.
          default: []
          items:
            $ref: '#/components/schemas/DatasetAccessModes'
        path_to_sample_data:
          type: string
          title: Path To Sample Data
          description: This field references the path to the sample data for this dataset. The generated path will be a CSV file.
        internal:
          type: boolean
          title: Internal
          description: This field is a boolean that is used to describe if a dataset is an internal dataset or not.
          default: false
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a dataset is a preset dataset or not.
          default: false
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the dataset.
          default: []
          items:
            type: string
      required:
        - dataset_name
    DatasetAccessModes:
      type: object
      title: DatasetAccessModes
      properties:
        storage_type:
          description: This field describes the type of storage where the dataset is stored.
          allOf:
            - $ref: '#/components/schemas/StorageType'
        access_config:
          title: Access Config
          description: This field describes the access configuration / defines the access pattern of the dataset.
          default: {}
          anyOf:
            - $ref: '#/components/schemas/FileAccessConfig'
            - $ref: '#/components/schemas/RelationalDatabaseAccessConfig'
            - $ref: '#/components/schemas/KeyValueAccessConfig'
            - $ref: '#/components/schemas/SearchAccessConfig'
        consistency_schedule:
          type: string
          title: Consistency Schedule
          description: This field describes the schedule of the consistency mode.
      required:
        - storage_type
    FileAccessConfig:
      type: object
      title: FileAccessConfig
      properties:
        path_to_data:
          type: string
          title: Path To Data
          description: 'This field references the path to the raw data for this dataset. For non-virtual datasets, this can be an input to an existing file. If a new file needs to be created, then a new path is generated.'
        file_format:
          description: This field references the file format of the dataset.
          allOf:
            - $ref: '#/components/schemas/FileFormat'
        file_store:
          description: 'This field references the file store of the dataset, and needs to be passed only for virtual datasets.'
          allOf:
            - $ref: '#/components/schemas/FileStores'
        credentials:
          title: Credentials
          description: 'This field references the credentials to access the file store, and needs to be passed only for virtual datasets.'
          anyOf:
            - $ref: '#/components/schemas/AWSFileAccessCredentials'
            - $ref: '#/components/schemas/AzureFileAccessCredentials'
            - $ref: '#/components/schemas/GCPFileAccessCredentials'
      required:
        - file_format
    FileFormat:
      type: string
      enum:
        - csv
        - parquet
        - json
        - delta
      title: FileFormat
      description: An enumeration.
    FileStores:
      type: string
      enum:
        - s3
        - gcs
        - azure_blob
      title: FileStores
      description: An enumeration.
    AWSFileAccessCredentials:
      type: object
      title: AWSFileAccessCredentials
      properties:
        aws_access_key_id:
          type: string
          title: Aws Access Key Id
          description: This field references the access key to access the s3(IAM authentication) file store.
        aws_secret_access_key:
          type: string
          title: Aws Secret Access Key
          description: This field references the secret key to access the s3(IAM authentication) file store.
        region_name:
          type: string
          title: Region Name
          description: This field references the region of the s3 file store.
      required:
        - aws_access_key_id
        - aws_secret_access_key
        - region_name
    AzureFileAccessCredentials:
      type: object
      title: AzureFileAccessCredentials
      properties:
        storage_account_name:
          type: string
          title: Storage Account Name
          description: This field references the storage account name to access the azure blob file store.
        storage_account_key:
          type: string
          title: Storage Account Key
          description: This field references the storage account key to access the azure blob file store.
      required:
        - storage_account_name
        - storage_account_key
    GCPFileAccessCredentials:
      type: object
      title: GCPFileAccessCredentials
      properties:
        access_key_id:
          type: string
          title: Access Key Id
          description: This field references the access key to access the gcp(HMAC authetication) file store.
        secret_access_key:
          type: string
          title: Secret Access Key
          description: This field references the secret key to access the gcp(HMAC authetication) file store.
      required:
        - access_key_id
        - secret_access_key
    RelationalDatabaseAccessConfig:
      type: object
      title: RelationalDatabaseAccessConfig
      properties:
        db_host:
          type: string
          title: Db Host
          description: This field references the host of the relational database.
        db_port:
          type: integer
          title: Db Port
          description: This field references the port of the relational database.
        db_user:
          type: string
          title: Db User
          description: This field references the user of the relational database.
        db_password:
          type: string
          title: Db Password
          description: This field references the password of the relational database.
        db_name:
          type: string
          title: Db Name
          description: This field references the database name in the relational database.
        table_name:
          type: string
          title: Table Name
          description: This field references the table name in the relational database.
        schema_name:
          type: string
          title: Schema Name
          description: This field references the schema name in the relational database.
      required:
        - table_name
        - schema_name
    KeyValueAccessConfig:
      type: object
      title: KeyValueAccessConfig
      properties:
        cosmos_connection_string:
          type: string
          title: Cosmos Connection String
          description: This field references the connection URL to Cosmos DB.
        database:
          type: string
          title: Database
          description: This field references the database name in Cosmos DB.
        container:
          type: string
          title: Container
          description: This field references the container name in Cosmos DB.
    SearchAccessConfig:
      type: object
      title: SearchAccessConfig
      properties:
        es_host:
          type: string
          title: Es Host
          description: This field references the host of the Elasticsearch.
        es_port:
          type: integer
          title: Es Port
          description: This field references the port of the Elasticsearch.
        es_username:
          type: string
          title: Es Username
          description: This field references the username of the Elasticsearch.
        es_password:
          type: string
          title: Es Password
          description: This field references the password of the Elasticsearch.
        es_index:
          type: string
          title: Es Index
          description: This field references the index name in the Elasticsearch.
        dataset_schema:
          type: array
          title: Dataset Schema
          description: This field describes the schema of the dataset to override for elastic search. It defines the rules and formats of the various fields in the dataset.
          default: []
          items:
            $ref: '#/components/schemas/SearchField'
    SearchField:
      type: object
      title: SearchField
      properties:
        field_name:
          type: string
          title: Field Name
          description: This is a field name to override from dataset schema specific to elastic search.
        data_type:
          description: This field is to specify the datatype for Elasticsearch.
          allOf:
            - $ref: '#/components/schemas/SearchFieldDataType'
        search:
          type: boolean
          title: Search
          description: This field is to enable/disable search on Elasticsearch.
        index:
          type: boolean
          title: Index
          description: This field is to enable/disable index on Elasticsearch.
        facet:
          type: boolean
          title: Facet
          description: This field is to enable/disable facet on Elasticsearch.
    SearchFieldDataType:
      type: string
      enum:
        - integer
        - float
        - dict
        - date
        - keyword
        - object
        - bool
      title: SearchFieldDataType
      description: An enumeration.
    DatasetCreateResponse:
      type: object
      title: DatasetCreateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the create API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          type: string
          title: Data
          description: This field describes the response of the create API. The output is a dataset ID that is a unique reference to the registered dataset.
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset.'
          allOf:
            - $ref: '#/components/schemas/Dataset'
      required:
        - status
        - data
        - config
    Dataset:
      type: object
      title: Dataset
      properties:
        dataset_name:
          type: string
          title: Dataset Name
          description: This field describes the name of the dataset.
        dataset_schema:
          type: array
          title: Dataset Schema
          description: This field describes the schema of the dataset. It defines the rules and formats of the various fields in the dataset.
          default: []
          items:
            $ref: '#/components/schemas/DatasetField'
        dataset_description:
          type: string
          title: Dataset Description
          description: This field provides a description about the dataset.
        dataset_group:
          type: string
          title: Dataset Group
          description: This field describes the name of the dataset group that the dataset belongs to.
        virtual:
          type: boolean
          title: Virtual
          description: This field describes if a given access mode is a virtual access mode or not.
          default: false
        access_modes:
          type: array
          title: Access Modes
          description: This field describes the different access patterns and the corresponding polyglot storage modes of the dataset.
          default: []
          items:
            $ref: '#/components/schemas/DatasetAccessModes'
        path_to_sample_data:
          type: string
          title: Path To Sample Data
          description: This field references the path to the sample data for this dataset. The generated path will be a CSV file.
        internal:
          type: boolean
          title: Internal
          description: This field is a boolean that is used to describe if a dataset is an internal dataset or not.
          default: false
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a dataset is a preset dataset or not.
          default: false
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the dataset.
          default: []
          items:
            type: string
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the dataset.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the dataset.
        dataset_id:
          type: string
          title: Dataset Id
          description: This field describes the identifier of the dataset.
        dataset_summary:
          title: Dataset Summary
          description: This field provides a summary about the dataset. The summary includes metadata about the dataset and univariate summary of all fields in the dataset.
          default: {}
          allOf:
            - $ref: '#/components/schemas/DatasetSummary'
        sampling_info:
          title: Sampling Info
          description: This field provides the configuration / strategy required for sampling the dataset during creation.
          default: {}
          allOf:
            - $ref: '#/components/schemas/SamplingInfo'
        profiling_status:
          description: This field is a boolean that is used to describe if a dataset has been profiled or not.
          default: NOT_PROFILED
          allOf:
            - $ref: '#/components/schemas/DatasetProfilingStatus'
        sampling_status:
          description: This field is a boolean that is used to describe if a dataset has been sampled or not.
          default: NOT_SAMPLED
          allOf:
            - $ref: '#/components/schemas/DatasetSamplingStatus'
        last_profiled_ts:
          type: string
          title: Last Profiled Ts
          description: This field describes the last time when the dataset was profiled.
        last_sampled_ts:
          type: string
          title: Last Sampled Ts
          description: This field describes the last time when the dataset was sampled.
        mutability:
          description: 'This field describes the mutability of the dataset (i.e., how the records in the dataset can be modified).'
          allOf:
            - $ref: '#/components/schemas/DatasetMutability'
        number_of_records:
          type: integer
          title: Number Of Records
          description: This field describes the number of records in the dataset.
        number_of_columns:
          type: integer
          title: Number Of Columns
          description: This field describes the number of columns in the dataset.
        size:
          type: integer
          title: Size
          description: This field describes the size of the dataset in bytes
        number_of_access_modes:
          type: integer
          title: Number Of Access Modes
          description: This field describes the number of access modes in the dataset.
        list_of_access_modes:
          type: array
          title: List Of Access Modes
          description: This field describes the list_of_access_modes
      required:
        - dataset_name
        - created_ts
        - updated_ts
        - dataset_id
        - mutability
    DatasetSummary:
      type: object
      title: DatasetSummary
      properties:
        number_of_records:
          type: integer
          title: Number Of Records
          description: This field describes the number of records in the dataset.
          default: 0
        number_of_columns:
          type: integer
          title: Number Of Columns
          description: This field describes the number of columns in the dataset.
          default: 0
        size:
          type: integer
          title: Size
          description: This field describes the size of the dataset (in bytes).
          default: 0
        univariates:
          type: array
          title: Univariates
          description: This field provides a univariate summary / statistical analysis for all fields in the dataset that can be valuable for descriptive statistics and exploratory data analysis.
          default: []
          items:
            anyOf:
              - $ref: '#/components/schemas/NumericalFieldUnivariateSummary'
              - $ref: '#/components/schemas/FieldUnivariateSummary'
        schema_summary:
          type: object
          title: Schema Summary
          description: This field provides a summary distribution of the number of columns per data type.
          additionalProperties:
            type: integer
          default: {}
    NumericalFieldUnivariateSummary:
      type: object
      title: NumericalFieldUnivariateSummary
      properties:
        name:
          type: string
          title: Name
          description: This field describes the name of the column in the dataset.
        type:
          type: string
          title: Type
          description: This field describes the data type of the column in the dataset.
        zeroes:
          type: integer
          title: Zeroes
          description: This field describes the number of zeroes for that column in the dataset.
          default: 0
        zeroes_percentage:
          type: string
          title: Zeroes Percentage
          description: This field describes the percentage of zeroes for that column in the dataset.
        missing:
          type: integer
          title: Missing
          description: This field describes the number of missing values for that column in the dataset.
          default: 0
        missing_percentage:
          type: string
          title: Missing Percentage
          description: This field describes the percentage of missing values for that column in the dataset.
        size:
          type: string
          title: Size
          description: This field describes the size of the column in the dataset.
        distinct:
          type: integer
          title: Distinct
          description: This field describes the number of distinct values for that column in the dataset.
          default: 0
        distinct_percentage:
          type: string
          title: Distinct Percentage
          description: This field describes the percentage of distinct values for that column in the dataset.
        mean:
          type: number
          title: Mean
          description: This field is for columns in the data that have numerical values. This provides an average value of all records for that column in the dataset.
        median:
          type: number
          title: Median
          description: TThis field is for columns in the data that have numerical values. This provides a median value of all records for that column in the dataset.
        max:
          type: number
          title: Max
          description: This field is for columns in the data that have numerical values. This provides the maximum value of all records for that column in the dataset.
        min:
          type: number
          title: Min
          description: This field is for columns in the data that have numerical values. This provides a minimum value of all records for that column in the dataset.
        stddev:
          type: number
          title: Stddev
          description: This field is for columns in the data that have numerical values. This provides the standard deviation of all records for that column in the dataset.
      required:
        - name
        - type
        - mean
        - median
        - max
        - min
        - stddev
    FieldUnivariateSummary:
      type: object
      title: FieldUnivariateSummary
      properties:
        name:
          type: string
          title: Name
          description: This field describes the name of the column in the dataset.
        type:
          type: string
          title: Type
          description: This field describes the data type of the column in the dataset.
        zeroes:
          type: integer
          title: Zeroes
          description: This field describes the number of zeroes for that column in the dataset.
          default: 0
        zeroes_percentage:
          type: string
          title: Zeroes Percentage
          description: This field describes the percentage of zeroes for that column in the dataset.
        missing:
          type: integer
          title: Missing
          description: This field describes the number of missing values for that column in the dataset.
          default: 0
        missing_percentage:
          type: string
          title: Missing Percentage
          description: This field describes the percentage of missing values for that column in the dataset.
        size:
          type: string
          title: Size
          description: This field describes the size of the column in the dataset.
        distinct:
          type: integer
          title: Distinct
          description: This field describes the number of distinct values for that column in the dataset.
          default: 0
        distinct_percentage:
          type: string
          title: Distinct Percentage
          description: This field describes the percentage of distinct values for that column in the dataset.
      required:
        - name
        - type
    SamplingInfo:
      type: object
      title: SamplingInfo
      properties:
        sampling_type:
          description: This field describes the strategy used to sample this dataset.
          allOf:
            - $ref: '#/components/schemas/SamplingTypes'
        sample_size:
          type: integer
          title: Sample Size
          description: This field provides the number of records that are part of the sample.
          minimum: 1
          exclusiveMaximum: true
          maximum: 10000
        sample_on_create:
          type: boolean
          title: Sample On Create
          description: This field specifies if the provided sampling strategy needs to be invoked during creation of the dataset.
          default: false
    SamplingTypes:
      type: string
      enum:
        - random
        - top
        - bottom
      title: SamplingTypes
      description: An enumeration.
    DatasetMutability:
      type: string
      enum:
        - immutable
        - append
        - upsert
      title: DatasetMutability
      description: An enumeration.
    DatasetReadResponse:
      type: object
      title: DatasetReadResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          title: Data
          description: This field describes the response data of the read API. The output contains all the metadata about the dataset that was registered during creation.
          allOf:
            - $ref: '#/components/schemas/Dataset'
      required:
        - status
        - data
    DatasetDeleteResponse:
      type: object
      title: DatasetDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the delete API response status.
          default: ''
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
    PartialUpdateDataset:
      type: object
      title: PartialUpdateDataset
      properties:
        dataset_name:
          type: string
          title: Dataset Name
          description: This field describes the name of the dataset.
        dataset_description:
          type: string
          title: Dataset Description
          description: This field provides a description about the dataset.
        dataset_schema:
          type: array
          title: Dataset Schema
          description: This field describes the schema of the dataset. It defines the rules and formats of the various fields in the dataset.
          default: []
          items:
            $ref: '#/components/schemas/DatasetUpdateField'
        dataset_summary:
          title: Dataset Summary
          description: This field provides a summary about the dataset. The summary includes metadata about the dataset and univariate summary of all fields in the dataset.
          allOf:
            - $ref: '#/components/schemas/DatasetSummary'
        dataset_group:
          type: string
          title: Dataset Group
          description: This field describes the name of the dataset group that the dataset belongs to.
        access_modes:
          title: Access Modes
          description: This field describes the updates to the storage details of the dataset.
          allOf:
            - $ref: '#/components/schemas/UpdateDatasetAccessModes'
        sampling_info:
          title: Sampling Info
          description: This field provides the configuration / strategy required for sampling the dataset during creation.
          allOf:
            - $ref: '#/components/schemas/SamplingInfo'
        path_to_sample_data:
          type: string
          title: Path To Sample Data
          description: This field references the path to the sample data (a CSV file) for this dataset.
        profiling_status:
          description: This field is a boolean that is used to describe if a dataset has been profiled or not.
          allOf:
            - $ref: '#/components/schemas/DatasetProfilingStatus'
        sampling_status:
          description: This field is a boolean that is used to describe if a dataset has been sampled or not.
          allOf:
            - $ref: '#/components/schemas/DatasetSamplingStatus'
        sync_status:
          description: This field is a enum that is used to describe the latest sync run status
          allOf:
            - $ref: '#/components/schemas/DatasetSynchronizeStatus'
        next_sync_ts:
          type: string
          title: Next Sync Ts
          description: This field describes the next time when the dataset is to be synced
        last_profiled_ts:
          type: string
          title: Last Profiled Ts
          description: This field describes the last time when the dataset was profiled.
        last_sampled_ts:
          type: string
          title: Last Sampled Ts
          description: This field describes the last time when the dataset was sampled.
        last_synchronized_ts:
          type: string
          title: Last Synchronized Ts
          description: This field describes the last time when the dataset was synchronized.
        internal:
          type: boolean
          title: Internal
          description: This field is a boolean that is used to describe if a dataset is an internal dataset or not.
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a dataset is a preset dataset or not.
        tags:
          title: Tags
          description: This field describes updates to the tags that are associated to the dataset.
          allOf:
            - $ref: '#/components/schemas/UpdateDatasetTags'
        number_of_records:
          type: integer
          title: Number Of Records
          description: This field describes the number of records in the dataset.
        number_of_columns:
          type: integer
          title: Number Of Columns
          description: This field describes the number of columns in the dataset.
        size:
          type: integer
          title: Size
          description: This field describes the size of the dataset in bytes
        number_of_access_modes:
          type: integer
          title: Number Of Access Modes
          description: This field describes the number of access modes in the dataset.
        list_of_access_modes:
          type: array
          title: List Of Access Modes
          description: This field describes the list_of_access_modes
    DatasetUpdateField:
      type: object
      title: DatasetUpdateField
      additionalProperties: false
      properties:
        field_name:
          type: string
          title: Field Name
          description: This field describes the name of the column in the dataset.
        field_description:
          type: string
          title: Field Description
          description: This field provides a short description about the corresponding column in the dataset.
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the column in the dataset.
          default: []
          items:
            type: string
      required:
        - field_name
    UpdateDatasetAccessModes:
      type: object
      title: UpdateDatasetAccessModes
      additionalProperties: false
      properties:
        remove:
          type: array
          title: Remove
          description: This field describes all the existing access pattern definitions that need to be removed from the dataset as part of the update.
          default: []
          items:
            $ref: '#/components/schemas/DatasetAccessModes'
        update:
          type: array
          title: Update
          description: This field describes all the updates for existing access pattern definitions in the dataset.
          default: []
          items:
            $ref: '#/components/schemas/DatasetAccessModes'
    DatasetSynchronizeStatus:
      type: string
      enum:
        - IN_PROGRESS
        - SYNC_FAILED
        - SYNC_COMPLETED
      title: DatasetSynchronizeStatus
      description: An enumeration.
    UpdateDatasetTags:
      type: object
      title: UpdateDatasetTags
      properties:
        add:
          type: array
          title: Add
          description: This field describes all the new tags that need to be added to the dataset as part of the update.
          default: []
          items:
            type: string
        remove:
          type: array
          title: Remove
          description: This field describes all the existing tags that need to be removed from the dataset as part of the update.
          default: []
          items:
            type: string
    DatasetUpdateResponse:
      type: object
      title: DatasetUpdateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset.'
          allOf:
            - $ref: '#/components/schemas/Dataset'
      required:
        - status
        - config
    app__schemas__dataset_groups__ListingFields:
      type: string
      enum:
        - created_ts
        - updated_ts
        - dataset_group_id
        - dataset_group_name
        - dataset_group_description
        - summarization_status
        - number_of_datasets
        - total_group_size
        - total_datasets_profiled
        - total_datasets_with_descriptions
        - total_datasets_with_column_descriptions
        - tags
        - last_summarized_ts
        - number_of_records
      title: ListingFields
      description: An enumeration.
    DatasetGroupListingResponse:
      type: object
      title: DatasetGroupListingResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the list API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          title: Data
          description: This field describes the response data of the list API. The output contains data about all dataset groups registered and their corresponding dataset group IDs.
          allOf:
            - $ref: '#/components/schemas/DatasetGroupListingResponseValidation'
      required:
        - status
        - data
    DatasetGroupListingResponseValidation:
      type: object
      title: DatasetGroupListingResponseValidation
      properties:
        count:
          type: integer
          title: Count
          description: This field describes the total number of datasets that have been registered.
        results:
          type: array
          title: Results
          description: This field describes the list of datasets that have been registered.
          items:
            $ref: '#/components/schemas/DatasetGroupListingEntity'
      required:
        - count
        - results
    DatasetGroupListingEntity:
      type: object
      title: DatasetGroupListingEntity
      properties:
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the dataset group.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the dataset group.
        dataset_group_id:
          type: string
          title: Dataset Group Id
          description: This field describes the identifier of the dataset group.
        dataset_group_name:
          type: string
          title: Dataset Group Name
          description: This field describes the name of the dataset group.
        number_of_datasets:
          type: integer
          title: Number Of Datasets
          description: This field describes the total number of datasets that belong to the dataset group.
        total_group_size:
          type: integer
          title: Total Group Size
          description: This field describes the total size of the dataset group.
        total_datasets_profiled:
          type: integer
          title: Total Datasets Profiled
          description: This field contains the total number of datasets in the dataset group which have been profiled.
        total_datasets_with_descriptions:
          type: integer
          title: Total Datasets With Descriptions
          description: This field contains the total number of datasets in the dataset group which have a dataset description.
        total_datasets_with_column_descriptions:
          type: integer
          title: Total Datasets With Column Descriptions
          description: This field contains the total number of datasets in the dataset group which have a column-level description.
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the dataset group.
          default: []
          items:
            type: string
      required:
        - created_ts
        - updated_ts
        - dataset_group_id
        - dataset_group_name
    CreateDatasetGroup:
      type: object
      title: CreateDatasetGroup
      properties:
        dataset_group_name:
          type: string
          title: Dataset Group Name
          description: This field describes the name of the dataset group.
        dataset_group_description:
          type: string
          title: Dataset Group Description
          description: This field provides a short description about the dataset group.
        datasets:
          type: array
          title: Datasets
          description: This field contains the list of identifiers for the selected datasets.
          default: []
          items:
            $ref: '#/components/schemas/DatasetEntity'
        summarization_status:
          description: This field provides a status for the summarization of the dataset group.
          allOf:
            - $ref: '#/components/schemas/DatasetGroupSummarizationStatus'
        last_summarized_ts:
          type: string
          title: Last Summarized Ts
          description: This field contains the timestamp of the last summarization of the dataset group.
        total_group_size:
          type: integer
          title: Total Group Size
          description: This field describes the total size of the dataset group.
        number_of_datasets:
          type: integer
          title: Number Of Datasets
          description: This field describes the total number of datasets that belong to the dataset group.
        number_of_records:
          type: integer
          title: Number Of Records
          description: This field contains the timestamp of the last summarization of the dataset group.
        dataset_group_summary:
          title: Dataset Group Summary
          description: 'This field provides a summary about the dataset group, and includes statistics about the different datasets that belong to this dataset group.'
          default: {}
          allOf:
            - $ref: '#/components/schemas/DatasetGroupSummary'
        relationship:
          type: array
          title: Relationship
          description: This field contains all the relationships between the datasets that belong to this dataset group.
          default: []
          items:
            $ref: '#/components/schemas/Relationship'
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the dataset group.
          default: []
          items:
            type: string
        internal:
          type: boolean
          title: Internal
          description: This field is a boolean that is used to describe if a dataset group is an internal dataset group or not.
          default: false
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a dataset group is a preset dataset group or not.
          default: false
      required:
        - dataset_group_name
    DatasetEntity:
      type: object
      title: DatasetEntity
      properties:
        dataset_id:
          type: string
          title: Dataset Id
          description: This field describes the identifier of the dataset.
        dataset_name:
          type: string
          title: Dataset Name
          description: This field describes the name of the dataset.
        dataset_schema:
          type: array
          title: Dataset Schema
          description: This field describes the dataset schema. It defines the rules and formats of the various columns in the dataset.
          items:
            $ref: '#/components/schemas/DatasetColumnEntity'
      required:
        - dataset_id
    DatasetColumnEntity:
      type: object
      title: DatasetColumnEntity
      properties:
        field_name:
          type: string
          title: Field Name
          description: This field describes the name of the column in the dataset.
        data_type:
          description: This field describes the data type of the column in the dataset.
          allOf:
            - $ref: '#/components/schemas/FieldDataType'
      required:
        - field_name
        - data_type
    DatasetGroupSummarizationStatus:
      type: string
      enum:
        - SUMMARIZATION_IN_PROGRESS
        - SUMMARIZED
        - SUMMARIZATION_FAILED
        - NOT_SUMMARIZED
      title: DatasetGroupSummarizationStatus
      description: An enumeration.
    DatasetGroupSummary:
      type: object
      title: DatasetGroupSummary
      properties:
        number_of_datasets:
          type: integer
          title: Number Of Datasets
          description: This field describes the total number of datasets that belong to the dataset group.
        total_group_size:
          type: integer
          title: Total Group Size
          description: This field describes the total size of the dataset group.
        total_datasets_profiled:
          type: integer
          title: Total Datasets Profiled
          description: This field contains the total number of datasets in the dataset group which have been profiled.
        total_datasets_with_descriptions:
          type: integer
          title: Total Datasets With Descriptions
          description: This field contains the total number of datasets in the dataset group which have a dataset description.
        total_datasets_with_column_descriptions:
          type: integer
          title: Total Datasets With Column Descriptions
          description: This field contains the total number of datasets in the dataset group which have a column-level description.
    Relationship:
      type: object
      title: Relationship
      properties:
        primary_dataset:
          type: string
          title: Primary Dataset
          description: This field contains the primary dataset for the relationship.
        secondary_dataset:
          type: string
          title: Secondary Dataset
          description: This field contains the secondary dataset for the relationship.
        primary_dataset_field:
          type: string
          title: Primary Dataset Field
          description: This field describes the field of the primary dataset which is used in the relationship definition.
        secondary_dataset_field:
          type: string
          title: Secondary Dataset Field
          description: This field describes the field of the secondary dataset which is used in the relationship definition.
        association:
          description: This field describes the cardinality of the defined relationship.
          allOf:
            - $ref: '#/components/schemas/Cardinality'
      required:
        - primary_dataset
        - secondary_dataset
        - primary_dataset_field
        - secondary_dataset_field
        - association
    Cardinality:
      type: string
      enum:
        - one_to_one
        - one_to_many
        - many_to_many
      title: Cardinality
      description: An enumeration.
    DatasetGroupCreateResponse:
      type: object
      title: DatasetGroupCreateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the create API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          type: string
          title: Data
          description: This field describes the response of the create API. The output is a dataset group ID that is a unique reference to the registered dataset group.
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset group.'
          allOf:
            - $ref: '#/components/schemas/DatasetGroup'
      required:
        - status
        - data
        - config
    DatasetGroup:
      type: object
      title: DatasetGroup
      properties:
        dataset_group_name:
          type: string
          title: Dataset Group Name
          description: This field describes the name of the dataset group.
        dataset_group_description:
          type: string
          title: Dataset Group Description
          description: This field provides a short description about the dataset group.
        datasets:
          type: array
          title: Datasets
          description: This field contains the list of identifiers for the selected datasets.
          default: []
          items:
            $ref: '#/components/schemas/DatasetEntity'
        summarization_status:
          description: This field provides a status for the summarization of the dataset group.
          allOf:
            - $ref: '#/components/schemas/DatasetGroupSummarizationStatus'
        last_summarized_ts:
          type: string
          title: Last Summarized Ts
          description: This field contains the timestamp of the last summarization of the dataset group.
        total_group_size:
          type: integer
          title: Total Group Size
          description: This field describes the total size of the dataset group.
        number_of_datasets:
          type: integer
          title: Number Of Datasets
          description: This field describes the total number of datasets that belong to the dataset group.
        number_of_records:
          type: integer
          title: Number Of Records
          description: This field contains the timestamp of the last summarization of the dataset group.
        dataset_group_summary:
          title: Dataset Group Summary
          description: 'This field provides a summary about the dataset group, and includes statistics about the different datasets that belong to this dataset group.'
          default: {}
          allOf:
            - $ref: '#/components/schemas/DatasetGroupSummary'
        relationship:
          type: array
          title: Relationship
          description: This field contains all the relationships between the datasets that belong to this dataset group.
          default: []
          items:
            $ref: '#/components/schemas/Relationship'
        tags:
          type: array
          title: Tags
          description: This field describes any set of tags that can be associated to the dataset group.
          default: []
          items:
            type: string
        internal:
          type: boolean
          title: Internal
          description: This field is a boolean that is used to describe if a dataset group is an internal dataset group or not.
          default: false
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a dataset group is a preset dataset group or not.
          default: false
        created_ts:
          type: string
          title: Created Ts
          description: This field describes the initial date of creation of the dataset group.
        updated_ts:
          type: string
          title: Updated Ts
          description: This field describes the latest date of updation of the dataset group.
        dataset_group_id:
          type: string
          title: Dataset Group Id
          description: This field describes the identifier of the dataset group.
      required:
        - dataset_group_name
        - created_ts
        - updated_ts
        - dataset_group_id
    DatasetGroupReadResponse:
      type: object
      title: DatasetGroupReadResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the read API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          title: Data
          description: This field describes the response data of the read API. The output contains all the metadata about the dataset group that was registered during creation.
          allOf:
            - $ref: '#/components/schemas/DatasetGroup'
      required:
        - status
        - data
    DatasetGroupUpdateResponse:
      type: object
      title: DatasetGroupUpdateResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the update API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        config:
          title: Config
          description: 'This field describes all the metadata sent in the input payload, along with a dataset ID that can be used as a unique reference to this dataset group.'
          allOf:
            - $ref: '#/components/schemas/DatasetGroup'
      required:
        - status
        - config
    DatasetGroupDeleteResponse:
      type: object
      title: DatasetGroupDeleteResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the delete API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
      required:
        - status
    PartialUpdateDatasetGroup:
      type: object
      title: PartialUpdateDatasetGroup
      properties:
        dataset_group_name:
          type: string
          title: Dataset Group Name
          description: This field describes the name of the dataset group.
        dataset_group_description:
          type: string
          title: Dataset Group Description
          description: This field provides a short description about the dataset group.
        datasets:
          title: Datasets
          description: This field describes the updates to the datasets that are part of the dataset group.
          allOf:
            - $ref: '#/components/schemas/UpdateDatasetEntity'
        summarization_status:
          description: This field provides a status for the summarization of the dataset group.
          allOf:
            - $ref: '#/components/schemas/DatasetGroupSummarizationStatus'
        last_summarized_ts:
          type: string
          title: Last Summarized Ts
          description: This field contains the timestamp of the last summarization of the dataset group.
        total_group_size:
          type: integer
          title: Total Group Size
          description: This field describes the total size of the dataset group.
        number_of_datasets:
          type: integer
          title: Number Of Datasets
          description: This field describes the total number of datasets that belong to the dataset group.
        number_of_records:
          type: integer
          title: Number Of Records
          description: This field contains the timestamp of the last summarization of the dataset group.
        total_datasets_with_column_descriptions:
          type: integer
          title: Total Datasets With Column Descriptions
          description: This field contains the number of datasets with column descriptions in the dataset group.
        total_datasets_with_descriptions:
          type: integer
          title: Total Datasets With Descriptions
          description: This field contains the number of datasets with descriptions in the dataset group..
        total_datasets_profiled:
          type: integer
          title: Total Datasets Profiled
          description: This field contains the number of datasets profiled in the dataset group..
        dataset_group_summary:
          title: Dataset Group Summary
          description: 'This field provides a summary about the dataset group, and includes statistics about the different datasets that belong to this dataset group.'
          allOf:
            - $ref: '#/components/schemas/DatasetGroupSummary'
        relationship:
          title: Relationship
          description: This field contains all the relationships between the datasets that belong to this dataset group.
          allOf:
            - $ref: '#/components/schemas/UpdateRelationship'
        internal:
          type: boolean
          title: Internal
          description: This field is a boolean that is used to describe if a dataset group is an internal dataset group or not.
        preset:
          type: boolean
          title: Preset
          description: This field is a boolean that is used to describe if a dataset group is a preset dataset group or not.
        tags:
          title: Tags
          description: This field describes updates to the tags that are associated to the dataset group.
          allOf:
            - $ref: '#/components/schemas/UpdateDatasetGroupTags'
    UpdateDatasetEntity:
      type: object
      title: UpdateDatasetEntity
      properties:
        add:
          type: array
          title: Add
          description: This field describes all the new datasets that need to be added to the dataset group as part of the update.
          default: []
          items:
            $ref: '#/components/schemas/DatasetEntity'
        remove:
          type: array
          title: Remove
          description: This field describes all the existing datasets that need to be removed from the dataset group as part of the update.
          default: []
          items:
            $ref: '#/components/schemas/DatasetEntity'
        update:
          type: array
          title: Update
          description: This field describes all the updates for existing datasets in the dataset group.
          default: []
          items:
            $ref: '#/components/schemas/DatasetEntity'
    UpdateRelationship:
      type: object
      title: UpdateRelationship
      properties:
        add:
          type: array
          title: Add
          description: This field describes all the new datasets that need to be added to the dataset group as part of the update.
          default: []
          items:
            $ref: '#/components/schemas/Relationship'
        remove:
          type: array
          title: Remove
          description: This field describes all the existing datasets that need to be removed from the dataset group as part of the update.
          default: []
          items:
            $ref: '#/components/schemas/Relationship'
        update:
          type: array
          title: Update
          description: This field describes all the updates for existing relationships in the dataset group.
          default: []
          items:
            $ref: '#/components/schemas/Relationship'
    UpdateDatasetGroupTags:
      type: object
      title: UpdateDatasetGroupTags
      properties:
        add:
          type: array
          title: Add
          description: This field describes all the new tags that need to be added to the dataset group as part of the update.
          default: []
          items:
            type: string
        remove:
          type: array
          title: Remove
          description: This field describes all the existing tags that need to be removed from the dataset group as part of the update.
          default: []
          items:
            type: string
    DatasetGroupSummarization:
      type: object
      title: DatasetGroupSummarization
      properties:
        profile_datasets:
          type: boolean
          title: Profile Datasets
          description: This field indicates whether to profile datasets or skip it. Profiling is skipped only if the dataset has been previously profiled.
          default: false
    DatasetGroupSummarizationResponse:
      type: object
      title: DatasetGroupSummarizationResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the summarize API response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          type: object
          title: Data
          description: This field describes a brief message about the API response.
      required:
        - status
        - data
    DatasetGroupSummarizationStatusResponse:
      type: object
      title: DatasetGroupSummarizationStatusResponse
      properties:
        status:
          type: string
          title: Status
          description: This field describes the summarize status API's response status.
        request_id:
          type: string
          title: Request Id
          description: This field describes the request ID of input payload.
          default: ''
        correlation_id:
          type: string
          title: Correlation Id
          description: This field describes the correlation ID of input payload.
          default: ''
        data:
          description: This field provides a status for the summarization of the dataset group.
          allOf:
            - $ref: '#/components/schemas/DatasetGroupSummarizationStatus'
      required:
        - status
        - data
    Publisher:
      type: object
      title: Publisher
      description: Publisher model
      properties:
        topic:
          type: string
          title: Topic
          description: The topic the subscriber is subscribed to.
          maxLength: 236
        message:
          type: object
          title: Message
          description: The message that had to be published.
      required:
        - topic
        - message
    PublisherResponse:
      type: object
      title: PublisherResponse
      description: ProducerResponse model
      properties:
        data:
          title: Data
          description: A dictionary of producer details.
          allOf:
            - $ref: '#/components/schemas/Notification'
      required:
        - data
    Notification:
      type: object
      title: Notification
      description: Publisher model
      properties:
        notification_id:
          type: string
          title: Notification Id
          description: The notification id.
      required:
        - notification_id
    NotficationsResponse:
      type: object
      title: NotficationsResponse
      description: NotificationsResponse model
      properties:
        notifications:
          type: array
          title: Notifications
          description: A List of dictionary of all registered notification details.
          items:
            $ref: '#/components/schemas/DetailedNotification'
        count:
          type: integer
          title: Count
          description: The count of notifications.
      required:
        - notifications
        - count
    DetailedNotification:
      type: object
      title: DetailedNotification
      description: DetailedNotification model
      properties:
        notification_id:
          type: string
          title: Notification Id
          description: The unique identifier of the notification.
        message:
          type: object
          title: Message
          description: The message that had produced.
        created_ts:
          type: string
          title: Created Ts
          description: The timestamp when the notification was created.
        updated_ts:
          type: string
          title: Updated Ts
          description: The timestamp when the notification was updated.
        status:
          type: string
          title: Status
          description: The status of the notification.
      required:
        - notification_id
        - message
        - created_ts
        - updated_ts
        - status
    AcknowledgeNotification:
      type: object
      title: AcknowledgeNotification
      description: AcknowledgeNotification model
      properties:
        notification_id:
          type: string
          title: Notification Id
          description: The unique identifier of the notification.
      required:
        - notification_id
    Subscribe:
      type: object
      title: Subscribe
      description: Subscriber model
      properties:
        topic:
          type: string
          title: Topic
          description: The topic the subscriber is subscribed to.
      required:
        - topic
    SubscribeResponse:
      type: object
      title: SubscribeResponse
      description: SubscriberResponse model
      properties:
        data:
          title: Data
          description: A dictionary of subscriber details.
          allOf:
            - $ref: '#/components/schemas/SubscribeConfig'
      required:
        - data
    SubscribeConfig:
      type: object
      title: SubscribeConfig
      description: SubscriberConfig model
      properties:
        consumer_group_id:
          type: string
          title: Consumer Group Id
          description: The unique identifier of the subscriber.
        topic:
          type: string
          title: Topic
          description: The topic the subscriber is subscribed to.
      required:
        - consumer_group_id
        - topic
    ListSubscriptionsResponse:
      type: object
      title: ListSubscriptionsResponse
      description: ListSubscriberResponse model
      properties:
        subscriptions:
          type: array
          title: Subscriptions
          description: A List of dictionary of all registered subscriber details.
          items:
            $ref: '#/components/schemas/ListSubscriptions'
      required:
        - subscriptions
    ListSubscriptions:
      type: object
      title: ListSubscriptions
      description: ListSubscriber model
      properties:
        topic:
          type: string
          title: Topic
          description: The topic the subscriber is subscribed to.
      required:
        - topic
    UnSubscribe:
      type: object
      title: UnSubscribe
      description: UnSubscriber model
      properties:
        consumer_group_id:
          type: string
          title: Consumer Group Id
          description: The unique identifier of the subscriber.
      required:
        - consumer_group_id
    UnSubscribeResponse:
      type: object
      title: UnSubscribeResponse
      description: UnSubscriberResponse model
      properties:
        data:
          title: Data
          description: A dictionary of subscriber details.
          allOf:
            - $ref: '#/components/schemas/UnSubscribe'
      required:
        - data
